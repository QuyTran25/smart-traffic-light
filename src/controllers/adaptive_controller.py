# ƒêi·ªÅu khi·ªÉn theo m·∫≠t ƒë·ªô xe
# ƒêi·ªÅu khi·ªÉn theo m·∫≠t ƒë·ªô xe
"""
Thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn th√≠ch ·ª©ng (Adaptive Control) cho h·ªá th·ªëng ƒë√®n giao th√¥ng th√¥ng minh
T√≠nh to√°n v√† ƒëi·ªÅu ch·ªânh th·ªùi gian ƒë√®n d·ª±a tr√™n m·∫≠t ƒë·ªô xe th·ª±c t·∫ø t·∫°i m·ªói h∆∞·ªõng
"""

import traci
import time
import math
from typing import Dict, List, Tuple, Optional
from collections import defaultdict
from enum import Enum

class TrafficDirection(Enum):
    """ƒê·ªãnh nghƒ©a c√°c h∆∞·ªõng giao th√¥ng"""
    NORTH = "B·∫Øc"
    SOUTH = "Nam" 
    EAST = "ƒê√¥ng"
    WEST = "T√¢y"

class TrafficPhase(Enum):
    """ƒê·ªãnh nghƒ©a c√°c pha ƒë√®n giao th√¥ng"""
    NS_GREEN = "NS_GREEN"  # B·∫Øc-Nam xanh
    EW_GREEN = "EW_GREEN"  # ƒê√¥ng-T√¢y xanh
    NS_YELLOW = "NS_YELLOW"  # B·∫Øc-Nam v√†ng
    EW_YELLOW = "EW_YELLOW"  # ƒê√¥ng-T√¢y v√†ng  
    ALL_RED = "ALL_RED"     # T·∫•t c·∫£ ƒë·ªè

class AdaptiveController:
    """
    Thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn th√≠ch ·ª©ng d·ª±a tr√™n m·∫≠t ƒë·ªô xe
    """
    
    def __init__(self, junction_id: str = "J1"):
        """
        Kh·ªüi t·∫°o Adaptive Controller
        
        Args:
            junction_id: ID c·ªßa ng√£ t∆∞ c·∫ßn ƒëi·ªÅu khi·ªÉn (m·∫∑c ƒë·ªãnh "J1")
        """
        self.junction_id = junction_id
        self.current_phase = TrafficPhase.NS_GREEN
        self.phase_start_time = 0
        self.is_active = False
        
        # Tham s·ªë c·∫•u h√¨nh theo t√†i li·ªáu
        self.T_MIN_GREEN = 10.0    # Th·ªùi gian xanh t·ªëi thi·ªÉu (gi√¢y)
        self.T_MAX_GREEN = 120.0   # Th·ªùi gian xanh t·ªëi ƒëa (gi√¢y) 
        self.ALPHA = 0.5           # H·ªá s·ªë √°p l·ª±c (gi√¢y/PCU)
        self.YELLOW_DURATION = 3.0 # Th·ªùi gian v√†ng (gi√¢y)
        self.ALL_RED_BASE = 2.0    # Th·ªùi gian ƒë·ªè to√†n b·ªô c∆° b·∫£n (gi√¢y)
        self.BUFFER_TIME = 1.5     # Th·ªùi gian ƒë·ªám an to√†n (gi√¢y)
        
        # Quy ƒë·ªïi PCU theo ti√™u chu·∫©n Vi·ªát Nam
        self.PCU_CONVERSION = {
            'car': 1.0,        # √î t√¥
            'motorcycle': 0.3,  # Xe m√°y  
            'bus': 1.5,        # Xe bu√Ωt
            'truck': 1.5,      # Xe t·∫£i
            'emergency': 1.0   # Xe c·ª©u th∆∞∆°ng/c·ª©u h·ªèa
        }
        
        # Mapping h∆∞·ªõng v·ªõi edges trong SUMO
        self.direction_edges = {
            TrafficDirection.NORTH: ["-E1"],  
            TrafficDirection.SOUTH: ["-E2"],   
            TrafficDirection.EAST: ["-E3"],   
            TrafficDirection.WEST: ["E0"]       
        }
        
        # Traffic Light IDs trong SUMO
        self.traffic_light_ids = {
            "J1": "J1",  # Main junction
            "J4": "J4"   # Secondary junction n·∫øu c·∫ßn
        }
        
        # L∆∞u tr·ªØ d·ªØ li·ªáu ƒëo l∆∞·ªùng
        self.queue_history: Dict[TrafficDirection, List[float]] = defaultdict(list)
        self.pressure_history: Dict[TrafficDirection, List[float]] = defaultdict(list)
        self.phase_history: List[Tuple[TrafficPhase, float, float]] = []  # (phase, start_time, duration)
        
        # Green debt system (cho PriorityController)
        self.green_debts: Dict[str, float] = defaultdict(float)  # {"B·∫Øc": 10.5, "Nam": 5.2, ...}
        
        # Emergency mode params (SC6)
        self.normal_min_green = self.T_MIN_GREEN
        self.normal_max_green = self.T_MAX_GREEN
        self.emergency_min_green = 12.0
        self.emergency_max_green = 90.0
        
        # Starvation prevention (ch·ªëng b·ªè ƒë√≥i)
        self.MAX_WAITING_TIME = 120.0  # Th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y)
        self.CRITICAL_WAITING_TIME = 60.0  # Th·ªùi gian c·∫£nh b√°o (gi√¢y)
        self.last_green_time: Dict[TrafficDirection, float] = {}  # L·∫ßn xanh cu·ªëi cho m·ªói h∆∞·ªõng
        
        # Kh·ªüi t·∫°o last_green_time
        for direction in TrafficDirection:
            self.last_green_time[direction] = 0.0
        
    def get_vehicle_count_by_direction(self, direction: TrafficDirection) -> int:
        """
        ƒê·∫øm s·ªë xe theo h∆∞·ªõng t·ª´ c√°c edges t∆∞∆°ng ·ª©ng
        
        Args:
            direction: H∆∞·ªõng c·∫ßn ƒë·∫øm xe
            
        Returns:
            S·ªë l∆∞·ª£ng xe (int)
        """
        try:
            total_vehicles = 0
            edges = self.direction_edges.get(direction, [])
            
            for edge in edges:
                try:
                    # L·∫•y danh s√°ch xe tr√™n edge
                    vehicles_on_edge = traci.edge.getLastStepVehicleIDs(edge)
                    
                    # ƒê·∫øm xe ƒëang ch·ªù (v·∫≠n t·ªëc < 2 m/s = k·∫πt xe)
                    waiting_vehicles = 0
                    for veh_id in vehicles_on_edge:
                        try:
                            speed = traci.vehicle.getSpeed(veh_id)
                            if speed < 2.0:  # Xe ƒëang ch·ªù/k·∫πt
                                waiting_vehicles += 1
                        except traci.exceptions.TraCIException:
                            continue
                    
                    total_vehicles += waiting_vehicles
                    
                except traci.exceptions.TraCIException:
                    continue
                    
            return total_vehicles
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·∫øm xe h∆∞·ªõng {direction.value}: {e}")
            return 0
    
    def convert_to_pcu(self, direction: TrafficDirection) -> float:
        """
        Chuy·ªÉn ƒë·ªïi s·ªë xe th√†nh ƒë∆°n v·ªã PCU theo ti√™u chu·∫©n VN
        
        Args:
            direction: H∆∞·ªõng c·∫ßn t√≠nh PCU
            
        Returns:
            T·ªïng PCU (float)
        """
        try:
            total_pcu = 0.0
            edges = self.direction_edges.get(direction, [])
            
            for edge in edges:
                try:
                    vehicles_on_edge = traci.edge.getLastStepVehicleIDs(edge)
                    
                    for veh_id in vehicles_on_edge:
                        try:
                            speed = traci.vehicle.getSpeed(veh_id)
                            if speed < 2.0:  # Ch·ªâ t√≠nh xe ƒëang ch·ªù
                                veh_type = traci.vehicle.getTypeID(veh_id)
                                
                                # X√°c ƒë·ªãnh lo·∫°i xe v√† quy ƒë·ªïi PCU
                                if 'motorcycle' in veh_type.lower() or 'bike' in veh_type.lower():
                                    pcu_value = self.PCU_CONVERSION['motorcycle']
                                elif 'bus' in veh_type.lower():
                                    pcu_value = self.PCU_CONVERSION['bus']
                                elif 'truck' in veh_type.lower():
                                    pcu_value = self.PCU_CONVERSION['truck']
                                elif 'emergency' in veh_type.lower():
                                    pcu_value = self.PCU_CONVERSION['emergency']
                                else:
                                    pcu_value = self.PCU_CONVERSION['car']  # M·∫∑c ƒë·ªãnh
                                
                                total_pcu += pcu_value
                                
                        except traci.exceptions.TraCIException:
                            continue
                            
                except traci.exceptions.TraCIException:
                    continue
                    
            return total_pcu
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh PCU h∆∞·ªõng {direction.value}: {e}")
            return 0.0
    
    def calculate_pressure(self, direction: TrafficDirection) -> float:
        """
        T√≠nh ƒëi·ªÉm √°p l·ª±c cho m·ªôt h∆∞·ªõng
        
        C√¥ng th·ª©c: P = Œ± √ó Queue_length(PCU)
        
        Args:
            direction: H∆∞·ªõng c·∫ßn t√≠nh √°p l·ª±c
            
        Returns:
            ƒêi·ªÉm √°p l·ª±c (float)
        """
        queue_pcu = self.convert_to_pcu(direction)
        pressure = self.ALPHA * queue_pcu
        
        # L∆∞u l·ªãch s·ª≠ ƒë·ªÉ ph√¢n t√≠ch
        self.queue_history[direction].append(queue_pcu)
        self.pressure_history[direction].append(pressure)
        
        return pressure
    
    def calculate_green_time(self, direction: TrafficDirection) -> float:
        """
        T√≠nh th·ªùi gian xanh ƒë·ªông cho m·ªôt h∆∞·ªõng
        
        C√¥ng th·ª©c: G = T_min + Œ± √ó Queue_length(PCU) + Green_Debt_Compensation
        
        Args:
            direction: H∆∞·ªõng c·∫ßn t√≠nh th·ªùi gian xanh
            
        Returns:
            Th·ªùi gian xanh (gi√¢y, float)
        """
        queue_pcu = self.convert_to_pcu(direction)
        green_time = self.T_MIN_GREEN + (self.ALPHA * queue_pcu)
        
        # ‚úÖ B√ô N·ª¢ TH·ªúI GIAN XANH (t·ª´ PriorityController)
        direction_name = direction.value  # "B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y"
        
        if direction_name in self.green_debts and self.green_debts[direction_name] > 0:
            debt = self.green_debts[direction_name]
            
            # B√π m·ªôt ph·∫ßn (30% m·ªói chu k·ª≥ ƒë·ªÉ kh√¥ng qu√° ƒë·ªôt ng·ªôt)
            compensation = min(debt * 0.3, 15.0)  # T·ªëi ƒëa b√π 15s m·ªói l·∫ßn
            green_time += compensation
            
            # Tr·ª´ n·ª£
            self.green_debts[direction_name] -= compensation
            
            print(f"üí∞ {direction_name}: B√π {compensation:.1f}s (N·ª£ c√≤n: {self.green_debts[direction_name]:.1f}s)")
        
        # Gi·ªõi h·∫°n trong kho·∫£ng [T_MIN_GREEN, T_MAX_GREEN]
        green_time = max(self.T_MIN_GREEN, min(green_time, self.T_MAX_GREEN))
        
        return green_time
    
    def calculate_all_red_time(self) -> float:
        """
        T√≠nh th·ªùi gian ƒë·ªè to√†n b·ªô ƒë·ªông
        
        C√¥ng th·ª©c: R = W/v + buffer
        V·ªõi W = 20m (b·ªÅ r·ªông giao l·ªô), v = 10m/s (v·∫≠n t·ªëc trung b√¨nh)
        
        Returns:
            Th·ªùi gian All-Red (gi√¢y, float)
        """
        intersection_width = 20.0  # m√©t
        average_speed = 10.0       # m/s
        
        clearance_time = intersection_width / average_speed
        total_all_red = clearance_time + self.BUFFER_TIME
        
        return max(self.ALL_RED_BASE, total_all_red)
    
    def calculate_waiting_time(self, direction: TrafficDirection) -> float:
        """
        T√≠nh th·ªùi gian ch·ªù c·ªßa m·ªôt h∆∞·ªõng t·ª´ l·∫ßn xanh cu·ªëi c√πng
        
        Args:
            direction: H∆∞·ªõng c·∫ßn t√≠nh
            
        Returns:
            Th·ªùi gian ch·ªù (gi√¢y)
        """
        try:
            current_time = traci.simulation.getTime()
            last_green = self.last_green_time.get(direction, 0.0)
            
            if last_green == 0.0:
                # Ch∆∞a t·ª´ng ƒë∆∞·ª£c xanh, tr·∫£ v·ªÅ 0
                return 0.0
            
            waiting_time = current_time - last_green
            return waiting_time
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh waiting time cho {direction.value}: {e}")
            return 0.0
    
    def check_starvation_prevention(self) -> Tuple[bool, Optional[TrafficPhase]]:
        """
        Ki·ªÉm tra c∆° ch·∫ø ch·ªëng b·ªè ƒë√≥i (Starvation Prevention)
        
        N·∫øu m·ªôt h∆∞·ªõng ch·ªù qu√° l√¢u (> MAX_WAITING_TIME), bu·ªôc chuy·ªÉn pha cho h∆∞·ªõng ƒë√≥
        
        Returns:
            Tuple (should_force_change: bool, force_phase: TrafficPhase)
        """
        current_time = traci.simulation.getTime()
        
        # Ki·ªÉm tra t·ª´ng h∆∞·ªõng
        for direction in TrafficDirection:
            waiting_time = self.calculate_waiting_time(direction)
            
            # C·∫£nh b√°o n·∫øu v∆∞·ª£t ng∆∞·ª°ng critical
            if waiting_time > self.CRITICAL_WAITING_TIME and waiting_time <= self.MAX_WAITING_TIME:
                queue_pcu = self.convert_to_pcu(direction)
                if queue_pcu > 0:  # Ch·ªâ c·∫£nh b√°o n·∫øu c√≥ xe ch·ªù
                    print(f"‚ö†Ô∏è STARVATION WARNING: {direction.value} ƒë√£ ch·ªù {waiting_time:.0f}s (Queue: {queue_pcu:.1f} PCU)")
            
            # Bu·ªôc chuy·ªÉn pha n·∫øu v∆∞·ª£t MAX_WAITING_TIME
            if waiting_time > self.MAX_WAITING_TIME:
                queue_pcu = self.convert_to_pcu(direction)
                
                # Ch·ªâ bu·ªôc chuy·ªÉn n·∫øu c√≥ xe ch·ªù
                if queue_pcu > 0:
                    print(f"üö® STARVATION PREVENTION ACTIVATED!")
                    print(f"   {direction.value} ƒë√£ ch·ªù {waiting_time:.0f}s (> {self.MAX_WAITING_TIME:.0f}s)")
                    print(f"   Queue: {queue_pcu:.1f} PCU")
                    print(f"   ‚Üí Bu·ªôc chuy·ªÉn pha cho h∆∞·ªõng n√†y!")
                    
                    # X√°c ƒë·ªãnh pha c·∫ßn chuy·ªÉn
                    if direction in [TrafficDirection.NORTH, TrafficDirection.SOUTH]:
                        # C·∫ßn pha NS_GREEN
                        if self.current_phase == TrafficPhase.NS_GREEN:
                            return False, None  # ƒê√£ ƒëang xanh
                        else:
                            return True, TrafficPhase.NS_YELLOW  # Chuy·ªÉn sang NS
                    else:  # EAST ho·∫∑c WEST
                        # C·∫ßn pha EW_GREEN
                        if self.current_phase == TrafficPhase.EW_GREEN:
                            return False, None  # ƒê√£ ƒëang xanh
                        else:
                            return True, TrafficPhase.EW_YELLOW  # Chuy·ªÉn sang EW
        
        return False, None
    
    def get_direction_priorities(self) -> Dict[TrafficDirection, float]:
        """
        T√≠nh ƒë·ªô ∆∞u ti√™n cho t·∫•t c·∫£ c√°c h∆∞·ªõng
        
        Returns:
            Dictionary {h∆∞·ªõng: ƒëi·ªÉm √°p l·ª±c}
        """
        priorities = {}
        for direction in TrafficDirection:
            priorities[direction] = self.calculate_pressure(direction)
            
        return priorities
    
    def should_change_phase(self) -> Tuple[bool, Optional[TrafficPhase]]:
        """
        Quy·∫øt ƒë·ªãnh c√≥ n√™n chuy·ªÉn pha hay kh√¥ng d·ª±a tr√™n √°p l·ª±c
        
        Returns:
            Tuple (should_change: bool, next_phase: TrafficPhase)
        """
        current_time = traci.simulation.getTime()
        phase_duration = current_time - self.phase_start_time
        
        # ‚úÖ B∆Ø·ªöC 1: Ki·ªÉm tra starvation prevention (∆∞u ti√™n cao nh·∫•t)
        should_force, force_phase = self.check_starvation_prevention()
        if should_force and force_phase:
            return True, force_phase
        
        # ƒê·∫£m b·∫£o ƒë√£ ƒë·ªß th·ªùi gian xanh t·ªëi thi·ªÉu
        if phase_duration < self.T_MIN_GREEN:
            return False, None
            
        priorities = self.get_direction_priorities()
        
        # T√≠nh √°p l·ª±c t·ªïng cho t·ª´ng nh√≥m pha
        ns_pressure = priorities[TrafficDirection.NORTH] + priorities[TrafficDirection.SOUTH]
        ew_pressure = priorities[TrafficDirection.EAST] + priorities[TrafficDirection.WEST]
        
        # Logic chuy·ªÉn pha
        if self.current_phase == TrafficPhase.NS_GREEN:
            # Hi·ªán t·∫°i B·∫Øc-Nam ƒëang xanh
            if ew_pressure > ns_pressure * 1.2:  # Ng∆∞·ª°ng chuy·ªÉn pha 20%
                return True, TrafficPhase.NS_YELLOW
            elif phase_duration >= self.T_MAX_GREEN:  # ƒê√£ ƒë·∫°t th·ªùi gian t·ªëi ƒëa
                return True, TrafficPhase.NS_YELLOW
                
        elif self.current_phase == TrafficPhase.EW_GREEN:
            # Hi·ªán t·∫°i ƒê√¥ng-T√¢y ƒëang xanh
            if ns_pressure > ew_pressure * 1.2:  # Ng∆∞·ª°ng chuy·ªÉn pha 20%
                return True, TrafficPhase.EW_YELLOW
            elif phase_duration >= self.T_MAX_GREEN:  # ƒê√£ ƒë·∫°t th·ªùi gian t·ªëi ƒëa
                return True, TrafficPhase.EW_YELLOW
                
        return False, None
    
    def apply_phase(self, phase: TrafficPhase) -> bool:
        """
        √Åp d·ª•ng pha ƒë√®n l√™n SUMO
        
        Args:
            phase: Pha ƒë√®n c·∫ßn √°p d·ª•ng
            
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Mapping pha v·ªõi SUMO traffic light programs
            phase_mapping = {
                TrafficPhase.NS_GREEN: 0,   # B·∫Øc-Nam xanh, ƒê√¥ng-T√¢y ƒë·ªè
                TrafficPhase.NS_YELLOW: 1,  # B·∫Øc-Nam v√†ng, ƒê√¥ng-T√¢y ƒë·ªè
                TrafficPhase.ALL_RED: 2,    # T·∫•t c·∫£ ƒë·ªè
                TrafficPhase.EW_GREEN: 3,   # ƒê√¥ng-T√¢y xanh, B·∫Øc-Nam ƒë·ªè
                TrafficPhase.EW_YELLOW: 4   # ƒê√¥ng-T√¢y v√†ng, B·∫Øc-Nam ƒë·ªè
            }
            
            sumo_phase = phase_mapping.get(phase)
            if sumo_phase is not None:
                traci.trafficlight.setPhase(self.junction_id, sumo_phase)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                current_time = traci.simulation.getTime()
                if self.current_phase != phase:
                    # L∆∞u l·ªãch s·ª≠ pha tr∆∞·ªõc
                    if self.phase_start_time > 0:
                        duration = current_time - self.phase_start_time
                        self.phase_history.append((self.current_phase, self.phase_start_time, duration))
                    
                    # ‚úÖ C·∫≠p nh·∫≠t last_green_time khi chuy·ªÉn sang pha GREEN
                    if phase == TrafficPhase.NS_GREEN:
                        self.last_green_time[TrafficDirection.NORTH] = current_time
                        self.last_green_time[TrafficDirection.SOUTH] = current_time
                    elif phase == TrafficPhase.EW_GREEN:
                        self.last_green_time[TrafficDirection.EAST] = current_time
                        self.last_green_time[TrafficDirection.WEST] = current_time
                    
                    self.current_phase = phase
                    self.phase_start_time = current_time
                
                return True
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y mapping cho pha: {phase}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi √°p d·ª•ng pha {phase}: {e}")
            return False
    
    def start(self) -> bool:
        """
        B·∫Øt ƒë·∫ßu thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn th√≠ch ·ª©ng
        
        Returns:
            True n·∫øu kh·ªüi ƒë·ªông th√†nh c√¥ng
        """
        try:
            if not traci.isLoaded():
                print("‚ùå SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông!")
                return False
                
            # Ki·ªÉm tra traffic light t·ªìn t·∫°i
            tl_list = traci.trafficlight.getIDList()
            if self.junction_id not in tl_list:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y traffic light: {self.junction_id}")
                return False
            
            # Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu
            self.current_phase = TrafficPhase.NS_GREEN
            self.phase_start_time = traci.simulation.getTime()
            self.is_active = True
            
            # √Åp d·ª•ng pha ban ƒë·∫ßu
            self.apply_phase(self.current_phase)
            
            print(f"‚úÖ Adaptive Controller ƒë√£ kh·ªüi ƒë·ªông cho {self.junction_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông Adaptive Controller: {e}")
            return False
    
    def stop(self):
        """D·ª´ng thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn"""
        self.is_active = False
        print("üõë Adaptive Controller ƒë√£ d·ª´ng")
    
    def step(self) -> bool:
        """
        Th·ª±c hi·ªán m·ªôt b∆∞·ªõc ƒëi·ªÅu khi·ªÉn (g·ªçi m·ªói simulation step)
        
        Returns:
            True n·∫øu th·ª±c hi·ªán th√†nh c√¥ng
        """
        if not self.is_active:
            return False
            
        try:
            current_time = traci.simulation.getTime()
            
            # X·ª≠ l√Ω logic theo pha hi·ªán t·∫°i
            if self.current_phase in [TrafficPhase.NS_GREEN, TrafficPhase.EW_GREEN]:
                # Pha xanh - ki·ªÉm tra c√≥ c·∫ßn chuy·ªÉn pha kh√¥ng
                should_change, next_phase = self.should_change_phase()
                if should_change and next_phase:
                    self.apply_phase(next_phase)
                    
            elif self.current_phase in [TrafficPhase.NS_YELLOW, TrafficPhase.EW_YELLOW]:
                # Pha v√†ng - chuy·ªÉn sang All-Red sau khi h·∫øt th·ªùi gian v√†ng
                phase_duration = current_time - self.phase_start_time
                if phase_duration >= self.YELLOW_DURATION:
                    self.apply_phase(TrafficPhase.ALL_RED)
                    
            elif self.current_phase == TrafficPhase.ALL_RED:
                # Pha All-Red - chuy·ªÉn sang pha xanh ti·∫øp theo
                phase_duration = current_time - self.phase_start_time
                all_red_time = self.calculate_all_red_time()
                
                if phase_duration >= all_red_time:
                    # Quy·∫øt ƒë·ªãnh pha xanh ti·∫øp theo d·ª±a tr√™n √°p l·ª±c
                    priorities = self.get_direction_priorities()
                    ns_pressure = priorities[TrafficDirection.NORTH] + priorities[TrafficDirection.SOUTH]
                    ew_pressure = priorities[TrafficDirection.EAST] + priorities[TrafficDirection.WEST]
                    
                    if ns_pressure >= ew_pressure:
                        next_phase = TrafficPhase.NS_GREEN
                    else:
                        next_phase = TrafficPhase.EW_GREEN
                        
                    self.apply_phase(next_phase)
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói trong b∆∞·ªõc ƒëi·ªÅu khi·ªÉn: {e}")
            return False
    
    def get_status(self) -> Dict:
        """
        L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa controller
        
        Returns:
            Dictionary ch·ª©a th√¥ng tin tr·∫°ng th√°i
        """
        try:
            current_time = traci.simulation.getTime()
            phase_duration = current_time - self.phase_start_time
            
            # T√≠nh √°p l·ª±c hi·ªán t·∫°i cho t·∫•t c·∫£ h∆∞·ªõng
            priorities = self.get_direction_priorities()
            
            # T√≠nh th·ªùi gian xanh d·ª± ki·∫øn cho pha ti·∫øp theo
            ns_pressure = priorities[TrafficDirection.NORTH] + priorities[TrafficDirection.SOUTH]
            ew_pressure = priorities[TrafficDirection.EAST] + priorities[TrafficDirection.WEST]
            
            return {
                'junction_id': self.junction_id,
                'current_phase': self.current_phase.value,
                'phase_duration': round(phase_duration, 1),
                'is_active': self.is_active,
                'pressures': {dir.value: round(pressure, 2) for dir, pressure in priorities.items()},
                'ns_total_pressure': round(ns_pressure, 2),
                'ew_total_pressure': round(ew_pressure, 2),
                'phase_count': len(self.phase_history)
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i: {e}")
            return {'error': str(e)}
    
    def get_statistics(self) -> Dict:
        """
        L·∫•y th·ªëng k√™ hi·ªáu su·∫•t c·ªßa thu·∫≠t to√°n
        
        Returns:
            Dictionary ch·ª©a c√°c metrics th·ªëng k√™
        """
        try:
            if not self.phase_history:
                return {'message': 'Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™'}
            
            # Th·ªëng k√™ th·ªùi gian pha
            phase_durations = [duration for _, _, duration in self.phase_history]
            avg_phase_duration = sum(phase_durations) / len(phase_durations)
            
            # Th·ªëng k√™ √°p l·ª±c trung b√¨nh
            avg_pressures = {}
            for direction, pressures in self.pressure_history.items():
                if pressures:
                    avg_pressures[direction.value] = sum(pressures) / len(pressures)
            
            # Th·ªëng k√™ queue length trung b√¨nh
            avg_queues = {}
            for direction, queues in self.queue_history.items():
                if queues:
                    avg_queues[direction.value] = sum(queues) / len(queues)
            
            return {
                'total_phases': len(self.phase_history),
                'average_phase_duration': round(avg_phase_duration, 2),
                'average_pressures': {k: round(v, 2) for k, v in avg_pressures.items()},
                'average_queue_lengths': {k: round(v, 2) for k, v in avg_queues.items()},
                'total_simulation_time': round(sum(phase_durations), 2)
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh th·ªëng k√™: {e}")
            return {'error': str(e)}
    
    def add_green_debt(self, direction: str, debt_time: float):
        """
        Th√™m 'n·ª£' th·ªùi gian xanh cho m·ªôt h∆∞·ªõng
        S·∫Ω ƒë∆∞·ª£c b√π trong chu k·ª≥ ti·∫øp theo
        
        Args:
            direction: H∆∞·ªõng b·ªã ·∫£nh h∆∞·ªüng ("B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y")
            debt_time: Th·ªùi gian xanh b·ªã m·∫•t (gi√¢y)
        """
        self.green_debts[direction] += debt_time
        print(f"üí≥ {direction}: N·ª£ th√™m {debt_time:.1f}s ‚Üí T·ªïng n·ª£: {self.green_debts[direction]:.1f}s")
    
    def get_phase_elapsed_time(self, current_time: float) -> float:
        """
        Tr·∫£ v·ªÅ th·ªùi gian ƒë√£ tr√¥i qua c·ªßa pha hi·ªán t·∫°i
        D√πng cho PriorityController ki·ªÉm tra safe_min_green
        
        Args:
            current_time: Th·ªùi gian hi·ªán t·∫°i
            
        Returns:
            Th·ªùi gian ƒë√£ tr√¥i qua (gi√¢y)
        """
        return current_time - self.phase_start_time
    
    def set_emergency_params(self, min_green: float, max_green: float):
        """
        SC6: ƒêi·ªÅu ch·ªânh tham s·ªë khi emergency mode
        
        Args:
            min_green: Th·ªùi gian xanh t·ªëi thi·ªÉu m·ªõi
            max_green: Th·ªùi gian xanh t·ªëi ƒëa m·ªõi
        """
        self.T_MIN_GREEN = min_green
        self.T_MAX_GREEN = max_green
        print(f"üö® Emergency params: min_green={min_green}s, max_green={max_green}s")
    
    def restore_normal_params(self):
        """
        SC6: Kh√¥i ph·ª•c tham s·ªë b√¨nh th∆∞·ªùng sau emergency mode
        """
        self.T_MIN_GREEN = self.normal_min_green
        self.T_MAX_GREEN = self.normal_max_green
        print(f"‚úÖ Kh√¥i ph·ª•c tham s·ªë adaptive: min_green={self.T_MIN_GREEN}s, max_green={self.T_MAX_GREEN}s")
