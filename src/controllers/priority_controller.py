 # ƒêi·ªÅu khi·ªÉn ∆∞u ti√™n xe c·ª©u h·ªèa, c·ª©u th∆∞∆°ng
# ƒêi·ªÅu khi·ªÉn ∆∞u ti√™n xe c·ª©u h·ªèa, c·ª©u th∆∞∆°ng
"""
Thu·∫≠t to√°n x·ª≠ l√Ω ∆∞u ti√™n (Preemption Control) cho xe kh·∫©n c·∫•p
S·ª≠ d·ª•ng State Machine ƒë·ªÉ ghi ƒë√® thu·∫≠t to√°n th√¥ng th∆∞·ªùng khi c√≥ xe ∆∞u ti√™n
"""

import traci
import time
import math
from typing import Dict, List, Tuple, Optional, Set
from collections import defaultdict, deque
from enum import Enum
from datetime import datetime

class PreemptionState(Enum):
    """Tr·∫°ng th√°i c·ªßa m√°y tr·∫°ng th√°i ∆∞u ti√™n"""
    NORMAL = "NORMAL"                    # Ch·∫ø ƒë·ªô th√¥ng th∆∞·ªùng (Adaptive Control)
    DETECTION = "DETECTION"              # Ph√°t hi·ªán xe ∆∞u ti√™n
    SAFE_TRANSITION = "SAFE_TRANSITION"  # Chuy·ªÉn ti·∫øp an to√†n
    PREEMPTION_GREEN = "PREEMPTION_GREEN" # ƒê√®n xanh cho xe ∆∞u ti√™n
    HOLD_PREEMPTION = "HOLD_PREEMPTION"  # Gi·ªØ ∆∞u ti√™n th√™m
    RESTORE = "RESTORE"                  # Kh√¥i ph·ª•c v·ªÅ b√¨nh th∆∞·ªùng

class EmergencyVehicle:
    """Class ƒë·∫°i di·ªán cho xe ∆∞u ti√™n"""
    def __init__(self, vehicle_id: str, vehicle_type: str, detection_time: float, 
                 direction: str, distance: float, speed: float):
        self.vehicle_id = vehicle_id
        self.vehicle_type = vehicle_type
        self.detection_time = detection_time
        self.direction = direction
        self.distance = distance
        self.speed = speed
        self.eta = distance / max(speed, 0.1)  # Tr√°nh chia cho 0
        self.confirmed = False
        self.served = False
        
        # ‚úÖ KPI: Emergency Clearance Time
        self.clearance_time: Optional[float] = None  # Th·ªùi gian t·ª´ ph√°t hi·ªán ‚Üí qua ng√£ t∆∞
        self.clearance_start_time: Optional[float] = None  # Th·ªùi gian b·∫Øt ƒë·∫ßu clearance

class PriorityController:
    """
    Thu·∫≠t to√°n x·ª≠ l√Ω ∆∞u ti√™n xe kh·∫©n c·∫•p
    """
    
    def __init__(self, junction_id: str = "J1", adaptive_controller=None, ui_callback=None):
        """
        Kh·ªüi t·∫°o Priority Controller
        
        Args:
            junction_id: ID c·ªßa ng√£ t∆∞
            adaptive_controller: Tham chi·∫øu ƒë·∫øn Adaptive Controller
            ui_callback: Callback function ƒë·ªÉ c·∫≠p nh·∫≠t UI (optional)
        """
        self.junction_id = junction_id
        self.adaptive_controller = adaptive_controller
        self.ui_callback = ui_callback  # Callback ƒë·ªÉ c·∫≠p nh·∫≠t UI
        self.current_state = PreemptionState.NORMAL
        self.state_start_time = 0
        self.is_active = False
        
        # Tham s·ªë c·∫•u h√¨nh
        self.DETECTION_RADIUS = 200.0      # B√°n k√≠nh ph√°t hi·ªán (m√©t)
        self.ETA_THRESHOLD = 12.0          # Ng∆∞·ª°ng ETA ƒë·ªÉ k√≠ch ho·∫°t ∆∞u ti√™n (gi√¢y)
        self.CONFIRMATION_WINDOW = 1.0     # Th·ªùi gian x√°c nh·∫≠n (gi√¢y)
        self.CONFIRMATION_COUNT = 2        # S·ªë l·∫ßn x√°c nh·∫≠n c·∫ßn thi·∫øt
        self.PREEMPT_MIN_GREEN = 8.0       # Th·ªùi gian xanh t·ªëi thi·ªÉu cho ∆∞u ti√™n (gi√¢y)
        self.SAFE_MIN_GREEN_BEFORE = 4.0   # Th·ªùi gian xanh t·ªëi thi·ªÉu tr∆∞·ªõc khi c·∫Øt (gi√¢y)
        self.YELLOW_DURATION = 3.0         # Th·ªùi gian v√†ng (gi√¢y)
        self.ALL_RED_EMERGENCY = 3.0       # Th·ªùi gian All-Red kh·∫©n c·∫•p (gi√¢y)
        self.MAX_PREEMPT_PER_MINUTE = 2    # Gi·ªõi h·∫°n s·ªë l·∫ßn ∆∞u ti√™n/ph√∫t
        self.PREEMPT_COOLDOWN = 60.0       # Th·ªùi gian ngh·ªâ gi·ªØa c√°c l·∫ßn ∆∞u ti√™n (gi√¢y)
        
        # Danh s√°ch lo·∫°i xe ∆∞u ti√™n (type ID v√† vehicle class)
        self.EMERGENCY_VEHICLE_TYPES = {
            'priority',         # typeID="priority" trong route file
            'ambulance',        # typeID="ambulance"
            'emergency',        # vClass="emergency" trong SUMO
            'fire',             # xe c·ª©u h·ªèa
            'police',           # xe c·∫£nh s√°t
            'c·ª©u_th∆∞∆°ng',       # ti·∫øng Vi·ªát
            'c·ª©u_h·ªèa',          # ti·∫øng Vi·ªát
            'c·∫£nh_s√°t'          # ti·∫øng Vi·ªát
        }
        
        # Mapping h∆∞·ªõng v·ªõi edges (SUMO network edges)
        # B·∫Øc: T·ª´ J2 xu·ªëng J1 (-E1)
        # Nam: T·ª´ J3 l√™n J1 (-E2)  
        # ƒê√¥ng: T·ª´ J1 sang J4 (E3)
        # T√¢y: T·ª´ J0 sang J1 (E0)
        self.direction_edges = {
            "B·∫Øc": ["-E1"],
            "Nam": ["-E2"],
            "ƒê√¥ng": ["E3"],
            "T√¢y": ["E0"]
        }
        
        # Mapping h∆∞·ªõng v·ªõi pha ƒë√®n
        self.direction_phases = {
            "B·∫Øc": 0,   # NS_GREEN
            "Nam": 0,   # NS_GREEN
            "ƒê√¥ng": 3,  # EW_GREEN
            "T√¢y": 3    # EW_GREEN
        }
        
        # D·ªØ li·ªáu theo d√µi
        self.detected_vehicles: Dict[str, EmergencyVehicle] = {}
        self.confirmed_vehicles: Dict[str, EmergencyVehicle] = {}
        self.pending_vehicles: Dict[str, EmergencyVehicle] = {}  # SC3: Xe ch·ªù
        self.served_vehicles: List[EmergencyVehicle] = []
        self.rejected_vehicles: List[Dict] = []  # SC6: Xe b·ªã t·ª´ ch·ªëi
        self.failed_preemptions: List[Dict] = []  # SC5: ∆Øu ti√™n th·∫•t b·∫°i
        self.false_positives: List[Dict] = []  # SC4: B√°o gi·∫£
        self.preemption_history: List[Dict] = []
        self.detection_confirmations: Dict[str, List[float]] = defaultdict(list)
        
        # Th·ªëng k√™ ∆∞u ti√™n
        self.preemption_count_last_minute = deque()
        self.last_preemption_time = 0
        self.priority_vehicle: Optional[EmergencyVehicle] = None  # Xe ƒëang ƒë∆∞·ª£c ∆∞u ti√™n
        self.preemption_start_time = 0.0
        
        # Emergency Mode (SC6)
        self.emergency_mode_active = False
        self.emergency_mode_start_time = 0.0
        
        # ‚úÖ KPI: Emergency Clearance Time tracking
        self.clearance_times: List[float] = []  # Danh s√°ch clearance time c·ªßa t·∫•t c·∫£ xe
        self.EXCELLENT_CLEARANCE = 15.0  # ‚â§ 15s: T·ªët
        self.ACCEPTABLE_CLEARANCE = 25.0  # ‚â§ 25s: Ch·∫•p nh·∫≠n ƒë∆∞·ª£c
    
    def _log_false_positive(self, vehicle_id: str, reason: str, stage: str):
        """
        SC4: Ghi log b√°o gi·∫£ (False Positive)
        
        Args:
            vehicle_id: ID c·ªßa xe b√°o gi·∫£
            reason: L√Ω do (vehicle_disappeared, not_emergency_type, etc.)
            stage: Giai ƒëo·∫°n ph√°t hi·ªán (DETECTION, SAFE_TRANSITION, PREEMPTION_GREEN)
        """
        current_time = traci.simulation.getTime()
        
        log_entry = {
            'vehicle_id': vehicle_id,
            'time': current_time,
            'reason': reason,
            'stage': stage,
            'state': self.current_state.value
        }
        
        self.false_positives.append(log_entry)
        
        print(f"üìù SC4 LOG: B√°o gi·∫£ - Xe {vehicle_id}")
        print(f"   L√Ω do: {reason}")
        print(f"   Giai ƒëo·∫°n: {stage}")
        print(f"   Tr·∫°ng th√°i: {self.current_state.value}")
        print(f"   Th·ªùi gian: {current_time:.1f}s")
    
    def _verify_emergency_vehicle_exists(self, vehicle_id: str, stage: str) -> bool:
        """
        SC4: X√°c minh xe ∆∞u ti√™n v·∫´n t·ªìn t·∫°i v√† h·ª£p l·ªá
        
        Args:
            vehicle_id: ID c·ªßa xe c·∫ßn ki·ªÉm tra
            stage: Giai ƒëo·∫°n ki·ªÉm tra (cho logging)
            
        Returns:
            True n·∫øu xe v·∫´n h·ª£p l·ªá, False n·∫øu l√† b√°o gi·∫£
        """
        try:
            # Ki·ªÉm tra xe v·∫´n t·ªìn t·∫°i
            if vehicle_id not in traci.vehicle.getIDList():
                self._log_false_positive(vehicle_id, 'vehicle_disappeared', stage)
                return False
            
            # Ki·ªÉm tra xe v·∫´n l√† emergency vehicle
            if not self.is_emergency_vehicle(vehicle_id):
                self._log_false_positive(vehicle_id, 'not_emergency_type', stage)
                return False
            
            return True
            
        except Exception as e:
            self._log_false_positive(vehicle_id, f'verification_error: {e}', stage)
            return False
        
    def _calculate_and_log_clearance_time(self, vehicle: EmergencyVehicle, current_time: float):
        """
        ‚úÖ KPI: T√≠nh v√† log Emergency Clearance Time
        
        Clearance Time = Th·ªùi gian t·ª´ khi ph√°t hi·ªán xe ƒë·∫øn khi xe qua ng√£ t∆∞
        
        Args:
            vehicle: Xe ∆∞u ti√™n ƒë√£ qua ng√£ t∆∞
            current_time: Th·ªùi gian hi·ªán t·∫°i
        """
        # T√≠nh clearance time
        clearance_time = current_time - vehicle.detection_time
        vehicle.clearance_time = clearance_time
        
        # L∆∞u v√†o danh s√°ch ƒë·ªÉ t√≠nh th·ªëng k√™
        self.clearance_times.append(clearance_time)
        
        # ƒê√°nh gi√° theo ti√™u chu·∫©n t√†i li·ªáu
        print(f"üìä EMERGENCY CLEARANCE TIME: {clearance_time:.1f}s")
        print(f"   Xe: {vehicle.vehicle_id}")
        print(f"   H∆∞·ªõng: {vehicle.direction}")
        print(f"   Detection time: {vehicle.detection_time:.1f}s")
        print(f"   Cleared time: {current_time:.1f}s")
        
        # ƒê√°nh gi√° hi·ªáu su·∫•t
        if clearance_time <= self.EXCELLENT_CLEARANCE:
            print(f"   ‚úÖ T·ªêT (‚â§ {self.EXCELLENT_CLEARANCE:.0f}s) - ƒê·∫°t m·ª•c ti√™u!")
            evaluation = "EXCELLENT"
        elif clearance_time <= self.ACCEPTABLE_CLEARANCE:
            print(f"   ‚ö†Ô∏è CH·∫§P NH·∫¨N ƒê∆Ø·ª¢C (‚â§ {self.ACCEPTABLE_CLEARANCE:.0f}s)")
            evaluation = "ACCEPTABLE"
        else:
            print(f"   ‚ùå V∆Ø·ª¢T M·ª§C TI√äU (> {self.ACCEPTABLE_CLEARANCE:.0f}s)")
            evaluation = "POOR"
        
        # Th√™m v√†o statistics
        vehicle.clearance_evaluation = evaluation
        
        return clearance_time, evaluation
    
    def get_junction_position(self) -> Tuple[float, float]:
        """
        L·∫•y t·ªça ƒë·ªô c·ªßa ng√£ t∆∞
        
        Returns:
            Tuple (x, y) t·ªça ƒë·ªô ng√£ t∆∞
        """
        try:
            # L·∫•y t·ªça ƒë·ªô t·ª´ traffic light ho·∫∑c junction
            junction_pos = traci.junction.getPosition(self.junction_id)
            return junction_pos
        except:
            # Fallback: s·ª≠ d·ª•ng t·ªça ƒë·ªô m·∫∑c ƒë·ªãnh cho J1
            return (0.0, 0.0)
    
    def calculate_distance_to_junction(self, vehicle_id: str) -> float:
        """
        T√≠nh kho·∫£ng c√°ch t·ª´ xe ƒë·∫øn ng√£ t∆∞
        
        Args:
            vehicle_id: ID c·ªßa xe
            
        Returns:
            Kho·∫£ng c√°ch (m√©t)
        """
        try:
            veh_pos = traci.vehicle.getPosition(vehicle_id)
            junction_pos = self.get_junction_position()
            
            # T√≠nh kho·∫£ng c√°ch Euclidean
            distance = math.sqrt(
                (veh_pos[0] - junction_pos[0])**2 + 
                (veh_pos[1] - junction_pos[1])**2
            )
            
            return distance
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh kho·∫£ng c√°ch xe {vehicle_id}: {e}")
            return float('inf')
    
    def get_vehicle_direction(self, vehicle_id: str) -> Optional[str]:
        """
        X√°c ƒë·ªãnh h∆∞·ªõng di chuy·ªÉn c·ªßa xe
        
        Args:
            vehicle_id: ID c·ªßa xe
            
        Returns:
            H∆∞·ªõng di chuy·ªÉn ("B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y") ho·∫∑c None
        """
        try:
            current_edge = traci.vehicle.getRoadID(vehicle_id)
            
            # T√¨m h∆∞·ªõng t∆∞∆°ng ·ª©ng v·ªõi edge
            for direction, edges in self.direction_edges.items():
                if current_edge in edges:
                    return direction
                    
            return None
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x√°c ƒë·ªãnh h∆∞·ªõng xe {vehicle_id}: {e}")
            return None
    
    def is_emergency_vehicle(self, vehicle_id: str) -> bool:
        """
        Ki·ªÉm tra xe c√≥ ph·∫£i xe ∆∞u ti√™n kh√¥ng
        
        Args:
            vehicle_id: ID c·ªßa xe
            
        Returns:
            True n·∫øu l√† xe ∆∞u ti√™n
        """
        try:
            veh_type = traci.vehicle.getTypeID(vehicle_id).lower()
            veh_class = traci.vehicle.getVehicleClass(vehicle_id).lower()
            
            # Ki·ªÉm tra theo type ID v√† vehicle class
            return any(emergency_type in veh_type or emergency_type in veh_class 
                      for emergency_type in self.EMERGENCY_VEHICLE_TYPES)
                      
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra lo·∫°i xe {vehicle_id}: {e}")
            return False
    
    def scan_for_emergency_vehicles(self) -> List[EmergencyVehicle]:
        """
        Qu√©t t√¨m xe ∆∞u ti√™n trong b√°n k√≠nh ph√°t hi·ªán
        
        Returns:
            Danh s√°ch xe ∆∞u ti√™n ƒë∆∞·ª£c ph√°t hi·ªán
        """
        emergency_vehicles = []
        current_time = traci.simulation.getTime()
        
        try:
            # L·∫•y t·∫•t c·∫£ xe ƒêANG DI CHUY·ªÇN trong m√¥ ph·ªèng
            all_vehicles = traci.vehicle.getIDList()
            
            for vehicle_id in all_vehicles:
                try:
                    # Ki·ªÉm tra xe c√≥ ph·∫£i ∆∞u ti√™n kh√¥ng
                    if not self.is_emergency_vehicle(vehicle_id):
                        continue
                    
                    print(f"üö® Ph√°t hi·ªán xe ∆∞u ti√™n: {vehicle_id}")
                    
                    # T√≠nh kho·∫£ng c√°ch ƒë·∫øn ng√£ t∆∞
                    distance = self.calculate_distance_to_junction(vehicle_id)
                    
                    print(f"üìç Kho·∫£ng c√°ch: {distance:.1f}m (Radius: {self.DETECTION_RADIUS}m)")
                    
                    # Ki·ªÉm tra trong b√°n k√≠nh ph√°t hi·ªán
                    if distance <= self.DETECTION_RADIUS:
                        # L·∫•y th√¥ng tin xe
                        speed = traci.vehicle.getSpeed(vehicle_id)
                        direction = self.get_vehicle_direction(vehicle_id)
                        veh_type = traci.vehicle.getTypeID(vehicle_id)
                        
                        print(f"üß≠ H∆∞·ªõng: {direction}, T·ªëc ƒë·ªô: {speed:.1f}m/s")
                        
                        if direction:  # Xe ph·∫£i c√≥ h∆∞·ªõng r√µ r√†ng
                            emergency_veh = EmergencyVehicle(
                                vehicle_id=vehicle_id,
                                vehicle_type=veh_type,
                                detection_time=current_time,
                                direction=direction,
                                distance=distance,
                                speed=speed
                            )
                            
                            emergency_vehicles.append(emergency_veh)
                            print(f"‚úÖ ƒê√£ th√™m xe {vehicle_id} v√†o danh s√°ch ∆∞u ti√™n!")
                        else:
                            print(f"‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c h∆∞·ªõng xe {vehicle_id}")
                            
                except traci.exceptions.TraCIException as e:
                    print(f"‚ö†Ô∏è TraCI exception cho xe {vehicle_id}: {e}")
                    continue
                    
        except Exception as e:
            print(f"‚ùå L·ªói khi qu√©t xe ∆∞u ti√™n: {e}")
            
        return emergency_vehicles
    
    def confirm_emergency_vehicle(self, vehicle: EmergencyVehicle) -> bool:
        """
        SC4: X√°c nh·∫≠n xe ∆∞u ti√™n ƒë·ªÉ tr√°nh b√°o gi·∫£ (False Positive)
        
        Quy tr√¨nh x√°c nh·∫≠n k√©p:
        - Ph√°t hi·ªán 2 l·∫ßn li√™n ti·∫øp trong c·ª≠a s·ªï 1 gi√¢y
        - Ki·ªÉm tra xe v·∫´n t·ªìn t·∫°i v√† v·∫´n l√† emergency vehicle
        
        Args:
            vehicle: ƒê·ªëi t∆∞·ª£ng EmergencyVehicle
            
        Returns:
            True n·∫øu xe ƒë∆∞·ª£c x√°c nh·∫≠n
        """
        current_time = traci.simulation.getTime()
        vehicle_id = vehicle.vehicle_id
        
        # SC4: Ki·ªÉm tra xe v·∫´n t·ªìn t·∫°i trong simulation
        try:
            if vehicle_id not in traci.vehicle.getIDList():
                print(f"‚ö†Ô∏è SC4: Xe {vehicle_id} kh√¥ng c√≤n t·ªìn t·∫°i - B√°o gi·∫£!")
                self._log_false_positive(vehicle_id, 'vehicle_disappeared', 'DETECTION')
                return False
            
            # SC4: Ki·ªÉm tra xe v·∫´n l√† emergency vehicle
            if not self.is_emergency_vehicle(vehicle_id):
                print(f"‚ö†Ô∏è SC4: Xe {vehicle_id} kh√¥ng ph·∫£i emergency vehicle - B√°o gi·∫£!")
                self._log_false_positive(vehicle_id, 'not_emergency_type', 'DETECTION')
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è SC4: L·ªói khi ki·ªÉm tra xe {vehicle_id}: {e}")
            self._log_false_positive(vehicle_id, f'verification_error: {e}', 'DETECTION')
            return False
        
        # Th√™m th·ªùi ƒëi·ªÉm ph√°t hi·ªán v√†o l·ªãch s·ª≠
        self.detection_confirmations[vehicle_id].append(current_time)
        
        # L·ªçc c√°c ph√°t hi·ªán c≈© (ngo√†i c·ª≠a s·ªï x√°c nh·∫≠n)
        self.detection_confirmations[vehicle_id] = [
            t for t in self.detection_confirmations[vehicle_id]
            if current_time - t <= self.CONFIRMATION_WINDOW
        ]
        
        # Ki·ªÉm tra c√≥ ƒë·ªß s·ªë l·∫ßn x√°c nh·∫≠n kh√¥ng
        if len(self.detection_confirmations[vehicle_id]) >= self.CONFIRMATION_COUNT:
            vehicle.confirmed = True
            print(f"‚úÖ SC4: Xe {vehicle_id} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ({len(self.detection_confirmations[vehicle_id])} l·∫ßn)")
            return True
            
        return False
    
    def can_activate_preemption(self) -> bool:
        """
        Ki·ªÉm tra c√≥ th·ªÉ k√≠ch ho·∫°t ∆∞u ti√™n kh√¥ng (gi·ªõi h·∫°n t·∫ßn su·∫•t)
        
        Returns:
            True n·∫øu c√≥ th·ªÉ k√≠ch ho·∫°t ∆∞u ti√™n
        """
        current_time = traci.simulation.getTime()
        
        # Ki·ªÉm tra cooldown
        if current_time - self.last_preemption_time < self.PREEMPT_COOLDOWN:
            return False
        
        # C·∫≠p nh·∫≠t ƒë·∫øm ∆∞u ti√™n trong ph√∫t qua
        cutoff_time = current_time - 60.0
        while self.preemption_count_last_minute and self.preemption_count_last_minute[0] < cutoff_time:
            self.preemption_count_last_minute.popleft()
        
        # Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l·∫ßn ∆∞u ti√™n
        if len(self.preemption_count_last_minute) >= self.MAX_PREEMPT_PER_MINUTE:
            return False
            
        return True
    
    def select_priority_vehicle(self, vehicles: List[EmergencyVehicle]) -> Optional[EmergencyVehicle]:
        """
        Ch·ªçn xe ∆∞u ti√™n t·ª´ danh s√°ch (∆∞u ti√™n xe ƒë·∫øn tr∆∞·ªõc)
        
        Args:
            vehicles: Danh s√°ch xe ∆∞u ti√™n
            
        Returns:
            Xe ƒë∆∞·ª£c ch·ªçn ∆∞u ti√™n ho·∫∑c None
        """
        if not vehicles:
            return None
        
        # L·ªçc xe c√≥ ETA nh·ªè h∆°n ng∆∞·ª°ng
        eligible_vehicles = [v for v in vehicles if v.eta <= self.ETA_THRESHOLD]
        
        if not eligible_vehicles:
            return None
            
        # S·∫Øp x·∫øp theo ETA (xe ƒë·∫øn tr∆∞·ªõc ƒë∆∞·ª£c ∆∞u ti√™n)
        eligible_vehicles.sort(key=lambda v: v.eta)
        
        return eligible_vehicles[0]
    
    def select_priority_vehicle_smart(self) -> Optional[EmergencyVehicle]:
        """
        SC3: Ch·ªçn xe ∆∞u ti√™n th√¥ng minh t·ª´ danh s√°ch confirmed vehicles
        - So s√°nh ETA
        - N·∫øu ETA g·∫ßn nhau (¬±2s) ‚Üí Ch·ªçn xe g·∫ßn h∆°n
        - Xe kh√¥ng ch·ªçn ‚Üí ƒê∆∞a v√†o pending_vehicles
        
        Returns:
            Xe ƒë∆∞·ª£c ch·ªçn ∆∞u ti√™n ho·∫∑c None
        """
        if not self.confirmed_vehicles:
            return None
        
        vehicles = list(self.confirmed_vehicles.values())
        
        # L·ªçc xe c√≥ ETA ‚â§ 30s
        eligible = [v for v in vehicles if v.eta <= 30]
        
        if not eligible:
            return None
        
        # S·∫Øp x·∫øp theo ETA
        eligible.sort(key=lambda v: v.eta)
        
        # SC3: N·∫øu c√≥ 2+ xe v√† ETA g·∫ßn nhau
        if len(eligible) >= 2:
            eta_diff = abs(eligible[0].eta - eligible[1].eta)
            if eta_diff <= 2.0:
                # ETA g·∫ßn nhau (¬±2s) ‚Üí Ch·ªçn xe g·∫ßn h∆°n
                print(f"‚ö° SC3: C√≥ {len(eligible)} xe, ETA g·∫ßn nhau ({eta_diff:.1f}s)")
                print(f"   Ch·ªçn xe g·∫ßn h∆°n theo distance")
                eligible.sort(key=lambda v: v.distance)
        
        # Xe ƒë∆∞·ª£c ch·ªçn
        selected = eligible[0]
        
        # Xe c√≤n l·∫°i ‚Üí ƒê∆∞a v√†o pending queue
        for v in eligible[1:]:
            self.pending_vehicles[v.vehicle_id] = v
            print(f"üìù SC3: Xe {v.vehicle_id} ƒë∆∞a v√†o pending queue")
        
        return selected
    
    def activate_emergency_mode(self, rejected_vehicle: EmergencyVehicle):
        """
        SC6: K√≠ch ho·∫°t Emergency Mode khi v∆∞·ª£t rate limit
        - T·ª´ ch·ªëi xe ∆∞u ti√™n
        - ƒêi·ªÅu ch·ªânh tham s·ªë adaptive
        - Log ƒë·ªÉ ph√¢n t√≠ch
        
        Args:
            rejected_vehicle: Xe b·ªã t·ª´ ch·ªëi ∆∞u ti√™n
        """
        current_time = traci.simulation.getTime()
        
        self.emergency_mode_active = True
        self.emergency_mode_start_time = current_time
        
        print(f"üö® SC6 EMERGENCY MODE ACTIVATED")
        print(f"   T·ª´ ch·ªëi xe {rejected_vehicle.vehicle_id}")
        print(f"   ƒê√£ ∆∞u ti√™n {len(self.preemption_count_last_minute)} l·∫ßn trong 60s")
        
        # Log xe b·ªã t·ª´ ch·ªëi
        self.rejected_vehicles.append({
            'vehicle_id': rejected_vehicle.vehicle_id,
            'time': current_time,
            'reason': 'rate_limit_exceeded',
            'eta': rejected_vehicle.eta,
            'direction': rejected_vehicle.direction,
            'distance': rejected_vehicle.distance
        })
        
        # ƒêi·ªÅu ch·ªânh adaptive controller (n·∫øu c√≥)
        if self.adaptive_controller:
            try:
                # TƒÉng min_green ƒë·ªÉ ·ªïn ƒë·ªãnh, gi·∫£m max_green ƒë·ªÉ lu√¢n chuy·ªÉn nhanh
                self.adaptive_controller.set_emergency_params(
                    min_green=12.0,
                    max_green=90.0
                )
                print(f"   ƒêi·ªÅu ch·ªânh adaptive: min=12s, max=90s")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëi·ªÅu ch·ªânh adaptive params: {e}")
    
    def should_respect_min_green(self) -> bool:
        """
        Ki·ªÉm tra c√≥ n√™n t√¥n tr·ªçng th·ªùi gian xanh t·ªëi thi·ªÉu kh√¥ng
        
        Returns:
            True n·∫øu c·∫ßn ch·ªù ƒë·ªß min_green
        """
        if not self.adaptive_controller:
            return False
            
        current_time = traci.simulation.getTime()
        phase_duration = current_time - self.adaptive_controller.phase_start_time
        
        return phase_duration < self.SAFE_MIN_GREEN_BEFORE
    
    def calculate_required_phase(self, direction: str) -> int:
        """
        T√≠nh pha ƒë√®n c·∫ßn thi·∫øt cho h∆∞·ªõng xe ∆∞u ti√™n
        
        Args:
            direction: H∆∞·ªõng di chuy·ªÉn c·ªßa xe ∆∞u ti√™n
            
        Returns:
            Phase number for SUMO
        """
        return self.direction_phases.get(direction, 0)
    
    def apply_emergency_phase(self, phase: int) -> bool:
        """
        √Åp d·ª•ng pha ƒë√®n kh·∫©n c·∫•p
        
        Args:
            phase: Pha ƒë√®n c·∫ßn √°p d·ª•ng
            
        Returns:
            True n·∫øu th√†nh c√¥ng
        """
        try:
            traci.trafficlight.setPhase(self.junction_id, phase)
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi √°p d·ª•ng pha kh·∫©n c·∫•p: {e}")
            return False
    
    def transition_to_state(self, new_state: PreemptionState, context: Dict = None):
        """
        Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i m√°y tr·∫°ng th√°i
        
        Args:
            new_state: Tr·∫°ng th√°i m·ªõi
            context: Th√¥ng tin b·ªï sung v·ªÅ vi·ªác chuy·ªÉn ƒë·ªïi
        """
        current_time = traci.simulation.getTime()
        
        print(f"üîÑ Chuy·ªÉn t·ª´ {self.current_state.value} ‚Üí {new_state.value}")
        
        # G·ªçi UI callback ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i visual
        if self.ui_callback:
            try:
                self.ui_callback(self.junction_id, new_state.value, self.priority_vehicle)
            except Exception as e:
                print(f"‚ö†Ô∏è UI callback error: {e}")
        
        # --- QUAN TR·ªåNG: Pause/Resume AdaptiveController ---
        old_state = self.current_state
        
        # Khi r·ªùi NORMAL ‚Üí Pause Adaptive
        if old_state == PreemptionState.NORMAL and new_state != PreemptionState.NORMAL:
            if self.adaptive_controller:
                self.adaptive_controller.is_active = False
                print("‚è∏Ô∏è Pause AdaptiveController")
        
        # Khi v·ªÅ NORMAL ‚Üí Resume Adaptive
        if new_state == PreemptionState.NORMAL and old_state != PreemptionState.NORMAL:
            if self.adaptive_controller:
                self.adaptive_controller.is_active = True
                print("‚ñ∂Ô∏è Resume AdaptiveController")
        
        # L∆∞u l·ªãch s·ª≠ chuy·ªÉn ƒë·ªïi
        if context:
            self.preemption_history.append({
                'from_state': old_state.value,
                'to_state': new_state.value,
                'time': current_time,
                'context': context
            })
        
        self.current_state = new_state
        self.state_start_time = current_time
    
    def handle_normal_state(self):
        """X·ª≠ l√Ω tr·∫°ng th√°i NORMAL"""
        # Qu√©t t√¨m xe ∆∞u ti√™n
        detected_vehicles = self.scan_for_emergency_vehicles()
        
        if detected_vehicles:
            # C·∫≠p nh·∫≠t danh s√°ch xe ƒë∆∞·ª£c ph√°t hi·ªán
            for vehicle in detected_vehicles:
                self.detected_vehicles[vehicle.vehicle_id] = vehicle
                
                # Th·ª≠ x√°c nh·∫≠n xe
                if self.confirm_emergency_vehicle(vehicle):
                    self.confirmed_vehicles[vehicle.vehicle_id] = vehicle
                    
            # Chuy·ªÉn sang DETECTION n·∫øu c√≥ xe ƒë∆∞·ª£c x√°c nh·∫≠n
            if self.confirmed_vehicles:
                self.transition_to_state(PreemptionState.DETECTION, {
                    'detected_count': len(detected_vehicles),
                    'confirmed_count': len(self.confirmed_vehicles)
                })
    
    def handle_detection_state(self):
        """
        X·ª≠ l√Ω tr·∫°ng th√°i DETECTION
        Logic:
        - B∆∞·ªõc 1: Ch·ªçn xe ∆∞u ti√™n (SC3)
        - B∆∞·ªõc 2: Ki·ªÉm tra ETA
        - B∆∞·ªõc 3: Ki·ªÉm tra rate limit (SC6)
        - B∆∞·ªõc 4: Ki·ªÉm tra xe t·ª´ h∆∞·ªõng ƒëang xanh (SC1)
        - B∆∞·ªõc 5: Ki·ªÉm tra safe_min_green (SC2)
        """
        current_time = traci.simulation.getTime()
        
        # --- B∆Ø·ªöC 1: Ch·ªçn xe ∆∞u ti√™n ---
        priority_vehicle = self.select_priority_vehicle_smart()
        
        if not priority_vehicle:
            # Kh√¥ng c√≥ xe ph√π h·ª£p, quay v·ªÅ NORMAL
            print("‚ÑπÔ∏è Kh√¥ng c√≥ xe ∆∞u ti√™n ph√π h·ª£p")
            self.transition_to_state(PreemptionState.NORMAL, {
                'reason': 'no_eligible_vehicle'
            })
            self.detected_vehicles.clear()
            self.confirmed_vehicles.clear()
            return
        
        # --- B∆Ø·ªöC 2: Ph√¢n lo·∫°i theo ETA ---
        if priority_vehicle.eta > 30:
            # ETA qu√° xa ‚Üí Ch·ªù (ƒë·∫∑t l·ªãch)
            print(f"‚è∞ ETA={priority_vehicle.eta:.1f}s > 30s, ch·ªù xe ƒë·∫øn g·∫ßn h∆°n...")
            return  # Gi·ªØ ·ªü DETECTION, ch·ªù ETA gi·∫£m
        
        if priority_vehicle.eta > 12:
            # ETA trong kho·∫£ng 12-30s ‚Üí Monitor ti·∫øp
            print(f"‚è≥ ETA={priority_vehicle.eta:.1f}s, ti·∫øp t·ª•c theo d√µi...")
            return  # Gi·ªØ ·ªü DETECTION
        
        # --- B∆Ø·ªöC 3: ETA ‚â§ 12s ‚Üí Ki·ªÉm tra rate limit (SC6) ---
        if not self.can_activate_preemption():
            # V∆∞·ª£t gi·ªõi h·∫°n 2 l·∫ßn/60s
            print(f"‚õî SC6: V∆∞·ª£t rate limit ({len(self.preemption_count_last_minute)}/2 trong 60s)")
            print(f"   T·ª™ CH·ªêI ∆∞u ti√™n cho xe {priority_vehicle.vehicle_id}")
            
            # K√≠ch ho·∫°t Emergency Mode (SC6)
            self.activate_emergency_mode(priority_vehicle)
            
            # Quay v·ªÅ NORMAL (KH√îNG cho ∆∞u ti√™n)
            self.transition_to_state(PreemptionState.NORMAL, {
                'reason': 'rate_limit_exceeded_sc6',
                'vehicle_id': priority_vehicle.vehicle_id,
                'rejected': True
            })
            self.detected_vehicles.clear()
            self.confirmed_vehicles.clear()
            return
        
        # --- B∆Ø·ªöC 4: Ki·ªÉm tra SC1 (xe t·ª´ h∆∞·ªõng ƒëang xanh) ---
        try:
            current_phase = traci.trafficlight.getPhase(self.junction_id)
            required_phase = self.calculate_required_phase(priority_vehicle.direction)
            
            if current_phase == required_phase:
                # SC1: Xe t·ª´ h∆∞·ªõng ƒëang xanh ‚Üí K√©o d√†i lu√¥n
                print(f"=" * 60)
                print(f"üö® SC1: XE ∆ØU TI√äN T·ª™ H∆Ø·ªöNG ƒêANG XANH")
                print(f"   Xe: {priority_vehicle.vehicle_id}")
                print(f"   H∆∞·ªõng: {priority_vehicle.direction} (Phase {current_phase})")
                print(f"   Kho·∫£ng c√°ch: {priority_vehicle.distance:.1f}m")
                print(f"   ETA: {priority_vehicle.eta:.1f}s")
                print(f"   ‚Üí K√âO D√ÄI ƒê√àN XANH")
                print(f"=" * 60)
                
                # Chuy·ªÉn th·∫≥ng PREEMPTION_GREEN (b·ªè qua SAFE_TRANSITION)
                self.transition_to_state(PreemptionState.PREEMPTION_GREEN, {
                    'scenario': 'SC1',
                    'priority_vehicle': priority_vehicle.vehicle_id,
                    'direction': priority_vehicle.direction,
                    'eta': priority_vehicle.eta,
                    'skip_transition': True
                })
                
                # C·∫≠p nh·∫≠t th·ªëng k√™
                self.preemption_count_last_minute.append(current_time)
                self.last_preemption_time = current_time
                self.preemption_start_time = current_time  # ‚úÖ QUAN TR·ªåNG cho RESTORE
                self.priority_vehicle = priority_vehicle
                self._preemption_counted = True  # ‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·∫øm (ƒë·ªÉ SAFE_TRANSITION kh√¥ng ƒë·∫øm l·∫°i)
                return
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra pha ƒë√®n: {e}")
        
        # --- B∆Ø·ªöC 5: Ki·ªÉm tra SC2 (safe_min_green) ---
        if self.adaptive_controller:
            try:
                phase_elapsed = self.adaptive_controller.get_phase_elapsed_time(current_time)
                
                if phase_elapsed < self.SAFE_MIN_GREEN_BEFORE:  # 4s
                    remaining = self.SAFE_MIN_GREEN_BEFORE - phase_elapsed
                    print(f"‚è∏Ô∏è SC2: Ch·ªù {remaining:.1f}s ƒë·ªÉ ƒë·ªß safe_min_green (4s)")
                    print(f"   Pha hi·ªán t·∫°i m·ªõi xanh ƒë∆∞·ª£c {phase_elapsed:.1f}s")
                    return  # Gi·ªØ ·ªü DETECTION
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra phase_elapsed: {e}")
        
        # --- B∆Ø·ªöC 6: T·∫•t c·∫£ ƒëi·ªÅu ki·ªán OK ‚Üí SAFE_TRANSITION ---
        print(f"=" * 60)
        print(f"üö¶ SC2: CHUY·ªÇN PHA AN TO√ÄN")
        print(f"   Xe: {priority_vehicle.vehicle_id}")
        print(f"   H∆∞·ªõng: {priority_vehicle.direction}")
        print(f"   ETA: {priority_vehicle.eta:.1f}s")
        print(f"   ‚Üí B·∫ÆT ƒê·∫¶U QUY TR√åNH YELLOW ‚Üí ALL-RED ‚Üí GREEN")
        print(f"=" * 60)
        
        self.transition_to_state(PreemptionState.SAFE_TRANSITION, {
            'scenario': 'SC2',
            'priority_vehicle': priority_vehicle.vehicle_id,
            'direction': priority_vehicle.direction,
            'eta': priority_vehicle.eta
        })
        
        # L∆∞u xe ∆∞u ti√™n ƒëang x·ª≠ l√Ω
        self.priority_vehicle = priority_vehicle
        self.preemption_start_time = current_time  # ‚úÖ QUAN TR·ªåNG cho RESTORE
    
    def handle_safe_transition_state(self):
        """
        X·ª≠ l√Ω tr·∫°ng th√°i SAFE_TRANSITION
        Quy tr√¨nh:
        - Giai ƒëo·∫°n 1 (0-3s): V√†ng
        - Giai ƒëo·∫°n 2 (3-6s): All-Red
        - Giai ƒëo·∫°n 3 (>6s): Chuy·ªÉn PREEMPTION_GREEN
        
        SC4: Ki·ªÉm tra b√°o gi·∫£ trong qu√° tr√¨nh chuy·ªÉn pha
        """
        current_time = traci.simulation.getTime()
        elapsed = current_time - self.state_start_time
        
        # --- SC4: Ki·ªÉm tra b√°o gi·∫£ ---
        if self.priority_vehicle:
            if not self._verify_emergency_vehicle_exists(
                self.priority_vehicle.vehicle_id, 'SAFE_TRANSITION'
            ):
                print(f"‚ùå SC4: Ph√°t hi·ªán b√°o gi·∫£ trong SAFE_TRANSITION!")
                print(f"   ‚Üí H·ª¶Y ∆∞u ti√™n, quay v·ªÅ RESTORE")
                
                # H·ªßy ∆∞u ti√™n, quay v·ªÅ RESTORE
                self.transition_to_state(PreemptionState.RESTORE, {
                    'reason': 'false_positive_detected_sc4',
                    'vehicle_id': self.priority_vehicle.vehicle_id,
                    'cancelled': True
                })
                return
        
        # --- Giai ƒëo·∫°n 1: YELLOW (0-3s) ---
        if elapsed <= self.YELLOW_DURATION:
            if elapsed < 0.1:  # L·∫ßn ƒë·∫ßu v√†o state
                print(f"üü° B·∫≠t ƒë√®n v√†ng (Yellow phase - {self.YELLOW_DURATION}s)")
            return  # Gi·ªØ ·ªü state n√†y
        
        # --- Giai ƒëo·∫°n 2: ALL-RED (3-6s) ---
        elif elapsed <= (self.YELLOW_DURATION + self.ALL_RED_EMERGENCY):
            if elapsed < self.YELLOW_DURATION + 0.1:  # L·∫ßn ƒë·∫ßu v√†o all-red
                print(f"üî¥ B·∫≠t All-Red ({self.ALL_RED_EMERGENCY}s) - D·ªçn giao l·ªô")
                self.apply_all_red_phase()
            return
        
        # --- Giai ƒëo·∫°n 3: Ho√†n t·∫•t ‚Üí PREEMPTION_GREEN ---
        else:
            print("‚úÖ Safe transition ho√†n t·∫•t")
            
            # √Åp d·ª•ng pha xanh cho xe ∆∞u ti√™n
            if self.priority_vehicle:
                required_phase = self.calculate_required_phase(self.priority_vehicle.direction)
                self.apply_emergency_phase(required_phase)
                
                print(f"üü¢ B·∫≠t xanh cho h∆∞·ªõng {self.priority_vehicle.direction} (phase {required_phase})")
                
                self.transition_to_state(PreemptionState.PREEMPTION_GREEN, {
                    'vehicle_id': self.priority_vehicle.vehicle_id,
                    'direction': self.priority_vehicle.direction,
                    'phase': required_phase
                })
                
                # C·∫≠p nh·∫≠t th·ªëng k√™ (n·∫øu ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·ªü SC1)
                if not hasattr(self, '_preemption_counted') or not self._preemption_counted:
                    self.preemption_count_last_minute.append(current_time)
                    self.last_preemption_time = current_time
                    self.preemption_start_time = current_time
                    self._preemption_counted = True
            else:
                # Kh√¥ng c√≤n xe ∆∞u ti√™n
                print("‚ö†Ô∏è Kh√¥ng c√≤n xe ∆∞u ti√™n, chuy·ªÉn RESTORE")
                self.transition_to_state(PreemptionState.RESTORE)
    
    def apply_all_red_phase(self):
        """
        √Åp d·ª•ng pha all-red (t·∫•t c·∫£ ƒë√®n ƒë·ªè)
        """
        try:
            # T·∫°o state string v·ªõi t·∫•t c·∫£ ƒë√®n ƒë·ªè (16 k√Ω t·ª± 'r')
            all_red_state = "rrrrrrrrrrrrrrrr"
            traci.trafficlight.setRedYellowGreenState(self.junction_id, all_red_state)
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi √°p d·ª•ng all-red: {e}")
            return False
    
    def handle_preemption_green_state(self):
        """
        X·ª≠ l√Ω tr·∫°ng th√°i PREEMPTION_GREEN
        Logic:
        - B∆∞·ªõc 1: √Åp d·ª•ng pha xanh (l·∫ßn ƒë·∫ßu)
        - B∆∞·ªõc 2: SC4 - Ki·ªÉm tra b√°o gi·∫£
        - B∆∞·ªõc 3: Theo d√µi xe qua ng√£ t∆∞
        - B∆∞·ªõc 4: Ki·ªÉm tra xe b·ªã k·∫πt (SC5)
        - B∆∞·ªõc 5: Quy·∫øt ƒë·ªãnh k·∫øt th√∫c
        """
        current_time = traci.simulation.getTime()
        elapsed = current_time - self.state_start_time
        
        # --- B∆Ø·ªöC 1: √Åp d·ª•ng pha xanh (ch·ªâ l·∫ßn ƒë·∫ßu) ---
        if elapsed < 0.1:
            if self.priority_vehicle:
                required_phase = self.calculate_required_phase(self.priority_vehicle.direction)
                
                print(f"üü¢ B·∫≠t xanh cho h∆∞·ªõng {self.priority_vehicle.direction}")
                print(f"   Phase: {required_phase}, Xe: {self.priority_vehicle.vehicle_id}")
                
                # √Åp d·ª•ng pha xanh
                try:
                    # L·∫•y state string t∆∞∆°ng ·ª©ng
                    if required_phase == 0:  # B·∫Øc-Nam
                        green_state = "GGGgrrrrGGGgrrrr"
                    elif required_phase == 3:  # ƒê√¥ng-T√¢y
                        green_state = "rrrrGGGgrrrrGGGg"
                    else:
                        green_state = "GGGgrrrrGGGgrrrr"  # Default
                    
                    traci.trafficlight.setRedYellowGreenState(self.junction_id, green_state)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi √°p d·ª•ng pha xanh: {e}")
        
        # --- B∆Ø·ªöC 2: SC4 - Ki·ªÉm tra b√°o gi·∫£ ---
        if self.priority_vehicle:
            if not self._verify_emergency_vehicle_exists(
                self.priority_vehicle.vehicle_id, 'PREEMPTION_GREEN'
            ):
                print(f"‚ùå SC4: Ph√°t hi·ªán b√°o gi·∫£ trong PREEMPTION_GREEN!")
                print(f"   ‚Üí H·ª¶Y ∆∞u ti√™n, chuy·ªÉn RESTORE ngay l·∫≠p t·ª©c")
                
                # H·ªßy ∆∞u ti√™n, kh√¥i ph·ª•c adaptive ngay
                self.transition_to_state(PreemptionState.RESTORE, {
                    'reason': 'false_positive_detected_sc4',
                    'vehicle_id': self.priority_vehicle.vehicle_id,
                    'cancelled': True,
                    'green_duration': elapsed
                })
                return
        
        # --- B∆Ø·ªöC 3: Theo d√µi xe ---
        active_vehicles = []
        
        for vid, vehicle in list(self.confirmed_vehicles.items()):
            try:
                # Ki·ªÉm tra xe c√≤n trong simulation kh√¥ng
                if vid not in traci.vehicle.getIDList():
                    # Xe ƒë√£ despawn ‚Üí ƒê√£ qua
                    vehicle.served = True
                    
                    # ‚úÖ T√≠nh Emergency Clearance Time
                    self._calculate_and_log_clearance_time(vehicle, current_time)
                    
                    self.served_vehicles.append(vehicle)
                    print(f"‚úÖ Xe {vid} ƒë√£ qua ng√£ t∆∞ (despawned)")
                    continue
                
                # T√≠nh l·∫°i distance
                distance = self.calculate_distance_to_junction(vid)
                
                if distance > 50:
                    # Xe ƒë√£ qua ng√£ t∆∞ (50m sau junction)
                    vehicle.served = True
                    
                    # ‚úÖ T√≠nh Emergency Clearance Time
                    self._calculate_and_log_clearance_time(vehicle, current_time)
                    
                    self.served_vehicles.append(vehicle)
                    print(f"‚úÖ Xe {vid} ƒë√£ qua ng√£ t∆∞ (distance={distance:.1f}m)")
                    continue
                
                # Xe v·∫´n c√≤n trong v√πng
                if distance < 200:
                    # --- B∆Ø·ªöC 3: Ki·ªÉm tra xe b·ªã k·∫πt (SC5) ---
                    speed = traci.vehicle.getSpeed(vid)
                    
                    if speed < 2.0 and elapsed > 15:
                        # Xe ƒëi ch·∫≠m sau 15s ‚Üí C·∫£nh b√°o
                        print(f"‚ö†Ô∏è SC5: Xe {vid} c√≥ th·ªÉ b·ªã k·∫πt")
                        print(f"   Speed: {speed:.1f}m/s, Elapsed: {elapsed:.1f}s")
                        
                        if elapsed > 30:
                            # K·∫πt qu√° 30s ‚Üí Chuy·ªÉn HOLD_PREEMPTION
                            print(f"‚ùå SC5: Xe {vid} k·∫πt qu√° 30s!")
                            self.transition_to_state(PreemptionState.HOLD_PREEMPTION, {
                                'reason': 'vehicle_stuck',
                                'vehicle_id': vid,
                                'speed': speed,
                                'elapsed': elapsed
                            })
                            return
                    
                    active_vehicles.append(vehicle)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra xe {vid}: {e}")
        
        # C·∫≠p nh·∫≠t danh s√°ch xe active
        self.confirmed_vehicles = {v.vehicle_id: v for v in active_vehicles}
        
        # --- B∆Ø·ªöC 4: SC4 - Ki·ªÉm tra t·∫•t c·∫£ xe v·∫´n h·ª£p l·ªá ---
        # L·ªçc ra c√°c xe kh√¥ng c√≤n h·ª£p l·ªá (b√°o gi·∫£)
        valid_vehicles = []
        for vehicle in active_vehicles:
            if self._verify_emergency_vehicle_exists(vehicle.vehicle_id, 'PREEMPTION_GREEN'):
                valid_vehicles.append(vehicle)
            else:
                print(f"‚ö†Ô∏è SC4: Xe {vehicle.vehicle_id} kh√¥ng c√≤n h·ª£p l·ªá, lo·∫°i kh·ªèi danh s√°ch")
        
        # C·∫≠p nh·∫≠t l·∫°i danh s√°ch xe h·ª£p l·ªá
        active_vehicles = valid_vehicles
        self.confirmed_vehicles = {v.vehicle_id: v for v in active_vehicles}
        
        # --- B∆Ø·ªöC 5: Ki·ªÉm tra ƒëi·ªÅu ki·ªán k·∫øt th√∫c ---
        if not active_vehicles:
            # Kh√¥ng c√≤n xe n√†o ‚Üí K·∫øt th√∫c ngay
            print(f"‚úÖ T·∫•t c·∫£ xe ƒë√£ qua (elapsed={elapsed:.1f}s)")
            self.transition_to_state(PreemptionState.RESTORE, {
                'reason': 'all_vehicles_cleared',
                'green_duration': elapsed,
                'served_count': len(self.served_vehicles)
            })
            return
        
        # N·∫øu c√≤n xe V√Ä ƒë√£ ƒë·ªß min_green (8s) ‚Üí Ki·ªÉm tra xe g·∫ßn nh·∫•t
        if elapsed >= self.PREEMPT_MIN_GREEN:
            # T√¨m xe g·∫ßn ng√£ t∆∞ nh·∫•t
            closest_distance = min(v.distance for v in active_vehicles) if active_vehicles else float('inf')
            
            # N·∫øu xe g·∫ßn nh·∫•t ƒë√£ r·∫•t g·∫ßn (< 30m) ‚Üí Ch·ªù th√™m
            if closest_distance < 30:
                print(f"‚è≥ Xe g·∫ßn nh·∫•t c√≤n {closest_distance:.1f}m, ch·ªù th√™m...")
                return  # Gi·ªØ PREEMPTION_GREEN
            
            # N·∫øu xe c√≤n xa (‚â•30m) v√† ƒë√£ ƒë·ªß min_green ‚Üí Chuy·ªÉn RESTORE
            print(f"‚úÖ ƒê·ªß {self.PREEMPT_MIN_GREEN}s min_green, xe g·∫ßn nh·∫•t c√≤n {closest_distance:.1f}m")
            print(f"   ‚Üí Chuy·ªÉn RESTORE (c√≤n {len(active_vehicles)} xe ch∆∞a qua)")
            self.transition_to_state(PreemptionState.RESTORE, {
                'reason': 'min_green_reached',
                'green_duration': elapsed,
                'remaining_vehicles': len(active_vehicles)
            })
            return
        
        # C√≤n l·∫°i: Gi·ªØ ·ªü PREEMPTION_GREEN, ti·∫øp t·ª•c theo d√µi
    
    def handle_hold_preemption_state(self):
        """
        SC5: X·ª≠ l√Ω tr·∫°ng th√°i HOLD_PREEMPTION (xe b·ªã k·∫πt)
        Logic:
        - Gi·ªØ xanh th√™m cho xe tho√°t k·∫πt
        - Theo d√µi speed c·ªßa xe
        - Timeout 30s ‚Üí RESTORE v·ªõi l·ªói
        """
        current_time = traci.simulation.getTime()
        elapsed = current_time - self.state_start_time
        
        # Timeout 30s (theo t√†i li·ªáu SC5)
        HOLD_TIMEOUT = 30.0
        
        if not self.priority_vehicle:
            # Kh√¥ng c√≥ xe ∆∞u ti√™n, chuy·ªÉn RESTORE
            print("‚ö†Ô∏è Kh√¥ng c√≥ xe ∆∞u ti√™n trong HOLD_PREEMPTION")
            self.transition_to_state(PreemptionState.RESTORE)
            return
        
        vehicle_id = self.priority_vehicle.vehicle_id
        
        # Ki·ªÉm tra xe c√≤n trong simulation kh√¥ng
        if vehicle_id not in traci.vehicle.getIDList():
            # Xe ƒë√£ despawn ‚Üí ƒê√£ qua
            print(f"‚úÖ SC5: Xe {vehicle_id} ƒë√£ qua ng√£ t∆∞ (despawned)")
            self.priority_vehicle.served = True
            
            # ‚úÖ T√≠nh Emergency Clearance Time
            self._calculate_and_log_clearance_time(self.priority_vehicle, current_time)
            
            self.served_vehicles.append(self.priority_vehicle)
            self.transition_to_state(PreemptionState.RESTORE)
            return
        
        try:
            distance = self.calculate_distance_to_junction(vehicle_id)
            speed = traci.vehicle.getSpeed(vehicle_id)
            
            # Ki·ªÉm tra xe ƒë√£ tho√°t k·∫πt ch∆∞a
            if speed > 5.0:
                # Xe ƒë√£ tho√°t k·∫πt (speed > 5 m/s)
                print(f"‚úÖ SC5: Xe {vehicle_id} tho√°t k·∫πt!")
                print(f"   Speed: {speed:.1f}m/s, Elapsed: {elapsed:.1f}s")
                self.transition_to_state(PreemptionState.RESTORE, {
                    'reason': 'vehicle_unstuck',
                    'hold_duration': elapsed
                })
                return
            
            if distance > 50:
                # Xe ƒë√£ qua ng√£ t∆∞
                print(f"‚úÖ SC5: Xe {vehicle_id} ƒë√£ qua ng√£ t∆∞")
                print(f"   Distance: {distance:.1f}m, Elapsed: {elapsed:.1f}s")
                self.priority_vehicle.served = True
                
                # ‚úÖ T√≠nh Emergency Clearance Time
                self._calculate_and_log_clearance_time(self.priority_vehicle, current_time)
                
                self.served_vehicles.append(self.priority_vehicle)
                self.transition_to_state(PreemptionState.RESTORE)
                return
            
            # Ki·ªÉm tra timeout
            if elapsed > HOLD_TIMEOUT:
                # Timeout 30s ‚Üí Ch·∫•p nh·∫≠n th·∫•t b·∫°i
                print(f"‚ùå SC5: TIMEOUT {HOLD_TIMEOUT}s - Xe v·∫´n k·∫πt!")
                print(f"   Speed: {speed:.1f}m/s, Distance: {distance:.1f}m")
                
                # Log l·ªói
                self.failed_preemptions.append({
                    'vehicle_id': vehicle_id,
                    'scenario': 'SC5',
                    'reason': 'stuck_timeout_30s',
                    'time': current_time,
                    'final_speed': speed,
                    'final_distance': distance,
                    'hold_duration': elapsed
                })
                
                # Chuy·ªÉn RESTORE (ch·∫•p nh·∫≠n th·∫•t b·∫°i)
                self.transition_to_state(PreemptionState.RESTORE, {
                    'reason': 'sc5_timeout',
                    'failed': True
                })
                return
            
            # Log ƒë·ªãnh k·ª≥ m·ªói 5s
            if int(elapsed) % 5 == 0 and elapsed - int(elapsed) < 0.1:
                print(f"‚è≥ SC5: Ch·ªù xe tho√°t k·∫πt ({elapsed:.0f}s/{HOLD_TIMEOUT}s)")
                print(f"   Speed: {speed:.1f}m/s, Distance: {distance:.1f}m")
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra xe trong HOLD: {e}")
            self.transition_to_state(PreemptionState.RESTORE)
    
    def handle_restore_state(self):
        """
        X·ª≠ l√Ω tr·∫°ng th√°i RESTORE
        Logic:
        - B∆∞·ªõc 1: T√≠nh th·ªùi gian ∆∞u ti√™n ƒë√£ d√πng
        - B∆∞·ªõc 2: X√°c ƒë·ªãnh h∆∞·ªõng b·ªã ·∫£nh h∆∞·ªüng
        - B∆∞·ªõc 3: T√≠nh th·ªùi gian b√π (SC6)
        - B∆∞·ªõc 4: √Åp d·ª•ng b√π cho Adaptive
        - B∆∞·ªõc 5: X·ª≠ l√Ω Emergency Mode (SC6)
        - B∆∞·ªõc 6: Ki·ªÉm tra pending vehicles (SC3)
        - B∆∞·ªõc 7: Quay v·ªÅ NORMAL
        """
        current_time = traci.simulation.getTime()
        
        # --- B∆Ø·ªöC 1: T√≠nh th·ªùi gian ∆∞u ti√™n ---
        if hasattr(self, 'preemption_start_time') and self.preemption_start_time > 0:
            preemption_duration = current_time - self.preemption_start_time
        else:
            preemption_duration = current_time - self.state_start_time
        
        print(f"üîÑ RESTORE: Kh√¥i ph·ª•c v·ªÅ adaptive")
        print(f"   Th·ªùi gian ∆∞u ti√™n: {preemption_duration:.1f}s")
        print(f"   Xe ƒë√£ ph·ª•c v·ª•: {len(self.served_vehicles)}")
        
        # --- B∆Ø·ªöC 2: X√°c ƒë·ªãnh h∆∞·ªõng b·ªã ·∫£nh h∆∞·ªüng ---
        priority_direction = self.priority_vehicle.direction if self.priority_vehicle else None
        all_directions = {"B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y"}
        
        if priority_direction:
            affected_directions = all_directions - {priority_direction}
        else:
            affected_directions = all_directions
        
        print(f"   H∆∞·ªõng b·ªã ·∫£nh h∆∞·ªüng: {', '.join(affected_directions)}")
        
        # --- B∆Ø·ªöC 3: T√≠nh th·ªùi gian b√π (SC6) ---
        # H·ªá s·ªë b√π ph·ª• thu·ªôc v√†o emergency mode
        if self.emergency_mode_active:
            compensation_factor = 0.5  # B√π 50% trong emergency mode
            print(f"   ‚ö†Ô∏è Emergency mode: B√π 50% th·ªùi gian")
        else:
            compensation_factor = 0.7  # B√π 70% b√¨nh th∆∞·ªùng
            print(f"   B√π 70% th·ªùi gian cho c√°c h∆∞·ªõng b·ªã ·∫£nh h∆∞·ªüng")
        
        # --- B∆Ø·ªöC 4: √Åp d·ª•ng b√π cho Adaptive ---
        if self.adaptive_controller:
            try:
                for direction in affected_directions:
                    # Th·ªùi gian xanh b·ªã m·∫•t = th·ªùi gian ∆∞u ti√™n
                    lost_green = preemption_duration
                    compensation_time = lost_green * compensation_factor
                    
                    # Th√™m v√†o green debt
                    self.adaptive_controller.add_green_debt(direction, compensation_time)
                    
                    print(f"   ‚ûï {direction}: M·∫•t {lost_green:.1f}s ‚Üí B√π {compensation_time:.1f}s")
                
                # K√≠ch ho·∫°t l·∫°i Adaptive
                self.adaptive_controller.is_active = True
                print(f"   ‚úÖ Adaptive Controller ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è L·ªói khi b√π th·ªùi gian: {e}")
        
        # --- B∆Ø·ªöC 5: X·ª≠ l√Ω Emergency Mode (SC6) ---
        if self.emergency_mode_active:
            elapsed_emergency = current_time - self.emergency_mode_start_time
            
            # Gi·ªØ emergency mode trong 120s (2 ph√∫t)
            if elapsed_emergency < 120:
                print(f"   üö® Emergency mode c√≤n {120 - elapsed_emergency:.0f}s")
            else:
                # T·∫Øt emergency mode
                self.emergency_mode_active = False
                print(f"   ‚úÖ T·∫Øt Emergency Mode (ƒë√£ qua 120s)")
                
                # Kh√¥i ph·ª•c tham s·ªë adaptive
                if self.adaptive_controller:
                    try:
                        self.adaptive_controller.restore_normal_params()
                        print(f"   ‚úÖ Kh√¥i ph·ª•c tham s·ªë adaptive b√¨nh th∆∞·ªùng")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è L·ªói khi kh√¥i ph·ª•c params: {e}")
        
        # --- B∆Ø·ªöC 6: Ki·ªÉm tra pending vehicles (SC3) ---
        if self.pending_vehicles:
            print(f"   üîî C√≥ {len(self.pending_vehicles)} xe ƒëang ch·ªù trong pending queue")
            
            # Chuy·ªÉn pending ‚Üí confirmed
            for vid, vehicle in self.pending_vehicles.items():
                self.confirmed_vehicles[vid] = vehicle
                print(f"      - Xe {vid} t·ª´ pending ‚Üí confirmed")
            
            self.pending_vehicles.clear()
            
            # Quay l·∫°i DETECTION ƒë·ªÉ x·ª≠ l√Ω xe ti·∫øp theo
            print(f"   ‚Üí Chuy·ªÉn DETECTION ƒë·ªÉ x·ª≠ l√Ω xe pending")
            self.transition_to_state(PreemptionState.DETECTION, {
                'reason': 'pending_vehicles_exist',
                'count': len(self.confirmed_vehicles)
            })
            return
        
        # --- B∆Ø·ªöC 7: D·ªçn d·∫πp v√† quay v·ªÅ NORMAL ---
        self.detected_vehicles.clear()
        self.confirmed_vehicles.clear()
        self.priority_vehicle = None
        self.preemption_start_time = 0.0
        self._preemption_counted = False
        
        print(f"   ‚úÖ Quay v·ªÅ ch·∫ø ƒë·ªô NORMAL")
        self.transition_to_state(PreemptionState.NORMAL, {
            'reason': 'preemption_completed'
        })
    
    def start(self) -> bool:
        """
        Kh·ªüi ƒë·ªông Priority Controller
        
        Returns:
            True n·∫øu kh·ªüi ƒë·ªông th√†nh c√¥ng
        """
        try:
            if not traci.isLoaded():
                print("‚ùå SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông!")
                return False
            
            self.current_state = PreemptionState.NORMAL
            self.state_start_time = traci.simulation.getTime()
            self.is_active = True
            
            print(f"‚úÖ Priority Controller ƒë√£ kh·ªüi ƒë·ªông cho {self.junction_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông Priority Controller: {e}")
            return False
    
    def stop(self):
        """D·ª´ng Priority Controller"""
        self.is_active = False
        print("üõë Priority Controller ƒë√£ d·ª´ng")
    
    def step(self) -> bool:
        """
        Th·ª±c hi·ªán m·ªôt b∆∞·ªõc x·ª≠ l√Ω ∆∞u ti√™n
        
        Returns:
            True n·∫øu th√†nh c√¥ng
        """
        if not self.is_active:
            return False
        
        try:
            # X·ª≠ l√Ω theo tr·∫°ng th√°i hi·ªán t·∫°i
            if self.current_state == PreemptionState.NORMAL:
                self.handle_normal_state()
            elif self.current_state == PreemptionState.DETECTION:
                self.handle_detection_state()
            elif self.current_state == PreemptionState.SAFE_TRANSITION:
                self.handle_safe_transition_state()
            elif self.current_state == PreemptionState.PREEMPTION_GREEN:
                self.handle_preemption_green_state()
            elif self.current_state == PreemptionState.HOLD_PREEMPTION:
                self.handle_hold_preemption_state()
            elif self.current_state == PreemptionState.RESTORE:
                self.handle_restore_state()
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói trong b∆∞·ªõc x·ª≠ l√Ω ∆∞u ti√™n: {e}")
            return False
    
    def get_status(self) -> Dict:
        """
        L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa Priority Controller
        
        Returns:
            Dictionary ch·ª©a th√¥ng tin tr·∫°ng th√°i
        """
        try:
            current_time = traci.simulation.getTime()
            state_duration = current_time - self.state_start_time
            
            return {
                'junction_id': self.junction_id,
                'current_state': self.current_state.value,
                'state_duration': round(state_duration, 1),
                'is_active': self.is_active,
                'detected_vehicles': len(self.detected_vehicles),
                'confirmed_vehicles': len(self.confirmed_vehicles),
                'served_vehicles': len(self.served_vehicles),
                'preemptions_last_minute': len(self.preemption_count_last_minute),
                'can_activate_preemption': self.can_activate_preemption(),
                'total_preemption_events': len(self.preemption_history)
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i: {e}")
            return {'error': str(e)}
    
    def get_statistics(self) -> Dict:
        """
        L·∫•y th·ªëng k√™ hi·ªáu su·∫•t x·ª≠ l√Ω ∆∞u ti√™n
        
        Returns:
            Dictionary ch·ª©a metrics th·ªëng k√™
        """
        try:
            if not self.preemption_history:
                return {'message': 'Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ ∆∞u ti√™n'}
            
            # Th·ªëng k√™ s·ªë l·∫ßn ∆∞u ti√™n
            total_preemptions = len([h for h in self.preemption_history 
                                   if h['to_state'] == 'PREEMPTION_GREEN'])
            
            # Th·ªëng k√™ th·ªùi gian x·ª≠ l√Ω trung b√¨nh
            processing_times = []
            for i, history in enumerate(self.preemption_history):
                if history['to_state'] == 'PREEMPTION_GREEN':
                    # T√¨m th·ªùi ƒëi·ªÉm RESTORE t∆∞∆°ng ·ª©ng
                    for j in range(i+1, len(self.preemption_history)):
                        if self.preemption_history[j]['to_state'] == 'RESTORE':
                            processing_time = (self.preemption_history[j]['time'] - 
                                             history['time'])
                            processing_times.append(processing_time)
                            break
            
            avg_processing_time = (sum(processing_times) / len(processing_times) 
                                 if processing_times else 0)
            
            # SC4: Th·ªëng k√™ b√°o gi·∫£
            false_positive_count = len(self.false_positives)
            false_positive_by_stage = defaultdict(int)
            false_positive_by_reason = defaultdict(int)
            
            for fp in self.false_positives:
                false_positive_by_stage[fp['stage']] += 1
                false_positive_by_reason[fp['reason']] += 1
            
            # ‚úÖ KPI: Emergency Clearance Time Statistics
            clearance_stats = {}
            if self.clearance_times:
                avg_clearance = sum(self.clearance_times) / len(self.clearance_times)
                min_clearance = min(self.clearance_times)
                max_clearance = max(self.clearance_times)
                
                # ƒê·∫øm theo m·ª©c ƒë·ªô
                excellent_count = len([t for t in self.clearance_times if t <= self.EXCELLENT_CLEARANCE])
                acceptable_count = len([t for t in self.clearance_times 
                                       if self.EXCELLENT_CLEARANCE < t <= self.ACCEPTABLE_CLEARANCE])
                poor_count = len([t for t in self.clearance_times if t > self.ACCEPTABLE_CLEARANCE])
                
                clearance_stats = {
                    'average_clearance_time': round(avg_clearance, 2),
                    'min_clearance_time': round(min_clearance, 2),
                    'max_clearance_time': round(max_clearance, 2),
                    'excellent_count': excellent_count,  # ‚â§ 15s
                    'acceptable_count': acceptable_count,  # ‚â§ 25s
                    'poor_count': poor_count,  # > 25s
                    'excellent_rate': round((excellent_count / len(self.clearance_times)) * 100, 1),
                    'total_measured': len(self.clearance_times)
                }
            
            return {
                'total_preemption_activations': total_preemptions,
                'total_vehicles_served': len(self.served_vehicles),
                'average_processing_time': round(avg_processing_time, 2),
                'successful_preemptions': len(processing_times),
                'preemption_success_rate': (len(processing_times) / max(total_preemptions, 1)) * 100,
                # SC4 Statistics
                'false_positives_count': false_positive_count,
                'false_positives_by_stage': dict(false_positive_by_stage),
                'false_positives_by_reason': dict(false_positive_by_reason),
                # SC5 Statistics
                'failed_preemptions_count': len(self.failed_preemptions),
                # SC6 Statistics
                'rejected_vehicles_count': len(self.rejected_vehicles),
                'emergency_mode_activations': len([fp for fp in self.rejected_vehicles 
                                                   if fp.get('reason') == 'rate_limit_exceeded']),
                # ‚úÖ KPI: Emergency Clearance Time
                'emergency_clearance_time': clearance_stats
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh th·ªëng k√™ ∆∞u ti√™n: {e}")
            return {'error': str(e)}