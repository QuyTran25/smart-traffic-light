import traci
from sumolib import checkBinary
import sys
import os

def khoi_dong_sumo(config_path, gui=True):
    """Kh·ªüi ƒë·ªông m√¥ ph·ªèng SUMO."""
    try:
        # Ki·ªÉm tra file c·∫•u h√¨nh c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {config_path}")
        
        sumo_binary = checkBinary('sumo-gui' if gui else 'sumo')
        
        # Kh·ªüi ƒë·ªông SUMO v·ªõi c√°c tham s·ªë b·ªï sung
        sumo_cmd = [
            sumo_binary, 
            "-c", config_path,
            "--waiting-time-memory", "10000",
            "--time-to-teleport", "300",
            "--no-step-log", "true"
        ]
        
        if not gui:
            sumo_cmd.extend(["--no-warnings", "true"])
        
        traci.start(sumo_cmd)
        print(f"‚úÖ SUMO ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v·ªõi c·∫•u h√¨nh: {config_path}")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng xe trong m√¥ ph·ªèng
        num_vehicles = traci.simulation.getMinExpectedNumber()
        print(f"üìä S·ªë xe d·ª± ki·∫øn trong m√¥ ph·ªèng: {num_vehicles}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông SUMO: {str(e)}")
        return False

def kiem_tra_mo_phong_con_chay():
    """Ki·ªÉm tra xem m√¥ ph·ªèng c√≤n ƒëang ch·∫°y hay kh√¥ng."""
    try:
        # Ki·ªÉm tra s·ªë xe hi·ªán t·∫°i v√† s·ªë xe t·ªëi thi·ªÉu c√≤n l·∫°i
        num_vehicles = traci.simulation.getMinExpectedNumber()
        current_time = traci.simulation.getTime()
        
        # Tr·∫£ v·ªÅ True n·∫øu c√≤n xe ho·∫∑c th·ªùi gian ch∆∞a h·∫øt
        return num_vehicles > 0 or current_time < 3600
    except traci.exceptions.FatalTraCIError:
        return False
    except Exception:
        return False

def dung_sumo():
    """D·ª´ng m√¥ ph·ªèng."""
    try:
        if traci.isLoaded():
            traci.close()
            print("üõë ƒê√£ d·ª´ng m√¥ ph·ªèng SUMO.")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi d·ª´ng SUMO: {str(e)}")

def lay_thong_tin_mo_phong():
    """L·∫•y th√¥ng tin hi·ªán t·∫°i c·ªßa m√¥ ph·ªèng."""
    try:
        current_time = traci.simulation.getTime()
        num_vehicles = traci.simulation.getMinExpectedNumber()
        departed_vehicles = traci.simulation.getDepartedNumber()
        arrived_vehicles = traci.simulation.getArrivedNumber()
        
        return {
            'thoi_gian': current_time,
            'so_xe_con_lai': num_vehicles,
            'xe_da_khoi_hanh': departed_vehicles,
            'xe_da_den': arrived_vehicles
        }
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin m√¥ ph·ªèng: {str(e)}")
        return None

def lay_thong_tin_den_giao_thong(tls_id):
    """L·∫•y th√¥ng tin hi·ªán t·∫°i c·ªßa ƒë√®n giao th√¥ng."""
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return None
        
        current_phase = traci.trafficlight.getPhase(tls_id)
        phase_duration = traci.trafficlight.getPhaseDuration(tls_id)
        next_switch = traci.trafficlight.getNextSwitch(tls_id)
        
        return {
            'phase_hien_tai': current_phase,
            'thoi_gian_phase': phase_duration,
            'thoi_gian_chuyen_tiep': next_switch
        }
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë√®n giao th√¥ng: {str(e)}")
        return None

def dat_phase_den_giao_thong(tls_id, phase_index):
    """ƒê·∫∑t phase cho ƒë√®n giao th√¥ng."""
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return False
        
        traci.trafficlight.setPhase(tls_id, phase_index)
        print(f"‚úÖ ƒê√£ ƒë·∫∑t phase {phase_index} cho ƒë√®n giao th√¥ng {tls_id}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·∫∑t phase: {str(e)}")
        return False

def dat_thoi_gian_phase(tls_id, phase_index, duration):
    """ƒê·∫∑t th·ªùi gian cho m·ªôt phase c·ª• th·ªÉ c·ªßa ƒë√®n giao th√¥ng."""
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return False
        
        traci.trafficlight.setPhaseDuration(tls_id, phase_index, duration)
        print(f"‚úÖ ƒê√£ ƒë·∫∑t th·ªùi gian {duration}s cho phase {phase_index} c·ªßa ƒë√®n {tls_id}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·∫∑t th·ªùi gian phase: {str(e)}")
        return False

def dieu_chinh_den_giao_thong(tls_id, phase_durations):
    """
    ƒêi·ªÅu ch·ªânh th·ªùi gian c√°c phase c·ªßa ƒë√®n giao th√¥ng b·∫±ng c√°ch t·∫°o ch∆∞∆°ng tr√¨nh m·ªõi.
    
    Args:
        tls_id: ID c·ªßa traffic light system
        phase_durations: Dict v·ªõi key l√† phase_index, value l√† duration (gi√¢y)
    """
    return tao_chuong_trinh_den(tls_id, phase_durations)

def lay_danh_sach_den_giao_thong():
    """L·∫•y danh s√°ch t·∫•t c·∫£ ƒë√®n giao th√¥ng trong m√¥ ph·ªèng."""
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return []
        
        tls_ids = traci.trafficlight.getIDList()
        print(f"üìã T√¨m th·∫•y {len(tls_ids)} ƒë√®n giao th√¥ng: {tls_ids}")
        return tls_ids
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch ƒë√®n giao th√¥ng: {str(e)}")
        return []

def dieu_chinh_nhieu_den(tls_ids, phase_durations):
    """
    ƒêi·ªÅu ch·ªânh th·ªùi gian c√°c phase cho nhi·ªÅu ƒë√®n giao th√¥ng.
    
    Args:
        tls_ids: List c√°c ID c·ªßa traffic light systems
        phase_durations: Dict v·ªõi key l√† phase_index, value l√† duration (gi√¢y)
    """
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return False
        
        for tls_id in tls_ids:
            print(f"üîÑ ƒêang ƒëi·ªÅu ch·ªânh ƒë√®n {tls_id}...")
            if not tao_chuong_trinh_den(tls_id, phase_durations):
                return False
        
        print(f"‚úÖ Ho√†n th√†nh ƒëi·ªÅu ch·ªânh {len(tls_ids)} ƒë√®n giao th√¥ng")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒëi·ªÅu ch·ªânh nhi·ªÅu ƒë√®n giao th√¥ng: {str(e)}")
        return False

def dieu_chinh_tat_ca_den(phase_durations):
    """
    ƒêi·ªÅu ch·ªânh th·ªùi gian c√°c phase cho t·∫•t c·∫£ ƒë√®n giao th√¥ng trong m√¥ ph·ªèng.
    
    Args:
        phase_durations: Dict v·ªõi format:
            - N·∫øu c√≥ key 'xanh_chung', 'vang_chung', 'do_toan_phan': fixed-time mode
            - N·∫øu c√≥ key s·ªë (0, 1, ...): adaptive mode
    """
    tls_ids = lay_danh_sach_den_giao_thong()
    if not tls_ids:
        return False
    
    # Ki·ªÉm tra format c·ªßa phase_durations
    if 'xanh_chung' in phase_durations:
        # Fixed-time mode: t·∫°o ch∆∞∆°ng tr√¨nh m·ªõi v·ªõi th·ªùi gian c·ªë ƒë·ªãnh
        return tao_chuong_trinh_fixed_time(tls_ids, phase_durations)
    else:
        # Adaptive mode (legacy)
        return dieu_chinh_nhieu_den(tls_ids, phase_durations)

def tao_chuong_trinh_fixed_time(tls_ids, phase_durations):
    """
    T·∫°o ch∆∞∆°ng tr√¨nh ƒë√®n giao th√¥ng fixed-time v·ªõi th·ªùi gian t√πy ch·ªânh.
    
    Args:
        tls_ids: List c√°c ID c·ªßa traffic light systems
        phase_durations: Dict v·ªõi keys:
            - 'xanh_chung': th·ªùi gian xanh (gi√¢y)
            - 'vang_chung': th·ªùi gian v√†ng (gi√¢y)
            - 'do_toan_phan': th·ªùi gian all-red (gi√¢y)
    """
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return False
        
        green_time = phase_durations.get('xanh_chung', 30)
        yellow_time = phase_durations.get('vang_chung', 3)
        all_red_time = phase_durations.get('do_toan_phan', 2)
        
        print(f"\nüö¶ T·∫°o ch∆∞∆°ng tr√¨nh Fixed-Time:")
        print(f"   ‚îú‚îÄ Xanh: {green_time}s")
        print(f"   ‚îú‚îÄ V√†ng: {yellow_time}s")
        print(f"   ‚îî‚îÄ All-Red: {all_red_time}s")
        
        success_count = 0
        
        for tls_id in tls_ids:
            try:
                # L·∫•y logic hi·ªán t·∫°i
                all_logics = traci.trafficlight.getAllProgramLogics(tls_id)
                
                if not all_logics:
                    print(f"‚ö†Ô∏è {tls_id} kh√¥ng c√≥ program logic, b·ªè qua")
                    continue
                
                # S·ª≠ d·ª•ng logic ƒë·∫ßu ti√™n (th∆∞·ªùng l√† program "0")
                current_logic = all_logics[0]
                
                # C·∫•u tr√∫c phases chu·∫©n cho ng√£ t∆∞ 4 h∆∞·ªõng:
                # Phase 0: NS Green (B·∫Øc-Nam xanh, ƒê√¥ng-T√¢y ƒë·ªè)
                # Phase 1: NS Yellow (B·∫Øc-Nam v√†ng)
                # Phase 2: All Red
                # Phase 3: EW Green (ƒê√¥ng-T√¢y xanh, B·∫Øc-Nam ƒë·ªè)
                # Phase 4: EW Yellow (ƒê√¥ng-T√¢y v√†ng)
                # Phase 5: All Red
                
                if len(current_logic.phases) >= 6:
                    # T·∫°o copy c·ªßa logic ƒë·ªÉ s·ª≠a ƒë·ªïi
                    import copy
                    new_logic = copy.deepcopy(current_logic)
                    
                    # C·∫≠p nh·∫≠t duration cho t·ª´ng phase
                    new_logic.phases[0].duration = green_time     # NS Green
                    new_logic.phases[1].duration = yellow_time    # NS Yellow
                    new_logic.phases[2].duration = all_red_time   # All Red
                    new_logic.phases[3].duration = green_time     # EW Green
                    new_logic.phases[4].duration = yellow_time    # EW Yellow
                    new_logic.phases[5].duration = all_red_time   # All Red
                    
                    # ƒê·∫∑t program ID v·ªÅ "0" (m·∫∑c ƒë·ªãnh)
                    new_logic.programID = "0"
                    
                    # √Åp d·ª•ng logic m·ªõi
                    traci.trafficlight.setProgram(tls_id, "0")
                    traci.trafficlight.setCompleteRedYellowGreenDefinition(tls_id, new_logic)
                    
                    # ƒê·∫∑t phase v·ªÅ 0 ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i chu k·ª≥
                    traci.trafficlight.setPhase(tls_id, 0)
                    
                    print(f"‚úÖ {tls_id}: ƒê√£ c·∫≠p nh·∫≠t Fixed-Time (Chu k·ª≥: {(green_time + yellow_time + all_red_time) * 2}s)")
                    success_count += 1
                    
                else:
                    print(f"‚ö†Ô∏è {tls_id} ch·ªâ c√≥ {len(current_logic.phases)} phases (c·∫ßn √≠t nh·∫•t 6), b·ªè qua")
                    
            except Exception as e:
                print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t {tls_id}: {e}")
                import traceback
                traceback.print_exc()
                continue
        
        if success_count > 0:
            print(f"‚úÖ Ho√†n th√†nh: {success_count}/{len(tls_ids)} ƒë√®n giao th√¥ng ƒë√£ chuy·ªÉn sang Fixed-Time\n")
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ c·∫•u h√¨nh Fixed-Time cho b·∫•t k·ª≥ ƒë√®n n√†o\n")
            return False
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o ch∆∞∆°ng tr√¨nh Fixed-Time: {e}")
        import traceback
        traceback.print_exc()
        return False

def tao_chuong_trinh_den(tls_id, phase_durations):
    """
    T·∫°o ch∆∞∆°ng tr√¨nh ƒë√®n giao th√¥ng m·ªõi v·ªõi th·ªùi gian phase t√πy ch·ªânh.
    
    Args:
        tls_id: ID c·ªßa traffic light system
        phase_durations: Dict v·ªõi key l√† phase_index, value l√† duration (gi√¢y)
                         0: phase xanh B·∫Øc-Nam, 1: phase xanh ƒê√¥ng-T√¢y
    """
    try:
        if not traci.isLoaded():
            print("‚ö†Ô∏è SUMO ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
            return False
        
        # L·∫•y logic hi·ªán t·∫°i
        current_logic = traci.trafficlight.getCompleteRedYellowGreenDefinition(tls_id)[0]
        
        # Mapping phase ch√≠nh: 0->0 (B·∫Øc-Nam), 1->3 (ƒê√¥ng-T√¢y)
        phase_mapping = {0: 0, 1: 3}
        
        # Sao ch√©p v√† s·ª≠a ƒë·ªïi duration ch·ªâ cho phase ch√≠nh
        for logical_phase, actual_phase in phase_mapping.items():
            if logical_phase in phase_durations:
                current_logic.phases[actual_phase].duration = phase_durations[logical_phase]
                print(f"üìù Phase ch√≠nh {logical_phase} (actual {actual_phase}): duration = {phase_durations[logical_phase]}s")
        
        # ƒê·∫∑t l·∫°i logic ƒë√£ s·ª≠a
        traci.trafficlight.setCompleteRedYellowGreenDefinition(tls_id, current_logic)
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh cho ƒë√®n {tls_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o ch∆∞∆°ng tr√¨nh ƒë√®n: {str(e)}")
        return False
