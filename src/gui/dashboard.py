import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import threading, time, random, os, sys

# Th√™m ƒë∆∞·ªùng d·∫´n src v√†o sys.path ƒë·ªÉ import ƒë∆∞·ª£c modules
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from simulation.sumo_connector import khoi_dong_sumo, dung_sumo

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")


class SmartTrafficApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üö¶ H·ªÜ TH·ªêNG 2 NG√É T∆Ø")
        self.geometry("700x850")
        self.minsize(680, 800)
        self.running = False
        self.paused = False  # Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i pause
        self.mode = "M·∫∑c ƒë·ªãnh"
        
        self.green_time = 30
        self.yellow_time = 3
        self.red_time = 30
        
        # Global KPI data
        self.global_kpi_data = {
            "T·ªïng xe": 0,
            "ƒê·ªô tr·ªÖ TB": 0.0,
            "L∆∞u l∆∞·ª£ng": 0,
            "Chu k·ª≥ TB": 0,
            "C√¥ng b·∫±ng": 0.0,
            "Ph·ªëi h·ª£p": 0
        }
        
        # Data for 2 intersections
        self.intersection_data = {
            "Ng√£ t∆∞ 1": {
                "light_state": "ƒê·ªè",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            },
            "Ng√£ t∆∞ 2": {
                "light_state": "Xanh",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            }
        }
        
        self.create_layout()

    # ====================== UI Layout ======================
    def create_layout(self):
        self.configure(fg_color="#f8fafc")
        
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self,
            fg_color="#f8fafc",
            corner_radius=0,
            scrollbar_button_color="#cbd5e1",
            scrollbar_button_hover_color="#94a3b8"
        )
        self.scrollable_frame.pack(fill="both", expand=True, padx=0, pady=0)

        # ---------- HEADER ----------
        header = ctk.CTkFrame(self.scrollable_frame, corner_radius=0, fg_color="#ffffff", height=65)
        header.pack(fill="x", padx=0, pady=0)
        header.pack_propagate(False)
        
        # Header content
        header_left = ctk.CTkFrame(header, fg_color="transparent")
        header_left.pack(side="left", padx=15, pady=10)
        
        # Icon + Title
        ctk.CTkLabel(
            header_left,
            text="üö¶",
            font=("Segoe UI", 20),
        ).pack(side="left", padx=(0, 8))
        
        title_frame = ctk.CTkFrame(header_left, fg_color="transparent")
        title_frame.pack(side="left")
        
        ctk.CTkLabel(
            title_frame,
            text="H·ªÜ TH·ªêNG 2 NG√É T∆Ø TH√îNG MINH",
            font=("Segoe UI", 16, "bold"),
            text_color="#0f172a",
            anchor="w"
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            title_frame,
            text="Demo SUMO - 2 ng√£ t∆∞ k·∫øt n·ªëi",
            font=("Segoe UI", 11),
            text_color="#64748b",
            anchor="w"
        ).pack(anchor="w", pady=(2, 0))
        
        # Status indicator (right side)
        status_frame = ctk.CTkFrame(header, fg_color="transparent")
        status_frame.pack(side="right", padx=15)
        
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="‚ö´ D·ª´ng",
            font=("Segoe UI", 11, "bold"),
            text_color="#64748b"
        )
        self.status_label.pack()

        # ---------- CONTROL BAR ----------
        control_bar_main = ctk.CTkFrame(self.scrollable_frame, fg_color="#ffffff", corner_radius=0)
        control_bar_main.pack(fill="x", padx=0, pady=(1, 0))
        
        # First row - Mode and Action buttons
        control_bar_top = ctk.CTkFrame(control_bar_main, fg_color="transparent", height=45)
        control_bar_top.pack(fill="x", padx=10, pady=(8, 0))
        control_bar_top.pack_propagate(False)
        
        # Left controls
        left_controls = ctk.CTkFrame(control_bar_top, fg_color="transparent")
        left_controls.pack(side="left")
        
        # MODE TABS
        self.mode_option = ctk.StringVar(value="M·∫∑c ƒë·ªãnh")
        mode_segment = ctk.CTkSegmentedButton(
            left_controls,
            values=["M·∫∑c ƒë·ªãnh", "T·ª± ƒë·ªông"],
            variable=self.mode_option,
            font=("Segoe UI", 11, "bold"),
            command=self.change_mode,
            fg_color="#cbd5e1",
            selected_color="#0ea5e9",
            selected_hover_color="#0284c7",
            unselected_color="#cbd5e1",
            unselected_hover_color="#94a3b8",
            text_color="#1e293b",
            width=110,
            height=36
        )
        mode_segment.pack(side="left", padx=(0, 10))

        # CONTROL BUTTONS
        btn_frame = ctk.CTkFrame(left_controls, fg_color="transparent")
        btn_frame.pack(side="left")
        
        # Play button
        self.play_btn = ctk.CTkButton(
            btn_frame,
            text="‚ñ∂",
            fg_color="#10b981",
            hover_color="#059669",
            font=("Segoe UI", 11, "bold"),
            width=42,
            height=36,
            corner_radius=5,
            command=self.start_sim
        )
        self.play_btn.pack(side="left", padx=2)
        
        # Pause button
        self.pause_btn = ctk.CTkButton(
            btn_frame,
            text="‚è∏",
            fg_color="#f59e0b",
            hover_color="#d97706",
            text_color="#000000",
            font=("Segoe UI", 11, "bold"),
            width=42,
            height=36,
            corner_radius=5,
            command=self.pause_sim
        )
        self.pause_btn.pack(side="left", padx=2)
        
        # Stop button
        self.stop_btn = ctk.CTkButton(
            btn_frame,
            text="‚èπ",
            fg_color="#ef4444",
            hover_color="#dc2626",
            font=("Segoe UI", 11, "bold"),
            width=42,
            height=36,
            corner_radius=5,
            command=self.stop_sim
        )
        self.stop_btn.pack(side="left", padx=2)
        
        # Reset button
        reset_btn = ctk.CTkButton(
            btn_frame,
            text="üîÑ",
            fg_color="#64748b",
            hover_color="#475569",
            font=("Segoe UI", 11, "bold"),
            width=42,
            height=36,
            corner_radius=5,
            command=self.reset_all
        )
        reset_btn.pack(side="left", padx=2)
        
        # Export button
        export_btn = ctk.CTkButton(
            btn_frame,
            text="‚¨á",
            fg_color="#3b82f6",
            hover_color="#2563eb",
            font=("Segoe UI", 11, "bold"),
            width=42,
            height=36,
            corner_radius=5,
            command=self.export_log
        )
        export_btn.pack(side="left", padx=2)
        
        # Second row - Scenario selector
        control_bar_bottom = ctk.CTkFrame(control_bar_main, fg_color="transparent", height=42)
        control_bar_bottom.pack(fill="x", padx=10, pady=(6, 8))
        control_bar_bottom.pack_propagate(False)
        
        scenario_frame = ctk.CTkFrame(control_bar_bottom, fg_color="transparent")
        scenario_frame.pack(side="left")
        
        ctk.CTkLabel(
            scenario_frame,
            text="K·ªãch b·∫£n:",
            font=("Segoe UI", 11, "bold"),
            text_color="#334155"
        ).pack(side="left", padx=(0, 8))
        
        self.case_box = ctk.CTkOptionMenu(
            scenario_frame,
            values=["M·∫∑c ƒë·ªãnh", "SC1 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng ch√≠nh", "SC2 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng nh√°nh", "SC3 - Nhi·ªÅu xe ∆∞u ti√™n 2 h∆∞·ªõng", "SC4 - B√°o gi·∫£", "SC5 - Xe ∆∞u ti√™n b·ªã k·∫πt", "SC6 - Nhi·ªÅu xe ∆∞u ti√™n li√™n ti·∫øp"],
            dropdown_font=("Segoe UI", 10),
            fg_color="#cbd5e1",
            button_color="#0ea5e9",
            button_hover_color="#0284c7",
            dropdown_fg_color="#ffffff",
            dropdown_hover_color="#e0f2fe",
            dropdown_text_color="#0f172a",
            text_color="#0f172a",
            width=220,
            height=34,
            corner_radius=5
        )
        self.case_box.pack(side="left")
        self.case_box.set("M·∫∑c ƒë·ªãnh")

        timing_bar = ctk.CTkFrame(self.scrollable_frame, fg_color="#ffffff", corner_radius=0)
        timing_bar.pack(fill="x", padx=0, pady=(1, 0))
        
        timing_container = ctk.CTkFrame(timing_bar, fg_color="transparent", height=50)
        timing_container.pack(fill="x", padx=10, pady=8)
        timing_container.pack_propagate(False)
        
        # Label
        ctk.CTkLabel(
            timing_container,
            text="‚è± Th·ªùi gian ƒë√®n:",
            font=("Segoe UI", 11, "bold"),
            text_color="#334155"
        ).pack(side="left", padx=(0, 12))
        
        # Green light input
        green_frame = ctk.CTkFrame(timing_container, fg_color="#d1fae5", corner_radius=6)
        green_frame.pack(side="left", padx=4)
        
        green_content = ctk.CTkFrame(green_frame, fg_color="transparent")
        green_content.pack(padx=8, pady=6)
        
        ctk.CTkLabel(
            green_content,
            text="üü¢ Xanh",
            font=("Segoe UI", 10, "bold"),
            text_color="#065f46"
        ).pack(side="left", padx=(0, 6))
        
        self.green_entry = ctk.CTkEntry(
            green_content,
            width=50,
            height=28,
            font=("Segoe UI", 11, "bold"),
            fg_color="#ffffff",
            border_color="#10b981",
            border_width=2,
            text_color="#065f46"
        )
        self.green_entry.pack(side="left", padx=(0, 4))
        self.green_entry.insert(0, "30")
        
        ctk.CTkLabel(
            green_content,
            text="s",
            font=("Segoe UI", 10),
            text_color="#475569"
        ).pack(side="left")
        
        # Yellow light input
        yellow_frame = ctk.CTkFrame(timing_container, fg_color="#fef3c7", corner_radius=6)
        yellow_frame.pack(side="left", padx=4)
        
        yellow_content = ctk.CTkFrame(yellow_frame, fg_color="transparent")
        yellow_content.pack(padx=8, pady=6)
        
        ctk.CTkLabel(
            yellow_content,
            text="üü° V√†ng",
            font=("Segoe UI", 10, "bold"),
            text_color="#78350f"
        ).pack(side="left", padx=(0, 6))
        
        self.yellow_entry = ctk.CTkEntry(
            yellow_content,
            width=50,
            height=28,
            font=("Segoe UI", 11, "bold"),
            fg_color="#ffffff",
            border_color="#f59e0b",
            border_width=2,
            text_color="#78350f"
        )
        self.yellow_entry.pack(side="left", padx=(0, 4))
        self.yellow_entry.insert(0, "3")
        
        ctk.CTkLabel(
            yellow_content,
            text="s",
            font=("Segoe UI", 10),
            text_color="#475569"
        ).pack(side="left")
        
        # Red light input
        red_frame = ctk.CTkFrame(timing_container, fg_color="#fecaca", corner_radius=6)
        red_frame.pack(side="left", padx=4)
        
        red_content = ctk.CTkFrame(red_frame, fg_color="transparent")
        red_content.pack(padx=8, pady=6)
        
        ctk.CTkLabel(
            red_content,
            text="üî¥ ƒê·ªè To√†n Ph·∫ßn",
            font=("Segoe UI", 10, "bold"),
            text_color="#991b1b"
        ).pack(side="left", padx=(0, 6))
        
        self.red_entry = ctk.CTkEntry(
            red_content,
            width=50,
            height=28,
            font=("Segoe UI", 11, "bold"),
            fg_color="#ffffff",
            border_color="#ef4444",
            border_width=2,
            text_color="#991b1b"
        )
        self.red_entry.pack(side="left", padx=(0, 4))
        self.red_entry.insert(0, "3")
        
        ctk.CTkLabel(
            red_content,
            text="s",
            font=("Segoe UI", 10),
            text_color="#475569"
        ).pack(side="left")
        
        # Apply button
        apply_btn = ctk.CTkButton(
            timing_container,
            text="‚úì √Åp d·ª•ng",
            fg_color="#3b82f6",
            hover_color="#2563eb",
            font=("Segoe UI", 10, "bold"),
            width=80,
            height=32,
            corner_radius=6,
            command=self.apply_timing
        )
        apply_btn.pack(side="left", padx=(8, 0))

        # ---------- MAIN CONTENT ----------
        self.main_container = ctk.CTkFrame(self.scrollable_frame, corner_radius=0, fg_color="#f8fafc")
        self.main_container.pack(fill="both", expand=True, padx=8, pady=(6, 6))
        
        # Create content frame
        self.content_frame = ctk.CTkFrame(self.main_container, fg_color="transparent")
        self.content_frame.pack(fill="both", expand=True)
        
        self.content_frame.grid_rowconfigure(0, weight=0)  # KPI - fixed size
        self.content_frame.grid_rowconfigure(1, weight=0)  # Intersections - fixed size
        self.content_frame.grid_rowconfigure(2, weight=0, minsize=200)  # Log - minimum height
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # ---------- TOP: GLOBAL KPI ----------
        kpi_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        kpi_container.grid(row=0, column=0, sticky="ew", pady=(0, 6))
        self.create_global_kpi_section(kpi_container)
        
        # ---------- MIDDLE: 2 INTERSECTIONS ----------
        intersections_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        intersections_container.grid(row=1, column=0, sticky="ew", pady=(0, 6))
        intersections_container.grid_columnconfigure(0, weight=1)
        intersections_container.grid_columnconfigure(1, weight=1)
        
        # Intersection 1
        self.create_intersection_section(intersections_container, "Ng√£ t∆∞ 1", 0, "#3b82f6")
        
        # Intersection 2
        self.create_intersection_section(intersections_container, "Ng√£ t∆∞ 2", 1, "#8b5cf6")
        
        # ---------- BOTTOM: LOG ----------
        log_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        log_container.grid(row=2, column=0, sticky="nsew")
        log_container.grid_rowconfigure(0, weight=1)
        log_container.grid_columnconfigure(0, weight=1)
        self.create_log_section(log_container)

    # =======================================================

    def create_global_kpi_section(self, parent):
        """Create global KPI cards for entire system"""
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.pack(fill="x", padx=0, pady=0)
        
        # Header
        header_frame = ctk.CTkFrame(section, fg_color="transparent", height=35)
        header_frame.pack(fill="x", padx=10, pady=(8, 6))
        header_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            header_frame,
            text="üìä KPI T·ªïng H·ª£p",
            font=("Segoe UI", 12, "bold"),
            text_color="#0f172a",
            anchor="w"
        ).pack(side="left")
        
        kpi_grid = ctk.CTkFrame(section, fg_color="transparent")
        kpi_grid.pack(fill="x", padx=8, pady=(0, 8))
        
        self.global_kpi_cards = {}
        
        kpi_data = [
            ("T·ªïng xe", "‚Äî", "xe", "#dbeafe", "#1e3a8a", "üöó"),
            ("ƒê·ªô tr·ªÖ TB", "‚Äî", "s", "#fef3c7", "#78350f", "‚è±"),
            ("L∆∞u l∆∞·ª£ng", "‚Äî", "xe/h", "#d1fae5", "#065f46", "üìà"),
            ("Chu k·ª≥ TB", "‚Äî", "s", "#e0e7ff", "#3730a3", "üí°"),
            ("C√¥ng b·∫±ng", "‚Äî", "", "#fce7f3", "#831843", "‚öñ"),
            ("Ph·ªëi h·ª£p", "‚Äî", "%", "#ccfbf1", "#134e4a", "üîó"),
        ]
        
        for idx, (name, value, unit, bg_color, text_color, icon) in enumerate(kpi_data):
            row = idx // 3
            col = idx % 3
            
            card = ctk.CTkFrame(
                kpi_grid,
                fg_color=bg_color,
                corner_radius=6,
                width=110,
                height=65
            )
            card.grid(row=row, column=col, padx=3, pady=3, sticky="ew")
            card.grid_propagate(False)
            
            # Icon
            ctk.CTkLabel(
                card,
                text=icon,
                font=("Segoe UI", 14),
                text_color=text_color
            ).pack(side="left", padx=(6, 4), pady=4)
            
            # Content
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(side="left", fill="both", expand=True, pady=4, padx=(0, 4))
            
            ctk.CTkLabel(
                content,
                text=name,
                font=("Segoe UI", 8, "bold"),
                text_color="#0f172a",
                anchor="w"
            ).pack(anchor="w")
            
            value_frame = ctk.CTkFrame(content, fg_color="transparent")
            value_frame.pack(anchor="w", fill="x")
            
            val_label = ctk.CTkLabel(
                value_frame,
                text=value,
                font=("Segoe UI", 15, "bold"),
                text_color=text_color,
                anchor="w"
            )
            val_label.pack(side="left")
            
            if unit:
                ctk.CTkLabel(
                    value_frame,
                    text=f" {unit}",
                    font=("Segoe UI", 8),
                    text_color="#475569",
                    anchor="w"
                ).pack(side="left", pady=(4, 0))
            
            self.global_kpi_cards[name] = val_label
        
        # Configure grid columns to expand evenly
        for i in range(3):
            kpi_grid.grid_columnconfigure(i, weight=1)

    # =======================================================

    def create_intersection_section(self, parent, name, column, accent_color):
        """Create detailed intersection panel"""
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.grid(row=0, column=column, sticky="nsew", padx=3)
        
        # Header with colored accent
        header_frame = ctk.CTkFrame(section, fg_color=accent_color, corner_radius=8, height=42)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        header_content = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_content.pack(expand=True)
        
        ctk.CTkLabel(
            header_content,
            text=name,
            font=("Segoe UI", 14, "bold"),
            text_color="#ffffff"
        ).pack()
        
        
        # Stats row
        stats_frame = ctk.CTkFrame(section, fg_color="transparent")
        stats_frame.pack(fill="x", padx=8, pady=(8, 6))
        stats_frame.grid_columnconfigure(0, weight=1)
        stats_frame.grid_columnconfigure(1, weight=1)
        
        # Queue length
        queue_card = ctk.CTkFrame(stats_frame, fg_color="#fef3c7", corner_radius=6, height=65)
        queue_card.grid(row=0, column=0, padx=3, sticky="ew")
        queue_card.pack_propagate(False)
        
        queue_content = ctk.CTkFrame(queue_card, fg_color="transparent")
        queue_content.pack(expand=True)
        
        ctk.CTkLabel(
            queue_content,
            text="H√†ng ch·ªù",
            font=("Segoe UI", 10, "bold"),
            text_color="#0f172a"
        ).pack()
        
        queue_value_frame = ctk.CTkFrame(queue_content, fg_color="transparent")
        queue_value_frame.pack()
        
        queue_label = ctk.CTkLabel(
            queue_value_frame,
            text="0",
            font=("Segoe UI", 20, "bold"),
            text_color="#78350f"
        )
        queue_label.pack(side="left")
        
        ctk.CTkLabel(
            queue_value_frame,
            text=" xe",
            font=("Segoe UI", 11),
            text_color="#475569"
        ).pack(side="left", pady=(6, 0))
        
        if not hasattr(self, 'intersection_widgets'):
            self.intersection_widgets = {}
        if name not in self.intersection_widgets:
            self.intersection_widgets[name] = {}
        
        self.intersection_widgets[name]["queue"] = queue_label
        
        # Wait time
        wait_card = ctk.CTkFrame(stats_frame, fg_color="#fecaca", corner_radius=6, height=65)
        wait_card.grid(row=0, column=1, padx=3, sticky="ew")
        wait_card.pack_propagate(False)
        
        wait_content = ctk.CTkFrame(wait_card, fg_color="transparent")
        wait_content.pack(expand=True)
        
        ctk.CTkLabel(
            wait_content,
            text="Ch·ªù TB",
            font=("Segoe UI", 10, "bold"),
            text_color="#0f172a"
        ).pack()
        
        wait_value_frame = ctk.CTkFrame(wait_content, fg_color="transparent")
        wait_value_frame.pack()
        
        wait_label = ctk.CTkLabel(
            wait_value_frame,
            text="0",
            font=("Segoe UI", 20, "bold"),
            text_color="#991b1b"
        )
        wait_label.pack(side="left")
        
        ctk.CTkLabel(
            wait_value_frame,
            text=" gi√¢y",
            font=("Segoe UI", 11),
            text_color="#475569"
        ).pack(side="left", pady=(6, 0))
        
        self.intersection_widgets[name]["wait"] = wait_label

        # Vehicle counts by direction
        vehicles_frame = ctk.CTkFrame(section, fg_color="#f8fafc", corner_radius=6)
        vehicles_frame.pack(fill="x", padx=8, pady=(0, 8))
        
        ctk.CTkLabel(
            vehicles_frame,
            text="S·ªë xe theo h∆∞·ªõng",
            font=("Segoe UI", 10, "bold"),
            text_color="#475569"
        ).pack(pady=(6, 3))
        
        # Direction grid
        dir_grid = ctk.CTkFrame(vehicles_frame, fg_color="transparent")
        dir_grid.pack(padx=6, pady=(0, 6))
        dir_grid.grid_columnconfigure(0, weight=1)
        dir_grid.grid_columnconfigure(1, weight=1)
        
        directions = [
            ("‚¨Ü B·∫Øc", "#e9d5ff", "#6b21a8", 0, 0),
            ("‚¨á Nam", "#fed7aa", "#9a3412", 0, 1),
            ("‚û° ƒê√¥ng", "#bbf7d0", "#14532d", 1, 0),
            ("‚¨Ö T√¢y", "#fce7f3", "#831843", 1, 1),
        ]
        
        self.intersection_widgets[name]["directions"] = {}
        
        for dir_name, bg_color, text_color, row, col in directions:
            card = ctk.CTkFrame(dir_grid, fg_color=bg_color, corner_radius=5, height=52)
            card.grid(row=row, column=col, padx=3, pady=3, sticky="ew")
            card.pack_propagate(False)
            
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(expand=True)
            
            ctk.CTkLabel(
                content,
                text=dir_name,
                font=("Segoe UI", 9, "bold"),
                text_color="#0f172a"
            ).pack()
            
            val_label = ctk.CTkLabel(
                content,
                text="0",
                font=("Segoe UI", 17, "bold"),
                text_color=text_color
            )
            val_label.pack()
            
            # Extract direction name without arrow
            dir_key = dir_name.split()[1]
            self.intersection_widgets[name]["directions"][dir_key] = val_label

    # =======================================================

    def create_log_section(self, parent):
        """Create log section"""
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.grid(row=0, column=0, sticky="nsew")
        section.grid_rowconfigure(0, weight=1)
        section.grid_columnconfigure(0, weight=1)
        
        # Header
        header_frame = ctk.CTkFrame(section, fg_color="transparent", height=35)
        header_frame.pack(fill="x", padx=10, pady=(8, 6))
        header_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            header_frame,
            text="üìã Log H·ªá Th·ªëng",
            font=("Segoe UI", 12, "bold"),
            text_color="#0f172a",
            anchor="w"
        ).pack(side="left")
        
        log_frame = ctk.CTkFrame(section, fg_color="transparent")
        log_frame.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        
        self.log_box = tk.Text(
            log_frame,
            bg="#f8fafc",
            fg="#1e293b",
            wrap="word",
            relief="flat",
            font=("Consolas", 9),
            padx=8,
            pady=8,
            borderwidth=0,
            highlightthickness=0,
            height=8
        )
        self.log_box.pack(fill="both", expand=True)
        
        self.log("üö¶ H·ªá th·ªëng 2 ng√£ t∆∞ s·∫µn s√†ng")

    # =======================================================

    def change_mode(self, value):
        self.mode = value
        self.log(f"‚úì Ch·∫ø ƒë·ªô: {value}")

    def start_sim(self):
        if self.running:
            return
        
        self.running = True
        self.paused = False  # B·ªè pause khi start
        self.status_label.configure(text="üü¢ Ch·∫°y", text_color="#10b981")
        
        # Ki·ªÉm tra xem SUMO ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông ch∆∞a
        sumo_is_running = False
        try:
            import traci
            # Th·ª≠ l·∫•y th√¥ng tin t·ª´ SUMO ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
            traci.simulation.getTime()
            sumo_is_running = True
            self.log("‚ñ∂ Ti·∫øp t·ª•c m√¥ ph·ªèng t·ª´ n∆°i ƒë√£ d·ª´ng")
        except (traci.exceptions.FatalTraCIError, traci.exceptions.TraCIException):
            # SUMO ch∆∞a kh·ªüi ƒë·ªông ho·∫∑c ƒë√£ b·ªã ƒë√≥ng
            sumo_is_running = False
        except:
            # L·ªói kh√°c (c√≥ th·ªÉ ch∆∞a import traci)
            sumo_is_running = False
        
        if sumo_is_running:
            # SUMO ƒëang ch·∫°y, ch·ªâ c·∫ßn ti·∫øp t·ª•c (thread v·∫´n ƒëang ch·∫°y v√† ƒëang ch·ªù)
            pass  # Thread v·∫´n ƒëang ch·∫°y, ch·ªâ c·∫ßn set running = True
        else:
            # Kh·ªüi ƒë·ªông SUMO m·ªõi
            config_path = os.path.join(os.path.dirname(__file__), '..', '..', 'data', 'sumo', 'test2.sumocfg')
            if khoi_dong_sumo(config_path, gui=True):
                threading.Thread(target=self.simulate_with_sumo, daemon=True).start()
                self.log("‚ñ∂ B·∫Øt ƒë·∫ßu m√¥ ph·ªèng SUMO v·ªõi GUI")
            else:
                self.log("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông SUMO. Ki·ªÉm tra file c·∫•u h√¨nh ho·∫∑c SUMO ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a")
                self.running = False
                self.status_label.configure(text="‚ö´ L·ªói", text_color="#ef4444")

    def pause_sim(self):
        if not self.running:
            return
        self.running = False
        self.paused = True  # ƒê√°nh d·∫•u ƒëang pause
        self.status_label.configure(text="üü° T·∫°m d·ª´ng", text_color="#f59e0b")
        # KH√îNG ƒë√≥ng SUMO khi pause, thread v·∫´n ch·∫°y nh∆∞ng s·∫Ω "ng·ªß"
        self.log("‚è∏ T·∫°m d·ª´ng m√¥ ph·ªèng (nh·∫•n Start ƒë·ªÉ ti·∫øp t·ª•c)")

    def stop_sim(self):
        self.running = False
        self.paused = False  # Kh√¥ng c√≤n pause n·ªØa
        self.status_label.configure(text="‚ö´ D·ª´ng", text_color="#64748b")
        # ƒê√≥ng SUMO ho√†n to√†n
        try:
            dung_sumo()
            self.log("‚èπ ƒê√£ d·ª´ng v√† ƒë√≥ng SUMO")
        except:
            self.log("‚èπ ƒê√£ d·ª´ng m√¥ ph·ªèng")

    def export_log(self):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"traffic_2nt_log_{timestamp}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(self.log_box.get("1.0", "end"))
        self.log(f"‚úì Xu·∫•t: {filename}")

    def simulate_with_sumo(self):
        """Simulate with real SUMO data"""
        import traci
        
        try:
            sumo_ended = False
            while not sumo_ended:
                # Ki·ªÉm tra n·∫øu ƒëang pause th√¨ ch·ªù
                while self.paused and not sumo_ended:
                    time.sleep(0.1)  # Ng·ªß khi pause
                    # Ki·ªÉm tra xem c√≥ l·ªánh stop kh√¥ng
                    if not self.running and not self.paused:
                        sumo_ended = True
                        break
                
                # N·∫øu kh√¥ng ch·∫°y v√† kh√¥ng pause th√¨ d·ª´ng
                if not self.running and not self.paused:
                    break
                
                # Ch·ªâ ch·∫°y step khi ƒëang running
                if self.running:
                    # Ch·∫°y m·ªôt b∆∞·ªõc m√¥ ph·ªèng SUMO
                    traci.simulationStep()
                    
                    # L·∫•y th·ªùi gian hi·ªán t·∫°i
                    current_time = traci.simulation.getTime()
                    
                    # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ SUMO
                    self.update_data_from_sumo()
                    
                    # C·∫≠p nh·∫≠t UI
                    self.update_ui()
                    
                    time.sleep(0.1)  # C·∫≠p nh·∫≠t m·ªói 0.1 gi√¢y
                
        except Exception as e:
            self.log(f"‚ùå L·ªói trong m√¥ ph·ªèng SUMO: {str(e)}")
            self.running = False
            self.paused = False
            self.status_label.configure(text="‚ö´ L·ªói", text_color="#ef4444")
        finally:
            # Ch·ªâ ƒë√≥ng SUMO khi th·ª±c s·ª± stop (kh√¥ng ph·∫£i pause)
            if not self.paused:
                try:
                    dung_sumo()
                except:
                    pass

    # =======================================================

    def reset_all(self):
        """Reset all interface elements and restart SUMO"""
        # Ch·∫°y reset tr√™n thread ri√™ng ƒë·ªÉ kh√¥ng block UI
        threading.Thread(target=self._do_reset, daemon=True).start()
    
    def _do_reset(self):
        """Th·ª±c hi·ªán reset (ch·∫°y tr√™n thread ri√™ng)"""
        # L∆∞u tr·∫°ng th√°i ƒëang ch·∫°y
        was_running = self.running
        
        # D·ª´ng m√¥ ph·ªèng
        self.running = False
        self.paused = False
        time.sleep(0.5)  # ƒê·ª£i thread d·ª´ng
        
        # ƒê√≥ng SUMO c≈©
        try:
            dung_sumo()
        except:
            pass
        
        # ƒê·ª£i SUMO ƒë√≥ng ho√†n to√†n
        time.sleep(0.5)
        
        # Reset c√°c bi·∫øn d·ªØ li·ªáu n·ªôi b·ªô v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh (tr√™n UI thread)
        self.after(0, self._reset_ui_and_data, was_running)
    
    def _reset_ui_and_data(self, was_running):
        """Reset UI v√† d·ªØ li·ªáu (ch·∫°y tr√™n main thread)"""
        # Reset c√°c bi·∫øn d·ªØ li·ªáu n·ªôi b·ªô v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
        self.green_time = 30
        self.yellow_time = 3
        self.red_time = 30
        self.mode = "M·∫∑c ƒë·ªãnh"
        
        # Reset global KPI data
        self.global_kpi_data = {
            "T·ªïng xe": 0,
            "ƒê·ªô tr·ªÖ TB": 0.0,
            "L∆∞u l∆∞·ª£ng": 0,
            "Chu k·ª≥ TB": 0,
            "C√¥ng b·∫±ng": 0.0,
            "Ph·ªëi h·ª£p": 0
        }
        
        # Reset intersection data v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
        self.intersection_data = {
            "Ng√£ t∆∞ 1": {
                "light_state": "ƒê·ªè",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            },
            "Ng√£ t∆∞ 2": {
                "light_state": "Xanh",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            }
        }
        
        # Reset UI
        self.status_label.configure(text="‚ö´ D·ª´ng", text_color="#64748b")
        self.case_box.set("M·∫∑c ƒë·ªãnh")
        self.mode_option.set("M·∫∑c ƒë·ªãnh")
        
        # Reset c√°c √¥ nh·∫≠p th·ªùi gian v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
        self.green_entry.delete(0, 'end')
        self.green_entry.insert(0, "30")
        self.yellow_entry.delete(0, 'end')
        self.yellow_entry.insert(0, "3")
        self.red_entry.delete(0, 'end')
        self.red_entry.insert(0, "30")
        
        # Reset global KPI
        for name, label in self.global_kpi_cards.items():
            label.configure(text="‚Äî")
        
        # Reset intersections
        for int_name, widgets in self.intersection_widgets.items():
            widgets["queue"].configure(text="0")
            widgets["wait"].configure(text="0")
            for direction, label in widgets["directions"].items():
                label.configure(text="0")
        
        # GI·ªÆ log (kh√¥ng x√≥a), ch·ªâ th√™m th√¥ng b√°o reset
        self.log("üîÑ ƒê√£ ƒë·∫∑t l·∫°i to√†n b·ªô h·ªá th·ªëng v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh")
        self.log("üìä Th·ªùi gian ƒë√®n: Xanh 30s, V√†ng 3s, ƒê·ªè 30s")
        self.log("üö¶ H·ªá th·ªëng 2 ng√£ t∆∞ s·∫µn s√†ng")
        
        # Kh·ªüi ƒë·ªông l·∫°i SUMO n·∫øu ƒëang ch·∫°y tr∆∞·ªõc ƒë√≥ (sau 1 gi√¢y)
        if was_running:
            self.after(1000, self.start_sim)  # Kh·ªüi ƒë·ªông sau 1 gi√¢y ƒë·ªÉ SUMO ƒë√≥ng ho√†n to√†n

    # =======================================================

    def log(self, msg):
        """Add log message with timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_box.insert("end", f"[{timestamp}] {msg}\n")
        self.log_box.see("end")

    def apply_timing(self):
        """Apply traffic light timing settings"""
        try:
            green = int(self.green_entry.get())
            yellow = int(self.yellow_entry.get())
            red = int(self.red_entry.get())
            
            if green <= 0 or yellow <= 0 or red <= 0:
                self.log("‚ùå Th·ªùi gian ph·∫£i l·ªõn h∆°n 0")
                return
            
            if green > 120 or yellow > 10 or red > 3:
                self.log("‚ùå Th·ªùi gian qu√° l·ªõn (Xanh ‚â§120s, V√†ng ‚â§10s, ƒê·ªè To√†n Ph·∫ßn ‚â§3s)")
                return
            
            self.green_time = green
            self.yellow_time = yellow
            self.red_time = red
            
            self.log(f"‚úì ƒê√£ c√†i ƒë·∫∑t: Xanh {green}s, V√†ng {yellow}s, ƒê·ªè To√†n Ph·∫ßn {red}s")
            
        except ValueError:
            self.log("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")


    def update_data_from_sumo(self):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ SUMO"""
        import traci
        
        try:
            # L·∫•y danh s√°ch traffic lights
            tls_ids = traci.trafficlight.getIDList()
            
            # C·∫≠p nh·∫≠t d·ªØ li·ªáu cho t·ª´ng ng√£ t∆∞
            for i, tls_id in enumerate(tls_ids[:2]):  # Ch·ªâ l·∫•y 2 ng√£ t∆∞ ƒë·∫ßu
                int_name = f"Ng√£ t∆∞ {i+1}"
                if int_name not in self.intersection_data:
                    continue
                    
                # L·∫•y th√¥ng tin ƒë√®n giao th√¥ng
                current_phase = traci.trafficlight.getPhase(tls_id)
                phase_duration = traci.trafficlight.getPhaseDuration(tls_id)
                
                # Map phase sang tr·∫°ng th√°i ƒë√®n (gi·∫£ s·ª≠ phase 0 = xanh B·∫Øc-Nam, phase 1 = xanh ƒê√¥ng-T√¢y)
                if current_phase == 0:
                    light_state = "Xanh"
                elif current_phase == 1:
                    light_state = "ƒê·ªè"
                else:
                    light_state = "V√†ng"
                
                self.intersection_data[int_name]["light_state"] = light_state
                
                # L·∫•y s·ªë l∆∞·ª£ng xe tr√™n c√°c l√†n ƒë∆∞·ªùng (gi·∫£ s·ª≠ c√≥ edges t∆∞∆°ng ·ª©ng)
                # ƒê√¢y l√† mapping gi·∫£ l·∫≠p - c·∫ßn ƒëi·ªÅu ch·ªânh theo network th·ª±c
                try:
                    # Edges cho h∆∞·ªõng B·∫Øc, Nam, ƒê√¥ng, T√¢y
                    edges = {
                        "B·∫Øc": f"-E{i*4}",  # ƒêi·ªÅu ch·ªânh theo network th·ª±c
                        "Nam": f"E{i*4}", 
                        "ƒê√¥ng": f"-E{i*4+1}",
                        "T√¢y": f"E{i*4+1}"
                    }
                    
                    total_vehicles = 0
                    for direction, edge_id in edges.items():
                        try:
                            vehicle_count = traci.edge.getLastStepVehicleNumber(edge_id)
                            self.intersection_data[int_name]["vehicles"][direction] = vehicle_count
                            total_vehicles += vehicle_count
                        except:
                            self.intersection_data[int_name]["vehicles"][direction] = 0
                    
                    # T√≠nh queue v√† wait time (gi·∫£ l·∫≠p)
                    self.intersection_data[int_name]["queue"] = max(0, total_vehicles - 20)
                    self.intersection_data[int_name]["wait_time"] = min(120, total_vehicles * 2)
                    
                except Exception as e:
                    # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu edges, d√πng d·ªØ li·ªáu gi·∫£ l·∫≠p
                    for direction in ["B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y"]:
                        self.intersection_data[int_name]["vehicles"][direction] = random.randint(5, 25)
                    self.intersection_data[int_name]["queue"] = random.randint(0, 15)
                    self.intersection_data[int_name]["wait_time"] = random.randint(10, 60)
            
            # C·∫≠p nh·∫≠t KPIs to√†n c·ª•c
            total_vehicles = sum(sum(data["vehicles"].values()) for data in self.intersection_data.values())
            avg_delay = sum(data["wait_time"] for data in self.intersection_data.values()) / len(self.intersection_data)
            throughput = total_vehicles * 10  # Gi·∫£ l·∫≠p throughput
            avg_cycle = 60  # Gi·∫£ l·∫≠p chu k·ª≥
            fairness = 0.85  # Gi·∫£ l·∫≠p c√¥ng b·∫±ng
            coordination = 80  # Gi·∫£ l·∫≠p ph·ªëi h·ª£p
            
            self.global_kpi_data = {
                "T·ªïng xe": total_vehicles,
                "ƒê·ªô tr·ªÖ TB": round(avg_delay, 1),
                "L∆∞u l∆∞·ª£ng": throughput,
                "Chu k·ª≥ TB": avg_cycle,
                "C√¥ng b·∫±ng": fairness,
                "Ph·ªëi h·ª£p": coordination
            }
            
        except Exception as e:
            self.log(f"‚ö† C·∫≠p nh·∫≠t d·ªØ li·ªáu SUMO th·∫•t b·∫°i: {str(e)}")

    def update_ui(self):
        """C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng"""
        try:
            # C·∫≠p nh·∫≠t KPIs to√†n c·ª•c
            for key, value in self.global_kpi_data.items():
                if key in self.global_kpi_cards:
                    self.global_kpi_cards[key].configure(text=str(value))
            
            # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ng ng√£ t∆∞
            for int_name, data in self.intersection_data.items():
                if int_name in self.intersection_widgets:
                    widgets = self.intersection_widgets[int_name]
                    
                    # C·∫≠p nh·∫≠t queue v√† wait time
                    widgets["queue"].configure(text=str(data["queue"]))
                    widgets["wait"].configure(text=str(data["wait_time"]))
                    
                    # C·∫≠p nh·∫≠t s·ªë xe theo h∆∞·ªõng
                    for direction, count in data["vehicles"].items():
                        if direction in widgets["directions"]:
                            widgets["directions"][direction].configure(text=str(count))
            
            # Log ng·∫´u nhi√™n
            events = [
                "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n giao th√¥ng",
                "Ph√°t hi·ªán thay ƒë·ªïi l∆∞u l∆∞·ª£ng",
                "ƒêi·ªÅu ch·ªânh chu k·ª≥ ƒë√®n",
                "H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh",
            ]
            if random.random() < 0.1:  # Gi·∫£m t·∫ßn su·∫•t log
                self.log(random.choice(events))
                
        except Exception as e:
            self.log(f"‚ö† C·∫≠p nh·∫≠t UI th·∫•t b·∫°i: {str(e)}")


if __name__ == "__main__":
    app = SmartTrafficApp()
    app.mainloop()
