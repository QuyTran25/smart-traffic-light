import customtkinter as ctk
import tkinter as tk
from datetime import datetime
import threading
import time
import os
import sys
import random

# ==================== PATH SETUP ====================
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

SRC_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if SRC_ROOT not in sys.path:
    sys.path.insert(0, SRC_ROOT)

# SUMO connector functions you must have in simulation/sumo_connector.py
from simulation.sumo_connector import khoi_dong_sumo, dung_sumo, dieu_chinh_tat_ca_den
from simulation.vehicle_counter import VehicleCounter
from simulation.sensor_manager import SensorManager

try:
    from controllers.adaptive_controller import AdaptiveController
except Exception:
    AdaptiveController = None

try:
    from controllers.priority_controller import PriorityController
except Exception:
    PriorityController = None

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")


class SmartTrafficApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üö¶ H·ªÜ TH·ªêNG ƒêI·ªÄU KHI·ªÇN ƒê√àN GIAO TH√îNG TH√îNG MINH")
        self.geometry("700x850")
        self.minsize(680, 800)

        # runtime flags
        self.running = False
        self.paused = False
        self.resetting = False
        self.mode = "M·∫∑c ƒë·ªãnh"  # or "T·ª± ƒë·ªông"
        
        # scenario spawning
        self.scenario_spawning = False
        self.scenario_thread = None

        # default timings (used in M·∫∑c ƒë·ªãnh mode)
        self.green_time = 30
        self.yellow_time = 3
        self.red_time = 3  # all-red time

        # controllers dict for adaptive mode
        self.controllers = {}
        
        # Priority controllers cho t·ª´ng ng√£ t∆∞
        self.priority_controllers = {}  # {junction_id: PriorityController}
        
        # Vehicle Counter instance
        self.vehicle_counter = None
        
        # Sensor Manager instance
        self.sensor_manager = None
        
        # Priority vehicle spawning control
        self.spawning_active = False
        self.spawning_thread = None

        # KPI & intersection data
        self.global_kpi_data = {
            "T·ªïng xe": 0,
            "ƒê·ªô tr·ªÖ TB": 0.0,
            "L∆∞u l∆∞·ª£ng": 0,
            "Chu k·ª≥ TB": 0,
            "C√¥ng b·∫±ng": 0.0,
            "Ph·ªëi h·ª£p": 0
        }
        
        # Sensor data
        self.sensor_data = {
            "E1 Detectors": 0,
            "E2 Detectors": 0,
            "M·∫≠t ƒë·ªô TB": 0,
            "Queue TB": 0
        }

        self.intersection_data = {
            "Ng√£ t∆∞ 1": {
                "light_state": "ƒê·ªè",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            },
            "Ng√£ t∆∞ 2": {
                "light_state": "Xanh",
                "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
                "queue": 0,
                "wait_time": 0
            }
        }

        # Priority vehicle tracking
        self.priority_vehicle_data = {
            "J1": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0},
            "J4": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0}
        }
        self.has_priority_vehicles = False

        # Build UI
        self.create_layout()

    # ====================== UI Layout ======================
    def create_layout(self):
        self.configure(fg_color="#f8fafc")
        self.scrollable_frame = ctk.CTkScrollableFrame(
            self,
            fg_color="#f8fafc",
            corner_radius=0,
            scrollbar_button_color="#cbd5e1",
            scrollbar_button_hover_color="#94a3b8"
        )
        self.scrollable_frame.pack(fill="both", expand=True, padx=0, pady=0)

        # Header
        header = ctk.CTkFrame(self.scrollable_frame, corner_radius=0, fg_color="#ffffff", height=65)
        header.pack(fill="x", padx=0, pady=0)
        header.pack_propagate(False)

        header_left = ctk.CTkFrame(header, fg_color="transparent")
        header_left.pack(side="left", padx=15, pady=10)

        ctk.CTkLabel(header_left, text="üö¶", font=("Segoe UI", 20)).pack(side="left", padx=(0, 8))

        title_frame = ctk.CTkFrame(header_left, fg_color="transparent")
        title_frame.pack(side="left")

        ctk.CTkLabel(title_frame, text="H·ªÜ TH·ªêNG ƒêI·ªÄU KHI·ªÇN ƒê√àN T√çN HI·ªÜU GIAO TH√îNG TH√îNG MINH",
                     font=("Segoe UI", 16, "bold"), text_color="#0f172a", anchor="w").pack(anchor="w")
        ctk.CTkLabel(title_frame, text="Demo SUMO", font=("Segoe UI", 11),
                     text_color="#64748b", anchor="w").pack(anchor="w", pady=(2, 0))

        status_frame = ctk.CTkFrame(header, fg_color="transparent")
        status_frame.pack(side="right", padx=15)
        self.status_label = ctk.CTkLabel(status_frame, text="‚ö´ D·ª´ng", font=("Segoe UI", 11, "bold"),
                                         text_color="#64748b")
        self.status_label.pack()
        self.mode_status_label = ctk.CTkLabel(status_frame, text="Ch·∫ø ƒë·ªô: M·∫∑c ƒë·ªãnh", font=("Segoe UI", 10),
                                              text_color="#64748b")
        self.mode_status_label.pack()
        
        # Priority status label (hi·ªÉn th·ªã khi c√≥ xe ∆∞u ti√™n)
        self.priority_status_label = ctk.CTkLabel(status_frame, text="", font=("Segoe UI", 10, "bold"),
                                                  text_color="#ef4444")
        self.priority_status_label.pack()

        # Control bar
        self.control_bar_main = ctk.CTkFrame(self.scrollable_frame, fg_color="#ffffff", corner_radius=0)
        self.control_bar_main.pack(fill="x", padx=0, pady=(1, 0))

        # ---------- First row (mode + action buttons) ----------
        control_bar_top = ctk.CTkFrame(self.control_bar_main, fg_color="transparent", height=45)
        control_bar_top.pack(fill="x", padx=10, pady=(8, 0))
        control_bar_top.pack_propagate(False)

        left_controls = ctk.CTkFrame(control_bar_top, fg_color="transparent")
        left_controls.pack(side="left")

        # Mode segmented button
        self.mode_option = ctk.StringVar(value="M·∫∑c ƒë·ªãnh")
        mode_segment = ctk.CTkSegmentedButton(
            left_controls,
            values=["M·∫∑c ƒë·ªãnh", "T·ª± ƒë·ªông"],
            variable=self.mode_option,
            font=("Segoe UI", 11, "bold"),
            command=self.change_mode,
            fg_color="#cbd5e1",
            selected_color="#0ea5e9",
            selected_hover_color="#0284c7",
            unselected_color="#cbd5e1",
            unselected_hover_color="#94a3b8",
            text_color="#1e293b",
            width=110,
            height=36
        )
        mode_segment.pack(side="left", padx=(0, 10))

        # Action buttons
        btn_frame = ctk.CTkFrame(left_controls, fg_color="transparent")
        btn_frame.pack(side="left")

        self.play_btn = ctk.CTkButton(btn_frame, text="‚ñ∂ CH·∫†Y", fg_color="#10b981", hover_color="#059669",
                                      font=("Segoe UI", 11, "bold"), width=42, height=36,
                                      corner_radius=5, command=self.start_sim)
        self.play_btn.pack(side="left", padx=2)

        self.pause_btn = ctk.CTkButton(btn_frame, text="‚è∏ T·∫†M D·ª™NG", fg_color="#f59e0b", hover_color="#d97706",
                                       text_color="#000000", font=("Segoe UI", 11, "bold"), width=42,
                                       height=36, corner_radius=5, command=self.pause_sim)
        self.pause_btn.pack(side="left", padx=2)

        self.stop_btn = ctk.CTkButton(btn_frame, text="‚èπ D·ª™NG", fg_color="#ef4444", hover_color="#dc2626",
                                      font=("Segoe UI", 11, "bold"), width=42, height=36,
                                      corner_radius=5, command=self.stop_sim)
        self.stop_btn.pack(side="left", padx=2)

        reset_btn = ctk.CTkButton(btn_frame, text="üîÑ L√ÄM L·∫†I", fg_color="#64748b", hover_color="#475569",
                                  font=("Segoe UI", 11, "bold"), width=42, height=36,
                                  corner_radius=5, command=self.reset_all)
        reset_btn.pack(side="left", padx=2)

        export_btn = ctk.CTkButton(btn_frame, text="‚¨á XU·∫§T FILE LOG", fg_color="#3b82f6", hover_color="#2563eb",
                                   font=("Segoe UI", 11, "bold"), width=42, height=36,
                                   corner_radius=5, command=self.export_log)
        export_btn.pack(side="left", padx=2)

        # ---------- Second row (scenario selector) ----------
        self.control_bar_bottom = ctk.CTkFrame(self.control_bar_main, fg_color="transparent", height=42)
        self.control_bar_bottom.pack(fill="x", padx=10, pady=(6, 8))
        self.control_bar_bottom.pack_propagate(False)

        scenario_frame = ctk.CTkFrame(self.control_bar_bottom, fg_color="transparent")
        scenario_frame.pack(side="left")

        ctk.CTkLabel(
            scenario_frame,
            text="K·ªãch b·∫£n:",
            font=("Segoe UI", 11, "bold"),
            text_color="#334155"
        ).pack(side="left", padx=(0, 8))

        self.case_box = ctk.CTkOptionMenu(
            scenario_frame,
            values=[
                "M·∫∑c ƒë·ªãnh",
                "SC1 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng ch√≠nh trong gi·ªù cao ƒëi·ªÉm",
                "SC2 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng nh√°nh (√≠t xe) s·∫Øp t·ªõi g·∫ßn",
                "SC3 - Nhi·ªÅu xe ∆∞u ti√™n t·ª´ 2 h∆∞·ªõng ƒë·ªëi di·ªán",
                "SC4 - B√°o gi·∫£",
                "SC5 - Xe ∆∞u ti√™n b·ªã k·∫πt trong d√≤ng xe d√†i",
                "SC6 - Nhi·ªÅu xe ∆∞u ti√™n li√™n ti·∫øp"
            ],
            dropdown_font=("Segoe UI", 10),
            fg_color="#cbd5e1",
            button_color="#0ea5e9",
            button_hover_color="#0284c7",
            dropdown_fg_color="#ffffff",
            dropdown_hover_color="#e0f2fe",
            dropdown_text_color="#0f172a",
            text_color="#0f172a",
            width=220,
            height=34,
            corner_radius=5
        )
        self.case_box.pack(side="left")
        self.case_box.set("M·∫∑c ƒë·ªãnh")


        # Timing inputs (make as class attributes so change_mode can pack/forget them)
        self.timing_bar = ctk.CTkFrame(self.scrollable_frame, fg_color="#ffffff", corner_radius=0)
        self.timing_bar.pack(fill="x", padx=0, pady=(1, 0))

        timing_container = ctk.CTkFrame(self.timing_bar, fg_color="transparent", height=50)
        timing_container.pack(fill="x", padx=10, pady=8)
        timing_container.pack_propagate(False)

        ctk.CTkLabel(timing_container, text="‚è± Th·ªùi gian ƒë√®n:", font=("Segoe UI", 11, "bold"),
                     text_color="#334155").pack(side="left", padx=(0, 12))

        # Green
        green_frame = ctk.CTkFrame(timing_container, fg_color="#d1fae5", corner_radius=6)
        green_frame.pack(side="left", padx=4)
        green_content = ctk.CTkFrame(green_frame, fg_color="transparent")
        green_content.pack(padx=8, pady=6)
        ctk.CTkLabel(green_content, text="üü¢ Xanh", font=("Segoe UI", 10, "bold"), text_color="#065f46").pack(
            side="left", padx=(0, 6))
        self.green_entry = ctk.CTkEntry(green_content, width=50, height=28, font=("Segoe UI", 11, "bold"),
                                        fg_color="#ffffff", border_color="#10b981", border_width=2, text_color="#065f46")
        self.green_entry.pack(side="left", padx=(0, 4))
        self.green_entry.insert(0, str(self.green_time))
        ctk.CTkLabel(green_content, text="s", font=("Segoe UI", 10), text_color="#475569").pack(side="left")

        # Yellow
        yellow_frame = ctk.CTkFrame(timing_container, fg_color="#fef3c7", corner_radius=6)
        yellow_frame.pack(side="left", padx=4)
        yellow_content = ctk.CTkFrame(yellow_frame, fg_color="transparent")
        yellow_content.pack(padx=8, pady=6)
        ctk.CTkLabel(yellow_content, text="üü° V√†ng", font=("Segoe UI", 10, "bold"),
                     text_color="#78350f").pack(side="left", padx=(0, 6))
        self.yellow_entry = ctk.CTkEntry(yellow_content, width=50, height=28, font=("Segoe UI", 11, "bold"),
                                         fg_color="#ffffff", border_color="#f59e0b", border_width=2, text_color="#78350f")
        self.yellow_entry.pack(side="left", padx=(0, 4))
        self.yellow_entry.insert(0, str(self.yellow_time))
        ctk.CTkLabel(yellow_content, text="s", font=("Segoe UI", 10), text_color="#475569").pack(side="left")

        # Red (all-red)
        red_frame = ctk.CTkFrame(timing_container, fg_color="#fecaca", corner_radius=6)
        red_frame.pack(side="left", padx=4)
        red_content = ctk.CTkFrame(red_frame, fg_color="transparent")
        red_content.pack(padx=8, pady=6)
        ctk.CTkLabel(red_content, text="üî¥ ƒê·ªè To√†n Ph·∫ßn", font=("Segoe UI", 10, "bold"),
                     text_color="#991b1b").pack(side="left", padx=(0, 6))
        self.red_entry = ctk.CTkEntry(red_content, width=50, height=28, font=("Segoe UI", 11, "bold"),
                                      fg_color="#ffffff", border_color="#ef4444", border_width=2, text_color="#991b1b")
        self.red_entry.pack(side="left", padx=(0, 4))
        self.red_entry.insert(0, str(self.red_time))
        ctk.CTkLabel(red_content, text="s", font=("Segoe UI", 10), text_color="#475569").pack(side="left")

        apply_btn = ctk.CTkButton(timing_container, text="‚úì √Åp d·ª•ng", fg_color="#3b82f6", hover_color="#2563eb",
                                  font=("Segoe UI", 10, "bold"), width=80, height=32, corner_radius=6,
                                  command=self.apply_timing)
        apply_btn.pack(side="left", padx=(8, 0))

        # Main container and remainder of UI (KPIs, intersections, logs)
        self.main_container = ctk.CTkFrame(self.scrollable_frame, corner_radius=0, fg_color="#f8fafc")
        self.main_container.pack(fill="both", expand=True, padx=8, pady=(6, 6))

        self.content_frame = ctk.CTkFrame(self.main_container, fg_color="transparent")
        self.content_frame.pack(fill="both", expand=True)
        self.content_frame.grid_rowconfigure(0, weight=0)
        self.content_frame.grid_rowconfigure(1, weight=0)
        self.content_frame.grid_rowconfigure(2, weight=0)
        self.content_frame.grid_rowconfigure(3, weight=0)
        self.content_frame.grid_rowconfigure(4, weight=0, minsize=200)
        self.content_frame.grid_columnconfigure(0, weight=1)

        kpi_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        kpi_container.grid(row=0, column=0, sticky="ew", pady=(0, 6))
        self.create_global_kpi_section(kpi_container)
        
        # Sensor panel
        sensor_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        sensor_container.grid(row=1, column=0, sticky="ew", pady=(0, 6))
        self.create_sensor_section(sensor_container)

        # Priority Vehicle Panel (·∫©n m·∫∑c ƒë·ªãnh)
        self.priority_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        self.create_priority_vehicle_section(self.priority_container)

        intersections_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        intersections_container.grid(row=3, column=0, sticky="ew", pady=(0, 6))
        intersections_container.grid_columnconfigure(0, weight=1)
        intersections_container.grid_columnconfigure(1, weight=1)

        self.create_intersection_section(intersections_container, "Ng√£ t∆∞ 1", 0, "#3b82f6")
        self.create_intersection_section(intersections_container, "Ng√£ t∆∞ 2", 1, "#8b5cf6")

        log_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        log_container.grid(row=4, column=0, sticky="nsew")
        log_container.grid_rowconfigure(0, weight=1)
        log_container.grid_columnconfigure(0, weight=1)
        self.create_log_section(log_container)

    # ---------- UI helper creators (same as original UI) ----------
    def create_global_kpi_section(self, parent):
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.pack(fill="x", padx=0, pady=0)
        header_frame = ctk.CTkFrame(section, fg_color="transparent", height=35)
        header_frame.pack(fill="x", padx=10, pady=(8, 6))
        header_frame.pack_propagate(False)
        ctk.CTkLabel(header_frame, text="üìä KPI T·ªïng H·ª£p", font=("Segoe UI", 12, "bold"),
                     text_color="#0f172a", anchor="w").pack(side="left")
        kpi_grid = ctk.CTkFrame(section, fg_color="transparent")
        kpi_grid.pack(fill="x", padx=8, pady=(0, 8))
        self.global_kpi_cards = {}
        kpi_data = [
            ("T·ªïng xe", "‚Äî", "xe", "#dbeafe", "#1e3a8a", "üöó"),
            ("ƒê·ªô tr·ªÖ TB", "‚Äî", "s", "#fef3c7", "#78350f", "‚è±"),
            ("L∆∞u l∆∞·ª£ng", "‚Äî", "xe/h", "#d1fae5", "#065f46", "üìà"),
            ("Chu k·ª≥ TB", "‚Äî", "s", "#e0e7ff", "#3730a3", "üí°"),
            ("C√¥ng b·∫±ng", "‚Äî", "", "#fce7f3", "#831843", "‚öñ"),
            ("Ph·ªëi h·ª£p", "‚Äî", "%", "#ccfbf1", "#134e4a", "üîó"),
        ]
        for idx, (name, value, unit, bg_color, text_color, icon) in enumerate(kpi_data):
            row = idx // 3
            col = idx % 3
            card = ctk.CTkFrame(kpi_grid, fg_color=bg_color, corner_radius=6, width=110, height=65)
            card.grid(row=row, column=col, padx=3, pady=3, sticky="ew")
            card.grid_propagate(False)
            ctk.CTkLabel(card, text=icon, font=("Segoe UI", 14), text_color=text_color).pack(side="left",
                                                                                             padx=(6, 4), pady=4)
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(side="left", fill="both", expand=True, pady=4, padx=(0, 4))
            ctk.CTkLabel(content, text=name, font=("Segoe UI", 8, "bold"), text_color="#0f172a", anchor="w").pack(
                anchor="w")
            value_frame = ctk.CTkFrame(content, fg_color="transparent")
            value_frame.pack(anchor="w", fill="x")
            val_label = ctk.CTkLabel(value_frame, text=value, font=("Segoe UI", 15, "bold"),
                                     text_color=text_color, anchor="w")
            val_label.pack(side="left")
            if unit:
                ctk.CTkLabel(value_frame, text=f" {unit}", font=("Segoe UI", 8), text_color="#475569", anchor="w").pack(
                    side="left", pady=(4, 0))
            self.global_kpi_cards[name] = val_label
        for i in range(3):
            kpi_grid.grid_columnconfigure(i, weight=1)
    
    def create_sensor_section(self, parent):
        """T·∫°o panel hi·ªÉn th·ªã tr·∫°ng th√°i c·∫£m bi·∫øn"""
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.pack(fill="x", padx=0, pady=0)
        
        # Header
        header_frame = ctk.CTkFrame(section, fg_color="transparent", height=35)
        header_frame.pack(fill="x", padx=10, pady=(8, 6))
        header_frame.pack_propagate(False)
        ctk.CTkLabel(header_frame, text="üì° Tr·∫°ng Th√°i C·∫£m Bi·∫øn (Sensors)", font=("Segoe UI", 12, "bold"),
                     text_color="#0f172a", anchor="w").pack(side="left")
        
        # Sensor grid
        sensor_grid = ctk.CTkFrame(section, fg_color="transparent")
        sensor_grid.pack(fill="x", padx=8, pady=(0, 8))
        
        self.sensor_cards = {}
        sensor_data = [
            ("E1 Detectors", "‚Äî", "detectors", "#e0f2fe", "#0369a1", "üîµ"),
            ("E2 Detectors", "‚Äî", "detectors", "#fef3c7", "#92400e", "üü°"),
            ("M·∫≠t ƒë·ªô TB", "‚Äî", "%", "#d1fae5", "#065f46", "üìä"),
            ("Queue TB", "‚Äî", "m", "#fecaca", "#991b1b", "üöó"),
        ]
        
        for idx, (name, value, unit, bg_color, text_color, icon) in enumerate(sensor_data):
            card = ctk.CTkFrame(sensor_grid, fg_color=bg_color, corner_radius=6, width=110, height=60)
            card.grid(row=0, column=idx, padx=3, pady=3, sticky="ew")
            card.grid_propagate(False)
            
            ctk.CTkLabel(card, text=icon, font=("Segoe UI", 14), text_color=text_color).pack(side="left",
                                                                                             padx=(6, 4), pady=4)
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(side="left", fill="both", expand=True, pady=4, padx=(0, 4))
            ctk.CTkLabel(content, text=name, font=("Segoe UI", 8, "bold"), text_color="#0f172a", anchor="w").pack(
                anchor="w")
            value_frame = ctk.CTkFrame(content, fg_color="transparent")
            value_frame.pack(anchor="w", fill="x")
            val_label = ctk.CTkLabel(value_frame, text=value, font=("Segoe UI", 14, "bold"),
                                     text_color=text_color, anchor="w")
            val_label.pack(side="left")
            if unit:
                ctk.CTkLabel(value_frame, text=f" {unit}", font=("Segoe UI", 8), text_color="#475569", anchor="w").pack(
                    side="left", pady=(3, 0))
            self.sensor_cards[name] = val_label
        
        for i in range(4):
            sensor_grid.grid_columnconfigure(i, weight=1)

    def create_priority_vehicle_section(self, parent):
        """T·∫°o panel hi·ªÉn th·ªã xe ∆∞u ti√™n ƒë·ªông"""
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.pack(fill="x", padx=0, pady=0)
        
        # Header v·ªõi animation
        header_frame = ctk.CTkFrame(section, fg_color="#ef4444", corner_radius=8, height=40)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        header_content = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_content.pack(expand=True)
        
        # Animated title
        self.priority_title = ctk.CTkLabel(
            header_content, 
            text="üö® PH√ÅT HI·ªÜN XE ∆ØU TI√äN", 
            font=("Segoe UI", 14, "bold"), 
            text_color="#ffffff"
        )
        self.priority_title.pack()
        
        # Priority vehicle grid
        priority_grid = ctk.CTkFrame(section, fg_color="transparent")
        priority_grid.pack(fill="x", padx=8, pady=8)
        priority_grid.grid_columnconfigure(0, weight=1)
        priority_grid.grid_columnconfigure(1, weight=1)
        
        self.priority_widgets = {}
        
        # J1 v√† J4 sections
        for idx, (junction_id, junction_name) in enumerate([("J1", "Ng√£ t∆∞ 1"), ("J4", "Ng√£ t∆∞ 2")]):
            junction_frame = ctk.CTkFrame(priority_grid, fg_color="#fef2f2", corner_radius=6)
            junction_frame.grid(row=0, column=idx, padx=4, pady=0, sticky="ew")
            
            # Junction header
            ctk.CTkLabel(
                junction_frame, 
                text=f"üö¶ {junction_name}", 
                font=("Segoe UI", 12, "bold"), 
                text_color="#991b1b"
            ).pack(pady=(8, 4))
            
            # Direction grid
            dir_grid = ctk.CTkFrame(junction_frame, fg_color="transparent")
            dir_grid.pack(padx=8, pady=(0, 8))
            dir_grid.grid_columnconfigure(0, weight=1)
            dir_grid.grid_columnconfigure(1, weight=1)
            
            directions = [
                ("üî∫ B·∫Øc", "#fecaca", "#991b1b", 0, 0),
                ("üîª Nam", "#fed7aa", "#9a3412", 0, 1),
                ("‚ñ∂Ô∏è ƒê√¥ng", "#bbf7d0", "#14532d", 1, 0),
                ("‚óÄÔ∏è T√¢y", "#fce7f3", "#831843", 1, 1),
            ]
            
            self.priority_widgets[junction_id] = {}
            
            for dir_name, bg_color, text_color, row, col in directions:
                card = ctk.CTkFrame(dir_grid, fg_color=bg_color, corner_radius=4, height=45)
                card.grid(row=row, column=col, padx=2, pady=2, sticky="ew")
                card.pack_propagate(False)
                
                content = ctk.CTkFrame(card, fg_color="transparent")
                content.pack(expand=True)
                
                ctk.CTkLabel(content, text=dir_name, font=("Segoe UI", 9, "bold"), text_color="#0f172a").pack()
                
                val_label = ctk.CTkLabel(content, text="0", font=("Segoe UI", 16, "bold"), text_color=text_color)
                val_label.pack()
                
                dir_key = dir_name.split()[1]  # L·∫•y "B·∫Øc", "Nam", etc.
                self.priority_widgets[junction_id][dir_key] = val_label

    def create_intersection_section(self, parent, name, column, accent_color):
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.grid(row=0, column=column, sticky="nsew", padx=3)
        header_frame = ctk.CTkFrame(section, fg_color=accent_color, corner_radius=8, height=42)
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        header_content = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_content.pack(expand=True)
        ctk.CTkLabel(header_content, text=name, font=("Segoe UI", 14, "bold"), text_color="#ffffff").pack()

        stats_frame = ctk.CTkFrame(section, fg_color="transparent")
        stats_frame.pack(fill="x", padx=8, pady=(8, 6))
        stats_frame.grid_columnconfigure(0, weight=1)
        stats_frame.grid_columnconfigure(1, weight=1)

        queue_card = ctk.CTkFrame(stats_frame, fg_color="#fef3c7", corner_radius=6, height=65)
        queue_card.grid(row=0, column=0, padx=3, sticky="ew")
        queue_card.pack_propagate(False)
        queue_content = ctk.CTkFrame(queue_card, fg_color="transparent")
        queue_content.pack(expand=True)
        ctk.CTkLabel(queue_content, text="H√†ng ch·ªù", font=("Segoe UI", 10, "bold"), text_color="#0f172a").pack()
        queue_value_frame = ctk.CTkFrame(queue_content, fg_color="transparent")
        queue_value_frame.pack()
        queue_label = ctk.CTkLabel(queue_value_frame, text="0", font=("Segoe UI", 20, "bold"), text_color="#78350f")
        queue_label.pack(side="left")
        ctk.CTkLabel(queue_value_frame, text=" xe", font=("Segoe UI", 11), text_color="#475569").pack(side="left",
                                                                                                     pady=(6, 0))

        if not hasattr(self, 'intersection_widgets'):
            self.intersection_widgets = {}
        if name not in self.intersection_widgets:
            self.intersection_widgets[name] = {}
        self.intersection_widgets[name]["queue"] = queue_label

        wait_card = ctk.CTkFrame(stats_frame, fg_color="#fecaca", corner_radius=6, height=65)
        wait_card.grid(row=0, column=1, padx=3, sticky="ew")
        wait_card.pack_propagate(False)
        wait_content = ctk.CTkFrame(wait_card, fg_color="transparent")
        wait_content.pack(expand=True)
        ctk.CTkLabel(wait_content, text="Ch·ªù TB", font=("Segoe UI", 10, "bold"), text_color="#0f172a").pack()
        wait_value_frame = ctk.CTkFrame(wait_content, fg_color="transparent")
        wait_value_frame.pack()
        wait_label = ctk.CTkLabel(wait_value_frame, text="0", font=("Segoe UI", 20, "bold"), text_color="#991b1b")
        wait_label.pack(side="left")
        ctk.CTkLabel(wait_value_frame, text=" gi√¢y", font=("Segoe UI", 11), text_color="#475569").pack(side="left",
                                                                                                     pady=(6, 0))
        self.intersection_widgets[name]["wait"] = wait_label

        vehicles_frame = ctk.CTkFrame(section, fg_color="#f8fafc", corner_radius=6)
        vehicles_frame.pack(fill="x", padx=8, pady=(0, 8))
        ctk.CTkLabel(vehicles_frame, text="S·ªë xe theo h∆∞·ªõng", font=("Segoe UI", 10, "bold"),
                     text_color="#475569").pack(pady=(6, 3))
        dir_grid = ctk.CTkFrame(vehicles_frame, fg_color="transparent")
        dir_grid.pack(padx=6, pady=(0, 6))
        dir_grid.grid_columnconfigure(0, weight=1)
        dir_grid.grid_columnconfigure(1, weight=1)

        directions = [
            ("‚¨Ü B·∫Øc", "#e9d5ff", "#6b21a8", 0, 0),
            ("‚¨á Nam", "#fed7aa", "#9a3412", 0, 1),
            ("‚û° ƒê√¥ng", "#bbf7d0", "#14532d", 1, 0),
            ("‚¨Ö T√¢y", "#fce7f3", "#831843", 1, 1),
        ]
        self.intersection_widgets[name]["directions"] = {}
        for dir_name, bg_color, text_color, row, col in directions:
            card = ctk.CTkFrame(dir_grid, fg_color=bg_color, corner_radius=5, height=52)
            card.grid(row=row, column=col, padx=3, pady=3, sticky="ew")
            card.pack_propagate(False)
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(expand=True)
            ctk.CTkLabel(content, text=dir_name, font=("Segoe UI", 9, "bold"), text_color="#0f172a").pack()
            val_label = ctk.CTkLabel(content, text="0", font=("Segoe UI", 17, "bold"), text_color=text_color)
            val_label.pack()
            dir_key = dir_name.split()[1]
            self.intersection_widgets[name]["directions"][dir_key] = val_label

    def create_log_section(self, parent):
        section = ctk.CTkFrame(parent, fg_color="#ffffff", corner_radius=8)
        section.pack(fill="both", expand=True)
        section.grid_rowconfigure(0, weight=1)
        section.grid_columnconfigure(0, weight=1)
        header_frame = ctk.CTkFrame(section, fg_color="transparent", height=35)
        header_frame.pack(fill="x", padx=10, pady=(8, 6))
        header_frame.pack_propagate(False)
        ctk.CTkLabel(header_frame, text="üìã Log H·ªá Th·ªëng", font=("Segoe UI", 12, "bold"),
                     text_color="#0f172a", anchor="w").pack(side="left")
        log_frame = ctk.CTkFrame(section, fg_color="transparent")
        log_frame.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        self.log_box = tk.Text(log_frame, bg="#f8fafc", fg="#1e293b", wrap="word", relief="flat",
                               font=("Consolas", 9), padx=8, pady=8, borderwidth=0, highlightthickness=0, height=8)
        self.log_box.pack(fill="both", expand=True)
        self.log("üö¶ H·ªá th·ªëng ƒëi·ªÅu ki·ªÉn ƒë√®n giao th√¥ng th√¥ng minh s·∫µn s√†ng")

    # ============ Mode switching ============
    def change_mode(self, value):
        self.mode = value
        self.log(f"‚úì Ch·∫ø ƒë·ªô: {value}")
        self.mode_status_label.configure(text=f"Ch·∫ø ƒë·ªô: {value}")
        
        # If switching from Adaptive -> M·∫∑c ƒë·ªãnh, stop controllers
        if value == "M·∫∑c ƒë·ªãnh":
            self.stop_all_controllers()
            self.timing_bar.pack(after=self.control_bar_main, fill="x", pady=(1, 0))
            
            # N·∫øu SUMO ƒëang ch·∫°y, √°p d·ª•ng ngay fixed-time program
            if self.running:
                try:
                    import traci
                    traci.simulation.getTime()
                    
                    # L·∫•y th·ªùi gian hi·ªán t·∫°i t·ª´ entry fields
                    try:
                        green = int(self.green_entry.get())
                        yellow = int(self.yellow_entry.get())
                        red = int(self.red_entry.get())
                    except ValueError:
                        green = self.green_time
                        yellow = self.yellow_time
                        red = self.red_time
                    
                    phase_durations = {
                        'xanh_chung': green,
                        'vang_chung': yellow,
                        'do_toan_phan': red
                    }
                    
                    dieu_chinh_tat_ca_den(phase_durations)
                    self.log(f"‚úÖ ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Fixed-Time (Xanh {green}s, V√†ng {yellow}s, All-Red {red}s)")
                    
                except Exception as e:
                    self.log(f"‚ö† Kh√¥ng th·ªÉ √°p d·ª•ng Fixed-Time: {e}")
        
        # If switching to Adaptive, hide timing and start controllers if running
        if value == "T·ª± ƒë·ªông":
            self.timing_bar.pack_forget()
            if self.running:
                self.start_controllers_if_needed()
                self.log("‚úÖ ƒê√£ k√≠ch ho·∫°t Adaptive Controllers")

    # ============ Start / Pause / Stop ============
    def start_sim(self):
        if self.running:
            return

        self.running = True
        self.paused = False
        self.status_label.configure(text="üü¢ Ch·∫°y", text_color="#10b981")

        # L·∫•y k·ªãch b·∫£n ƒë∆∞·ª£c ch·ªçn
        scenario = self.case_box.get()
        self.log(f"‚ñ∂ B·∫Øt ƒë·∫ßu m√¥ ph·ªèng v·ªõi k·ªãch b·∫£n: {scenario}")

        # Ki·ªÉm tra SUMO ƒë√£ ch·∫°y ch∆∞a
        sumo_is_running = False
        try:
            import traci
            traci.simulation.getTime()
            sumo_is_running = True
            self.log("‚ñ∂ SUMO ƒë√£ s·∫µn s√†ng, k·∫øt n·ªëi tr·ª±c ti·∫øp.")
        except Exception:
            sumo_is_running = False

        # X√°c ƒë·ªãnh file c·∫•u h√¨nh SUMO
        config_path = os.path.join(os.path.dirname(__file__), '..', '..', 'data', 'sumo', 'test2.sumocfg')
        config_path = os.path.abspath(config_path)

        # N·∫øu SUMO ch∆∞a ch·∫°y, kh·ªüi ƒë·ªông
        if not sumo_is_running:
            if not khoi_dong_sumo(config_path, gui=True):
                self.log("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông SUMO. Ki·ªÉm tra c·∫•u h√¨nh ho·∫∑c c√†i SUMO.")
                self.running = False
                self.status_label.configure(text="‚ö´ L·ªói", text_color="#ef4444")
                return
            else:
                self.log("‚úÖ SUMO GUI ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
        
        # Kh·ªüi t·∫°o Vehicle Counter (KH√îNG kh·ªüi ƒë·ªông SUMO v√¨ ƒë√£ kh·ªüi ƒë·ªông r·ªìi)
        try:
            self.vehicle_counter = VehicleCounter(config_path)
            # G·ªçi discover_edges ƒë·ªÉ kh·ªüi t·∫°o mapping edges
            try:
                import traci
                self.vehicle_counter.discover_edges()
                self.log("‚úÖ Vehicle Counter ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v√† ph√°t hi·ªán edges")
            except Exception as discover_err:
                self.log(f"‚ö† Kh√¥ng th·ªÉ ph√°t hi·ªán edges: {discover_err}")
                self.vehicle_counter = None
        except Exception as e:
            self.log(f"‚ö† Kh√¥ng th·ªÉ kh·ªüi t·∫°o Vehicle Counter: {e}")
            self.vehicle_counter = None
        
        # Kh·ªüi t·∫°o Sensor Manager
        try:
            self.sensor_manager = SensorManager()
            e1_count, e2_count = self.sensor_manager.discover_detectors()
            self.log(f"‚úÖ Sensor Manager ƒë√£ ph√°t hi·ªán {e1_count} E1 detectors v√† {e2_count} E2 detectors")
        except Exception as e:
            self.log(f"‚ö† Kh√¥ng th·ªÉ kh·ªüi t·∫°o Sensor Manager: {e}")
            self.sensor_manager = None

        # G·ªçi h√†m sinh k·ªãch b·∫£n (d·ª±a tr√™n l·ª±a ch·ªçn)
        self.apply_scenario_to_sumo(scenario)

        # √Åp d·ª•ng ch·∫ø ƒë·ªô (M·∫∑c ƒë·ªãnh / T·ª± ƒë·ªông)
        if self.mode == "M·∫∑c ƒë·ªãnh":
            try:
                phase_durations = {
                    'xanh_chung': int(self.green_entry.get()),
                    'vang_chung': int(self.yellow_entry.get()),
                    'do_toan_phan': int(self.red_entry.get())
                }
            except ValueError:
                phase_durations = {
                    'xanh_chung': self.green_time,
                    'vang_chung': self.yellow_time,
                    'do_toan_phan': self.red_time
                }

            try:
                dieu_chinh_tat_ca_den(phase_durations)
                self.log("‚úÖ √Åp d·ª•ng th·ªùi gian static cho t·∫•t c·∫£ ƒë√®n (M·∫∑c ƒë·ªãnh).")
            except Exception as e:
                self.log(f"‚ö† Kh√¥ng th·ªÉ √°p d·ª•ng th·ªùi gian: {e}")

        elif self.mode == "T·ª± ƒë·ªông":
            self.start_controllers_if_needed()

        threading.Thread(target=self.simulate_with_sumo, daemon=True).start()

    def pause_sim(self):
        if not self.running:
            return
        # Stop running flag and mark paused
        self.running = False
        self.paused = True

        # KH√îNG reset KPI - gi·ªØ nguy√™n gi√° tr·ªã hi·ªán t·∫°i khi pause
        # Ch·ªâ c·∫≠p nh·∫≠t status label
        self.status_label.configure(text="üü° T·∫°m d·ª´ng", text_color="#f59e0b")
        self.log("‚è∏ T·∫°m d·ª´ng m√¥ ph·ªèng (nh·∫•n Start ƒë·ªÉ ti·∫øp t·ª•c)")

    def stop_sim(self):
        # Ensure simulation flags
        self.running = False
        self.paused = False

        # Reset KPI/UI to default
        try:
            self._reset_ui_and_data(False)
        except Exception:
            pass

        # stop adaptive controllers
        self.stop_all_controllers()
        
        # Cleanup Vehicle Counter (just drop reference; dashboard manages traci lifecycle)
        if self.vehicle_counter is not None:
            try:
                self.vehicle_counter = None
                self.log("‚úÖ ƒê√£ d·ª´ng Vehicle Counter")
            except Exception as e:
                self.log(f"‚ö† L·ªói khi d·ª´ng Vehicle Counter: {e}")
        
        try:
            dung_sumo()
            self.log("‚èπ ƒê√£ d·ª´ng v√† ƒë√≥ng SUMO")
        except Exception:
            self.log("‚èπ ƒê√£ d·ª´ng m√¥ ph·ªèng (kh√¥ng th·ªÉ ƒë√≥ng SUMO b·∫±ng API)")

    def export_log(self):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"traffic_2nt_log_{timestamp}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(self.log_box.get("1.0", "end"))
        self.log(f"‚úì Xu·∫•t: {filename}")

    # ============ Controllers management ============
    def start_controllers_if_needed(self):
        if AdaptiveController is None:
            self.log("‚ùå AdaptiveController kh√¥ng s·∫µn c√≥ (kh√¥ng import ƒë∆∞·ª£c).")
            return
        try:
            import traci
            tls_ids = traci.trafficlight.getIDList()
            for tls_id in tls_ids:
                if tls_id not in self.controllers:
                    ctrl = AdaptiveController(junction_id=tls_id)
                    ok = ctrl.start()
                    if ok:
                        self.controllers[tls_id] = ctrl
                        self.log(f"ü§ñ Adaptive controller started for {tls_id}")
                    else:
                        self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông AdaptiveController cho {tls_id}")
            
            # Kh·ªüi ƒë·ªông Priority Controllers
            self.init_priority_controllers()
            
        except Exception as e:
            self.log(f"‚ö† L·ªói khi kh·ªüi t·∫°o controllers: {e}")

    def stop_all_controllers(self):
        # Stop adaptive controllers
        for tls_id, ctrl in list(self.controllers.items()):
            try:
                ctrl.stop()
            except Exception:
                pass
            self.controllers.pop(tls_id, None)
        if self.controllers:
            self.log("üõë D·ª´ng t·∫•t c·∫£ adaptive controllers")
        self.controllers = {}
        
        # Stop priority controllers
        if hasattr(self, 'priority_controllers') and self.priority_controllers:
            for junction_id, priority_ctrl in list(self.priority_controllers.items()):
                try:
                    priority_ctrl.stop()
                except Exception:
                    pass
            self.log("üõë D·ª´ng t·∫•t c·∫£ priority controllers")
            self.priority_controllers = {}

    # ============ Simulation loop ============
    def simulate_with_sumo(self):
        try:
            import traci
        except Exception as e:
            self.log(f"‚ùå Traci kh√¥ng s·∫µn s√†ng: {e}")
            self.running = False
            self.status_label.configure(text="‚ö´ L·ªói", text_color="#ef4444")
            return

        try:
            sumo_ended = False
            while not sumo_ended:
                # pause handling
                while self.paused and not sumo_ended:
                    time.sleep(0.1)
                    if not self.running and not self.paused:
                        sumo_ended = True
                        break

                if not self.running and not self.paused:
                    break

                if self.running:
                    # advance SUMO
                    traci.simulationStep()

                    # adaptive controllers step
                    if self.mode == "T·ª± ƒë·ªông" and self.controllers:
                        for tls_id, ctrl in list(self.controllers.items()):
                            try:
                                ctrl.step()
                            except Exception as e:
                                self.log(f"‚ö† Controller {tls_id} step error: {e}")
                    
                    # priority controllers step (xe ∆∞u ti√™n)
                    if hasattr(self, 'priority_controllers') and self.priority_controllers:
                        for junction_id, priority_ctrl in list(self.priority_controllers.items()):
                            try:
                                priority_ctrl.step()
                            except Exception as e:
                                self.log(f"‚ö† PriorityController {junction_id} step error: {e}")

                    # update UI data & redraw
                    self.update_data_from_sumo()
                    self.update_ui()

                    # small sleep to avoid UI freeze (and give SUMO CPU time)
                    time.sleep(0.1)

        except Exception as e:
            self.log(f"‚ùå L·ªói trong m√¥ ph·ªèng SUMO: {e}")
            self.running = False
            self.paused = False
            self.status_label.configure(text="‚ö´ L·ªói", text_color="#ef4444")
        finally:
            # When finishing (stop), stop controllers and optionally close SUMO
            if not self.paused and not self.resetting:
                try:
                    self.stop_scenario_spawning()
                    self.stop_all_controllers()
                    dung_sumo()
                except Exception:
                    pass

    # ============ Reset ============
    def reset_all(self):
        threading.Thread(target=self._do_reset, daemon=True).start()

    def _do_reset(self):
        self.resetting = True
        was_running = self.running
        self.running = False
        self.paused = False
        time.sleep(0.8)
        try:
            import traci
            try:
                traci.simulation.getTime()
                config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                                           "data", "sumo", "test2.sumocfg")
                traci.load(["-c", config_path])
                self.log("üîÑ ƒê√£ reload SUMO v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu")
                time.sleep(0.5)
                # N·∫øu ƒëang ch·∫°y tr∆∞·ªõc khi reset, restart simulation loop
                if was_running:
                    self.running = True
                    threading.Thread(target=self.simulate_with_sumo, daemon=True).start()
                    self.log("‚úì Simulation loop ƒë√£ s·∫µn s√†ng")
            except Exception as e:
                self.log(f"‚ö† Kh√¥ng th·ªÉ reload SUMO: {e}")
        except Exception:
            pass
        self.after(0, self._reset_ui_and_data, was_running)

    def _reset_ui_and_data(self, was_running):
        """Reset UI v√† d·ªØ li·ªáu KPI.

        Args:
            was_running (bool): tr·∫°ng th√°i tr∆∞·ªõc khi reset; n·∫øu True th√¨ gi·ªØ simulation running.
        """
        # Reset timing settings
        self.green_time = 30
        self.yellow_time = 3
        self.red_time = 3
        self.mode = "M·∫∑c ƒë·ªãnh"

        # Reset KPI data
        self.global_kpi_data = {
            "T·ªïng xe": 0,
            "ƒê·ªô tr·ªÖ TB": 0.0,
            "L∆∞u l∆∞·ª£ng": 0,
            "Chu k·ª≥ TB": 0,
            "C√¥ng b·∫±ng": 0.0,
            "Ph·ªëi h·ª£p": 0
        }

        # Reset intersection data
        self.intersection_data = {
            "Ng√£ t∆∞ 1": {"light_state": "ƒê·ªè", "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0}, "queue": 0,
                         "wait_time": 0},
            "Ng√£ t∆∞ 2": {"light_state": "Xanh", "vehicles": {"B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0}, "queue": 0,
                         "wait_time": 0}
        }

        # Restore / set running flag according to was_running
        # (Note: _do_reset already restarts simulate loop only if was_running True)
        self.running = bool(was_running)

        # Update UI elements
        # Status label: keep it as 'S·∫µn s√†ng' when not running, otherwise show 'Ch·∫°y'
        if self.running:
            self.status_label.configure(text="üü¢ Ch·∫°y", text_color="#10b981")
        else:
            self.status_label.configure(text="üü¢ S·∫µn s√†ng", text_color="#22c55e")

        self.mode_option.set("M·∫∑c ƒë·ªãnh")
        self.mode_status_label.configure(text="Ch·∫ø ƒë·ªô: M·∫∑c ƒë·ªãnh")

        self.green_entry.delete(0, 'end'); self.green_entry.insert(0, "30")
        self.yellow_entry.delete(0, 'end'); self.yellow_entry.insert(0, "3")
        self.red_entry.delete(0, 'end'); self.red_entry.insert(0, "3")

        # KPI cards
        for name, label in self.global_kpi_cards.items():
            label.configure(text="‚Äî")

        # Intersection widgets
        for int_name, widgets in self.intersection_widgets.items():
            widgets["queue"].configure(text="0")
            widgets["wait"].configure(text="0")
            for direction, label in widgets["directions"].items():
                label.configure(text="0")

        self.log("üîÑ ƒê√£ ƒë·∫∑t l·∫°i to√†n b·ªô h·ªá th·ªëng v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh")
        self.resetting = False

    # ============ Logging & apply timing ============
    def log(self, msg):
        timestamp = datetime.now().strftime("%H:%M:%S")
        try:
            self.log_box.insert("end", f"[{timestamp}] {msg}\n")
            self.log_box.see("end")
        except Exception:
            print(f"[{timestamp}] {msg}")

    def apply_timing(self):
        try:
            green = int(self.green_entry.get())
            yellow = int(self.yellow_entry.get())
            red = int(self.red_entry.get())
            if green <= 0 or yellow <= 0 or red <= 0:
                self.log("‚ùå Th·ªùi gian ph·∫£i l·ªõn h∆°n 0")
                return
            if green > 120 or yellow > 30 or red > 30:
                self.log("‚ùå Th·ªùi gian qu√° l·ªõn")
                return
            self.green_time = green; self.yellow_time = yellow; self.red_time = red
            self.log(f"‚úì ƒê√£ c√†i ƒë·∫∑t: Xanh {green}s, V√†ng {yellow}s, ƒê·ªè To√†n Ph·∫ßn {red}s")
            # If SUMO is running and current mode is M·∫∑c ƒë·ªãnh, apply immediately
            try:
                import traci
                traci.simulation.getTime()
                if self.mode == "M·∫∑c ƒë·ªãnh":
                    phase_durations = {'xanh_chung': green, 'vang_chung': yellow, 'do_toan_phan': red}
                    dieu_chinh_tat_ca_den(phase_durations)
                    self.log("‚úÖ √Åp d·ª•ng th·ªùi gian m·ªõi l√™n SUMO (M·∫∑c ƒë·ªãnh).")
                else:
                    self.log("‚ÑπÔ∏è ƒêang ·ªü ch·∫ø ƒë·ªô T·ª± ƒë·ªông (Adaptive); thay ƒë·ªïi th·ªùi gian kh√¥ng √°p d·ª•ng.")
            except Exception:
                # SUMO not running - nothing to apply now
                self.log("‚ÑπÔ∏è SUMO ch∆∞a ch·∫°y; √°p d·ª•ng s·∫Ω th·ª±c hi·ªán khi Start.")
        except ValueError:
            self.log("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
            
        # ============ Scenario handler ============
    def apply_scenario_to_sumo(self, scenario_name):
        """
        D·ª±a tr√™n k·ªãch b·∫£n ƒë∆∞·ª£c ch·ªçn, sinh l∆∞u l∆∞·ª£ng xe ph√π h·ª£p trong SUMO.
        C√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ sinh route.xml kh√°c nhau, ho·∫∑c spawn xe theo th·ªùi gian.
        """
        try:
            import traci
        except Exception:
            self.log("‚ö† Kh√¥ng th·ªÉ √°p d·ª•ng k·ªãch b·∫£n v√¨ SUMO ch∆∞a s·∫µn s√†ng.")
            return

        self.log(f"üé¨ ƒêang √°p d·ª•ng {scenario_name} ...")

        try:
            # X·ª≠ l√Ω theo t·ª´ng k·ªãch b·∫£n
            if scenario_name == "M·∫∑c ƒë·ªãnh":
                self.log("üöó K·ªãch b·∫£n m·∫∑c ƒë·ªãnh: L∆∞u l∆∞·ª£ng ƒë·ªÅu t·ª´ 4 h∆∞·ªõng.")
                # D·ª´ng spawning xe ∆∞u ti√™n n·∫øu c√≥
                self.stop_priority_spawning()
                # Spawn xe ∆∞u ti√™n ng·∫´u nhi√™n t·ª´ M·ªåI h∆∞·ªõng (kho·∫£ng 1 xe m·ªói 30s)
                self.start_default_priority_spawning(interval=30)

            elif scenario_name == "SC1 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng ch√≠nh trong gi·ªù cao ƒëi·ªÉm":
                self.log("üöì SC1: Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng ch√≠nh (B·∫Øc/Nam) - Ch·ªâ spawn t·ª´ -E1, -E2, -E4, -E5.")
                # X√≥a t·∫•t c·∫£ xe ∆∞u ti√™n hi·ªán c√≥ (t·ª´ dist_normal)
                self.clear_all_priority_vehicles()
                # Spawn xe ∆∞u ti√™n t·ª´ B·∫Øc/Nam ƒë·ªãnh k·ª≥ (h∆∞·ªõng ch√≠nh c·ªßa c·∫£ 2 ng√£ t∆∞)
                self.start_priority_spawning(["north", "south"], interval=20, scenario_id="SC1")

            elif scenario_name == "SC2 - Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng nh√°nh (√≠t xe) s·∫Øp t·ªõi g·∫ßn":
                self.log("üöô SC2: Xe ∆∞u ti√™n t·ª´ h∆∞·ªõng nh√°nh (T√¢y) - M√¥ ph·ªèng spawn xe.")
                self.clear_all_priority_vehicles()
                # Spawn xe ∆∞u ti√™n t·ª´ T√¢y (h∆∞·ªõng nh√°nh)
                self.start_priority_spawning(["west"], interval=20, scenario_id="SC2")

            elif scenario_name == "SC3 - Nhi·ªÅu xe ∆∞u ti√™n t·ª´ 2 h∆∞·ªõng ƒë·ªëi di·ªán":
                self.log("üöí SC3: Nhi·ªÅu xe ∆∞u ti√™n t·ª´ 2 h∆∞·ªõng ƒë·ªëi di·ªán - M√¥ ph·ªèng xung ƒë·ªôt.")
                self.clear_all_priority_vehicles()
                # Spawn NHI·ªÄU xe t·ª´ 2 h∆∞·ªõng ƒë·ªëi di·ªán (test xung ƒë·ªôt)
                self.start_priority_spawning(["north", "south"], interval=3, scenario_id="SC3")

            elif scenario_name == "SC4 - B√°o gi·∫£":
                self.log("üö® SC4: B√°o gi·∫£ - Ch·ªâ log th√¥ng b√°o, kh√¥ng spawn xe th·∫≠t.")
                self.clear_all_priority_vehicles()
                # Ch·ªâ log th√¥ng b√°o b√°o gi·∫£, kh√¥ng spawn xe
                self.start_false_alarm_simulation(interval=30)

            elif scenario_name == "SC5 - Xe ∆∞u ti√™n b·ªã k·∫πt trong d√≤ng xe d√†i":
                self.log("üöì SC5: Xe ∆∞u ti√™n b·ªã k·∫πt - Spawn xe ·ªü gi·ªØa d√≤ng xe (departPos xa).")
                self.clear_all_priority_vehicles()
                # Spawn xe ∆∞u ti√™n ·ªü v·ªã tr√≠ xa h∆°n (50-150m t·ª´ ƒë·∫ßu route) ƒë·ªÉ k·∫πt gi·ªØa d√≤ng xe
                self.start_priority_spawning_stuck(["north", "south", "west"], interval=15, scenario_id="SC5")

            elif scenario_name == "SC6 - Nhi·ªÅu xe ∆∞u ti√™n li√™n ti·∫øp":
                self.log("üöë SC6: Nhi·ªÅu xe ∆∞u ti√™n li√™n ti·∫øp - Spawn li√™n t·ª•c t·ª´ c√πng h∆∞·ªõng.")
                self.clear_all_priority_vehicles()
                # Spawn li√™n ti·∫øp xe ∆∞u ti√™n t·ª´ C√ôNG h∆∞·ªõng (North) m·ªói 10-12s
                # Theo t√†i li·ªáu: "20s sau l·∫°i c√≥ xe kh√°c" ‚Üí interval 10-15s l√† h·ª£p l√Ω
                self.start_priority_spawning_consecutive(["north"], base_interval=12, scenario_id="SC6")

            else:
                self.log("‚ÑπÔ∏è Kh√¥ng c√≥ k·ªãch b·∫£n c·ª• th·ªÉ, ch·∫°y m·∫∑c ƒë·ªãnh.")

        except Exception as e:
            self.log(f"‚ö† Kh√¥ng th·ªÉ √°p d·ª•ng k·ªãch b·∫£n: {e}")
    
    def switch_flow_distribution(self, dist_id):
        """
        Chuy·ªÉn ƒë·ªïi distribution type cho t·∫•t c·∫£ flows trong SUMO
        
        Args:
            dist_id: ID c·ªßa distribution ("dist_normal" ho·∫∑c "dist_no_priority")
        """
        try:
            import traci
            
            # L·∫•y t·∫•t c·∫£ flow IDs
            all_flows = [f"flow_all_{i}" for i in range(31)]  # flow_all_0 ƒë·∫øn flow_all_30
            
            changed_count = 0
            for flow_id in all_flows:
                try:
                    # Thay ƒë·ªïi type c·ªßa flow sang distribution m·ªõi
                    traci.flow.setType(flow_id, dist_id)
                    changed_count += 1
                except:
                    # Flow c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i, b·ªè qua
                    pass
            
            self.log(f"‚úÖ ƒê√£ chuy·ªÉn {changed_count} flows sang distribution '{dist_id}'")
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi chuy·ªÉn distribution: {e}")
    
    def clear_all_priority_vehicles(self):
        """X√≥a t·∫•t c·∫£ xe ∆∞u ti√™n hi·ªán c√≥ trong simulation"""
        try:
            import traci
            
            all_vehicles = traci.vehicle.getIDList()
            removed_count = 0
            
            for veh_id in all_vehicles:
                try:
                    veh_type = traci.vehicle.getTypeID(veh_id)
                    # X√≥a xe n·∫øu type l√† priority ho·∫∑c c√≥ ch·ª©a "priority" trong ID
                    if 'priority' in veh_type.lower() or 'priority' in veh_id.lower():
                        traci.vehicle.remove(veh_id)
                        removed_count += 1
                except:
                    continue
            
            if removed_count > 0:
                self.log(f"üóëÔ∏è ƒê√£ x√≥a {removed_count} xe ∆∞u ti√™n t·ª´ simulation")
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi x√≥a xe ∆∞u ti√™n: {e}")
    
    def init_priority_controllers(self):
        """Kh·ªüi t·∫°o Priority Controllers cho c√°c ng√£ t∆∞"""
        if PriorityController is None:
            self.log("‚ö†Ô∏è PriorityController kh√¥ng kh·∫£ d·ª•ng!")
            return
        
        try:
            import traci
            tls_ids = traci.trafficlight.getIDList()
            
            for tls_id in tls_ids[:2]:  # J1 v√† J4
                junction_id = "J1" if tls_ids.index(tls_id) == 0 else "J4"
                
                # L·∫•y adaptive controller t∆∞∆°ng ·ª©ng n·∫øu c√≥
                adaptive_ctrl = self.controllers.get(tls_id, None)
                
                # T·∫°o Priority Controller v·ªõi UI callback
                priority_ctrl = PriorityController(
                    junction_id=junction_id, 
                    adaptive_controller=adaptive_ctrl,
                    ui_callback=self.on_priority_state_change  # Callback ƒë·ªÉ update UI
                )
                
                # Kh·ªüi ƒë·ªông controller
                if priority_ctrl.start():
                    self.priority_controllers[junction_id] = priority_ctrl
                    self.log(f"‚úÖ PriorityController [{junction_id}] ƒë√£ kh·ªüi ƒë·ªông")
                else:
                    self.log(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông PriorityController [{junction_id}]")
        
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói kh·ªüi t·∫°o Priority Controllers: {e}")
    
    def on_priority_state_change(self, junction_id, state, vehicle):
        """
        Callback ƒë∆∞·ª£c g·ªçi khi PriorityController thay ƒë·ªïi state
        C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ∆∞u ti√™n r√µ r√†ng
        
        Args:
            junction_id: ID ng√£ t∆∞ (J1, J4)
            state: Tr·∫°ng th√°i m·ªõi (NORMAL, DETECTION, PREEMPTION_GREEN, etc.)
            vehicle: EmergencyVehicle object ho·∫∑c None
        """
        try:
            # Map state sang ti·∫øng Vi·ªát v√† m√†u s·∫Øc
            state_info = {
                "NORMAL": ("‚ö™ B√¨nh th∆∞·ªùng", "#64748b"),
                "DETECTION": ("üîç PH√ÅT HI·ªÜN XE ∆ØU TI√äN", "#f59e0b"),
                "SAFE_TRANSITION": ("‚ö†Ô∏è CHUY·ªÇN ƒê·ªîI AN TO√ÄN", "#f59e0b"),
                "PREEMPTION_GREEN": ("üö® ∆ØU TI√äN ƒêANG HO·∫†T ƒê·ªòNG", "#ef4444"),
                "HOLD_PREEMPTION": ("‚è≥ GI·ªÆ ƒê√àN XANH", "#ef4444"),
                "RESTORE": ("üîÑ KH√îI PH·ª§C", "#10b981")
            }
            
            text, color = state_info.get(state, ("", "#64748b"))
            
            # C·∫≠p nh·∫≠t priority status label
            if state == "NORMAL":
                self.priority_status_label.configure(text="")
            else:
                veh_info = ""
                if vehicle:
                    veh_info = f" - {vehicle.vehicle_id}"
                self.priority_status_label.configure(
                    text=f"[{junction_id}] {text}{veh_info}",
                    text_color=color
                )
            
            # Log chi ti·∫øt v·ªõi m√†u
            if state != "NORMAL":
                emoji_map = {
                    "DETECTION": "üîç",
                    "SAFE_TRANSITION": "üö¶",
                    "PREEMPTION_GREEN": "üö®",
                    "HOLD_PREEMPTION": "‚è≥",
                    "RESTORE": "üîÑ"
                }
                emoji = emoji_map.get(state, "üìç")
                
                if vehicle:
                    self.log(f"{emoji} [{junction_id}] {text} - Xe: {vehicle.vehicle_id} ({vehicle.direction})")
                else:
                    self.log(f"{emoji} [{junction_id}] {text}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Error in UI callback: {e}")
    
    def handle_priority_vehicles(self, tls_ids):
        """
        X·ª≠ l√Ω xe ∆∞u ti√™n b·∫±ng Priority Controller
        G·ªçi step() method c·ªßa controller ƒë·ªÉ t·ª± ƒë·ªông x·ª≠ l√Ω to√†n b·ªô logic
        """
        try:
            if not hasattr(self, 'priority_controllers') or not self.priority_controllers:
                return
            
            # X·ª≠ l√Ω cho m·ªói junction
            for junction_id, priority_ctrl in self.priority_controllers.items():
                try:
                    # G·ªçi step() - Controller t·ª± ƒë·ªông:
                    # 1. Qu√©t v√† ph√°t hi·ªán xe ∆∞u ti√™n (scan_for_emergency_vehicles)
                    # 2. X√°c nh·∫≠n xe (confirm_emergency_vehicle)
                    # 3. Chuy·ªÉn ƒë·ªïi state machine (NORMAL ‚Üí DETECTION ‚Üí SAFE_TRANSITION ‚Üí PREEMPTION_GREEN)
                    # 4. √Åp d·ª•ng pha ƒë√®n kh·∫©n c·∫•p (apply_emergency_phase)
                    # 5. Kh√¥i ph·ª•c v·ªÅ b√¨nh th∆∞·ªùng (RESTORE)
                    success = priority_ctrl.step()
                    
                    if not success:
                        continue
                    
                    # L·∫•y status hi·ªán t·∫°i v√† log state changes
                    status = priority_ctrl.get_status()
                    current_state = status.get('current_state', 'UNKNOWN')
                    
                    # Log state changes
                    if not hasattr(priority_ctrl, '_last_logged_state') or priority_ctrl._last_logged_state != current_state:
                        self.log(f"üö¶ [{junction_id}] Priority State: {current_state}")
                        self.log(f"    Detected: {status.get('detected_vehicles', 0)}, Confirmed: {status.get('confirmed_vehicles', 0)}")
                        priority_ctrl._last_logged_state = current_state
                
                except Exception as e:
                    self.log(f"‚ö†Ô∏è L·ªói trong Priority Controller [{junction_id}]: {e}")
        
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói handle_priority_vehicles: {e}")
    
    def start_false_alarm_simulation(self, interval=30):
        """
        SC4: M√¥ ph·ªèng b√°o gi·∫£ - T√≠n hi·ªáu ph√°t hi·ªán xe ∆∞u ti√™n nh∆∞ng kh√¥ng c√≥ xe th·∫≠t
        Logic: PriorityController s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán v√† timeout do kh√¥ng x√°c nh·∫≠n ƒë∆∞·ª£c xe th·∫≠t
        Trong SC4, kh√¥ng spawn xe th·∫≠t, controller s·∫Ω t·ª´ ch·ªëi false positive nh·ªù x√°c nh·∫≠n k√©p
        """
        def simulate_false_alarm():
            while self.running and hasattr(self, 'false_alarm_active') and self.false_alarm_active:
                try:
                    # Ch·ªâ log - Priority Controller s·∫Ω t·ª± qu√©t v√† kh√¥ng t√¨m th·∫•y xe
                    self.log("‚ö†Ô∏è [SC4-FALSE_ALARM] Ch·∫ø ƒë·ªô test b√°o gi·∫£ - PriorityController ƒëang qu√©t nh∆∞ng kh√¥ng ph√°t hi·ªán xe th·∫≠t.")
                    
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log(f"‚ùå L·ªói trong false alarm simulation: {e}")
                    break
        
        self.false_alarm_active = True
        threading.Thread(target=simulate_false_alarm, daemon=True).start()
    
    def start_default_priority_spawning(self, interval=100):
        """
        Spawn xe ∆∞u ti√™n cho k·ªãch b·∫£n M·∫∑c ƒë·ªãnh
        M√¥ ph·ªèng 0.3% xe ∆∞u ti√™n random t·ª´ m·ªçi h∆∞·ªõng
        
        Args:
            interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn spawn (gi√¢y)
        """
        # D·ª´ng spawning c≈© n·∫øu c√≥
        self.stop_priority_spawning()
        
        # ƒê√°nh d·∫•u spawning ƒëang ho·∫°t ƒë·ªông
        self.spawning_active = True
        
        def spawn_loop():
            """Loop spawn xe ∆∞u ti√™n ng·∫´u nhi√™n cho mode M·∫∑c ƒë·ªãnh"""
            import time
            import random
            
            all_directions = ["north", "south", "east", "west"]
            
            while self.spawning_active:
                try:
                    # Ch·ªçn ng·∫´u nhi√™n m·ªôt h∆∞·ªõng
                    direction = random.choice(all_directions)
                    self.spawn_priority_vehicle(direction, "DEFAULT")
                    
                    # ƒê·ª£i interval gi√¢y
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log(f"‚ö† L·ªói trong default spawn loop: {e}")
                    time.sleep(5)
        
        # T·∫°o v√† kh·ªüi ch·∫°y thread
        import threading
        self.spawning_thread = threading.Thread(target=spawn_loop, daemon=True)
        self.spawning_thread.start()
        self.log(f"üîÑ ƒê√£ b·∫Øt ƒë·∫ßu spawn xe ∆∞u ti√™n ng·∫´u nhi√™n m·ªói {interval}s (mode M·∫∑c ƒë·ªãnh)")
    
    def get_direction_from_edge(self, edge_id: str, junction_id: str) -> str:
        """
        X√°c ƒë·ªãnh h∆∞·ªõng d·ª±a tr√™n edge ID
        
        Returns:
            "north", "south", "east", "west" ho·∫∑c None
        """
        # Mapping cho J1
        if junction_id == "J1":
            if "-E1" in edge_id:
                return "north"
            elif "-E2" in edge_id:
                return "south"
            elif "E0" in edge_id and "-E0" not in edge_id:
                return "west"
            elif "-E3" in edge_id:  # T·ª´ J4 sang
                return "east"
        
        # Mapping cho J4
        elif junction_id == "J4":
            if "-E4" in edge_id:
                return "north"
            elif "-E5" in edge_id:
                return "south"
            elif "-E6" in edge_id:
                return "west"
            elif "E3" in edge_id and "-E3" not in edge_id:  # T·ª´ J1 sang
                return "east"
        
        return None
    
    def start_priority_spawning(self, directions, interval=15, scenario_id="SC"):
        """B·∫Øt ƒë·∫ßu spawn xe ∆∞u ti√™n ƒë·ªãnh k·ª≥ t·ª´ c√°c h∆∞·ªõng ch·ªâ ƒë·ªãnh
        
        Args:
            directions: List c√°c h∆∞·ªõng ["north", "south", "east", "west"]
            interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn spawn (gi√¢y)
            scenario_id: ID c·ªßa k·ªãch b·∫£n (SC1, SC2, ...)
        """
        # D·ª´ng spawning c≈© n·∫øu c√≥
        self.stop_priority_spawning()
        
        # ƒê√°nh d·∫•u spawning ƒëang ho·∫°t ƒë·ªông
        self.spawning_active = True
        
        def spawn_loop():
            """Loop ch·∫°y trong thread ri√™ng ƒë·ªÉ spawn xe ƒë·ªãnh k·ª≥"""
            import time
            import random
            
            while self.spawning_active:
                try:
                    # Ch·ªçn ng·∫´u nhi√™n m·ªôt h∆∞·ªõng t·ª´ danh s√°ch
                    direction = random.choice(directions)
                    self.spawn_priority_vehicle(direction, scenario_id)
                    
                    # ƒê·ª£i interval gi√¢y
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log(f"‚ö† L·ªói trong spawn loop: {e}")
                    time.sleep(5)  # ƒê·ª£i 5s n·∫øu c√≥ l·ªói
        
        # T·∫°o v√† kh·ªüi ch·∫°y thread
        import threading
        self.spawning_thread = threading.Thread(target=spawn_loop, daemon=True)
        self.spawning_thread.start()
        self.log(f"üîÑ ƒê√£ b·∫Øt ƒë·∫ßu spawn xe ∆∞u ti√™n t·ª´ {directions} m·ªói {interval}s")
    
    def start_priority_spawning_stuck(self, directions, interval=15, scenario_id="SC5"):
        """B·∫Øt ƒë·∫ßu spawn xe ∆∞u ti√™n ·ªü V·ªä TR√ç XA (gi·ªØa d√≤ng xe) ƒë·ªÉ m√¥ ph·ªèng k·∫πt xe
        
        Args:
            directions: List c√°c h∆∞·ªõng ["north", "south", "east", "west"]
            interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn spawn (gi√¢y)
            scenario_id: ID c·ªßa k·ªãch b·∫£n (m·∫∑c ƒë·ªãnh SC5)
        """
        # D·ª´ng spawning c≈© n·∫øu c√≥
        self.stop_priority_spawning()
        
        # ƒê√°nh d·∫•u spawning ƒëang ho·∫°t ƒë·ªông
        self.spawning_active = True
        
        def spawn_stuck_loop():
            """Loop spawn xe ∆∞u ti√™n SAU d√≤ng xe b√¨nh th∆∞·ªùng (b·ªã k·∫πt)"""
            import time
            import random
            import traci
            
            while self.spawning_active:
                try:
                    # Ch·ªçn ng·∫´u nhi√™n m·ªôt h∆∞·ªõng
                    direction = random.choice(directions)
                    
                    # C√ÅCH M·ªöI: Spawn nhi·ªÅu xe b√¨nh th∆∞·ªùng tr∆∞·ªõc, sau ƒë√≥ spawn xe ∆∞u ti√™n
                    # ‚Üí Xe ∆∞u ti√™n s·∫Ω t·ª± ƒë·ªông x·∫øp SAU d√≤ng xe ‚Üí B·ªä K·∫∏T
                    
                    # Route mapping
                    j1_routes = {
                        "north": ["r5", "r6", "r7", "r8", "r9"],
                        "south": ["r10", "r11", "r12", "r13", "r14"],
                        "west": ["r0", "r1", "r2"],
                    }
                    j4_routes = {
                        "north": ["r15", "r16", "r17", "r18", "r19"],
                        "south": ["r20", "r21", "r22", "r23", "r24"],
                        "west": ["r25", "r26", "r27"]
                    }
                    
                    direction_names = {"north": "B·∫Øc", "south": "Nam", "west": "T√¢y"}
                    dir_name = direction_names.get(direction, "Kh√¥ng x√°c ƒë·ªãnh")
                    
                    # 1. Spawn 3-5 xe b√¨nh th∆∞·ªùng tr∆∞·ªõc (t·∫°o "d√≤ng xe d√†i")
                    num_normal_cars = random.randint(3, 5)
                    for i in range(num_normal_cars):
                        if direction in j1_routes:
                            route = random.choice(j1_routes[direction])
                            normal_id = f"normal_block_{int(traci.simulation.getTime())}_{i}"
                            try:
                                traci.vehicle.add(normal_id, route, typeID="car_normal", departSpeed="max")
                                time.sleep(0.2)  # Delay nh·ªè gi·ªØa c√°c xe
                            except:
                                pass
                    
                    # 2. ƒê·ª£i 1-2 gi√¢y ƒë·ªÉ xe b√¨nh th∆∞·ªùng ch·∫°y xa m·ªôt ch√∫t
                    time.sleep(random.uniform(1, 2))
                    
                    # 3. B√ÇY GI·ªú spawn xe ∆∞u ti√™n ‚Üí n√≥ s·∫Ω ·ªü SAU d√≤ng xe b√¨nh th∆∞·ªùng ‚Üí B·ªä K·∫∏T!
                    self.spawn_priority_vehicle(direction, scenario_id, depart_pos="base")
                    
                    self.log(f"üöóüöóüöì SC5: ƒê√£ t·∫°o d√≤ng xe {num_normal_cars} xe + 1 xe ∆∞u ti√™n B·ªä K·∫∏T t·ª´ {dir_name}")
                    
                    # ƒê·ª£i interval gi√¢y
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log(f"‚ö† L·ªói trong spawn stuck loop: {e}")
                    time.sleep(5)
        
        # T·∫°o v√† kh·ªüi ch·∫°y thread
        import threading
        self.spawning_thread = threading.Thread(target=spawn_stuck_loop, daemon=True)
        self.spawning_thread.start()
        self.log(f"üîÑ SC5: Spawn xe B·ªä K·∫∏T (spawn sau d√≤ng xe b√¨nh th∆∞·ªùng) t·ª´ {directions} m·ªói {interval}s")
    
    def start_priority_spawning_consecutive(self, directions, base_interval=12, scenario_id="SC6"):
        """SC6: Spawn nhi·ªÅu xe ∆∞u ti√™n LI√äN TI·∫æP t·ª´ c√πng h∆∞·ªõng
        
        M√¥ ph·ªèng t√¨nh hu·ªëng: V·ª´a cho xe c·ª©u th∆∞∆°ng ƒëi qua, 10-20s sau l·∫°i c√≥ xe kh√°c c√πng h∆∞·ªõng.
        
        Args:
            directions: List c√°c h∆∞·ªõng (th∆∞·ªùng ch·ªâ 1 h∆∞·ªõng cho r√µ r√†ng)
            base_interval: Kho·∫£ng th·ªùi gian c∆° b·∫£n gi·ªØa c√°c xe (gi√¢y)
            scenario_id: ID k·ªãch b·∫£n (m·∫∑c ƒë·ªãnh SC6)
        """
        # D·ª´ng spawning c≈© n·∫øu c√≥
        self.stop_priority_spawning()
        
        # ƒê√°nh d·∫•u spawning ƒëang ho·∫°t ƒë·ªông
        self.spawning_active = True
        
        def spawn_consecutive_loop():
            """Loop spawn xe ∆∞u ti√™n li√™n ti·∫øp t·ª´ c√πng h∆∞·ªõng"""
            import time
            import random
            
            consecutive_count = 0
            
            while self.spawning_active:
                try:
                    # Lu√¥n ch·ªçn c√πng 1 h∆∞·ªõng (ho·∫∑c random t·ª´ list nh·ªè)
                    direction = directions[0] if len(directions) == 1 else random.choice(directions)
                    
                    # Spawn xe ∆∞u ti√™n
                    consecutive_count += 1
                    self.spawn_priority_vehicle(direction, f"{scenario_id}_consecutive_{consecutive_count}", depart_pos="base")
                    
                    direction_names = {"north": "B·∫Øc", "south": "Nam", "west": "T√¢y"}
                    dir_name = direction_names.get(direction, "Kh√¥ng x√°c ƒë·ªãnh")
                    
                    # Log t√¨nh hu·ªëng li√™n ti·∫øp
                    self.log(f"üöëüöë SC6-CONSECUTIVE: Xe ∆∞u ti√™n #{consecutive_count} t·ª´ {dir_name} (li√™n ti·∫øp)")
                    
                    # Interval bi·∫øn ƒë·ªïi nh·∫π (10-15s) ƒë·ªÉ m√¥ ph·ªèng th·ª±c t·∫ø
                    actual_interval = base_interval + random.uniform(-2, 3)
                    
                    # ƒê·ª£i tr∆∞·ªõc khi spawn xe ti·∫øp theo
                    time.sleep(actual_interval)
                    
                except Exception as e:
                    self.log(f"‚ö† L·ªói trong consecutive spawn loop: {e}")
                    time.sleep(5)
        
        # T·∫°o v√† kh·ªüi ch·∫°y thread
        import threading
        self.spawning_thread = threading.Thread(target=spawn_consecutive_loop, daemon=True)
        self.spawning_thread.start()
        self.log(f"üîÑ SC6: Spawn xe ∆∞u ti√™n LI√äN TI·∫æP t·ª´ {directions} m·ªói ~{base_interval}s (¬±2-3s)")
    
    def start_false_alarm_simulation(self, interval=30):
        """M√¥ ph·ªèng b√°o gi·∫£ - spawn xe r·ªìi x√≥a ngay ƒë·ªÉ gi·∫£ l·∫≠p t√≠n hi·ªáu sai
        
        Args:
            interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn b√°o gi·∫£ (gi√¢y)
        """
        # D·ª´ng spawning c≈© n·∫øu c√≥
        self.stop_priority_spawning()
        
        # ƒê√°nh d·∫•u spawning ƒëang ho·∫°t ƒë·ªông
        self.spawning_active = True
        
        def false_alarm_loop():
            """Loop ch·∫°y trong thread ƒë·ªÉ t·∫°o t√≠n hi·ªáu b√°o gi·∫£"""
            import time
            import random
            
            directions = ["north", "south", "west"]
            direction_names = {"north": "B·∫Øc", "south": "Nam", "west": "T√¢y"}
            
            while self.spawning_active:
                try:
                    # Ch·ªçn ng·∫´u nhi√™n h∆∞·ªõng
                    direction = random.choice(directions)
                    dir_name = direction_names.get(direction, "Kh√¥ng x√°c ƒë·ªãnh")
                    
                    # Spawn xe ƒë·ªÉ t·∫°o t√≠n hi·ªáu
                    self.log(f"‚ö†Ô∏è B√ÅOGI·∫¢ - Ph√°t hi·ªán t√≠n hi·ªáu xe ∆∞u ti√™n t·ª´ {dir_name}")
                    spawned_vehicles = self.spawn_priority_vehicle(direction, "SC4_FALSE")
                    
                    # ƒê·ª£i 2-3 gi√¢y (gi·∫£ l·∫≠p th·ªùi gian ph√°t hi·ªán)
                    time.sleep(random.uniform(2, 3))
                    
                    # X√≥a xe ngay (m√¥ ph·ªèng b√°o gi·∫£ - xe kh√¥ng th·∫≠t)
                    if spawned_vehicles:
                        try:
                            import traci
                            for veh_id in spawned_vehicles:
                                if veh_id in traci.vehicle.getIDList():
                                    traci.vehicle.remove(veh_id)
                            self.log(f"üóëÔ∏è B√ÅOGI·∫¢ - ƒê√£ x√≥a xe gi·∫£ [{len(spawned_vehicles)} xe] - T√≠n hi·ªáu sai!")
                        except Exception as remove_err:
                            self.log(f"‚ö† L·ªói khi x√≥a xe b√°o gi·∫£: {remove_err}")
                    
                    # ƒê·ª£i interval gi√¢y tr∆∞·ªõc l·∫ßn b√°o gi·∫£ ti·∫øp theo
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log(f"‚ö† L·ªói trong false alarm loop: {e}")
                    time.sleep(5)
        
        # T·∫°o v√† kh·ªüi ch·∫°y thread
        import threading
        self.spawning_thread = threading.Thread(target=false_alarm_loop, daemon=True)
        self.spawning_thread.start()
        self.log(f"üîÑ ƒê√£ b·∫Øt ƒë·∫ßu m√¥ ph·ªèng b√°o gi·∫£ m·ªói {interval}s (spawn xe ‚Üí x√≥a ngay)")
    
    def stop_priority_spawning(self):
        """D·ª´ng vi·ªác spawn xe ∆∞u ti√™n"""
        if self.spawning_active:
            self.spawning_active = False
            if self.spawning_thread:
                self.spawning_thread.join(timeout=2)
            self.log("‚èπ ƒê√£ d·ª´ng spawn xe ∆∞u ti√™n")
    
    def spawn_priority_vehicle(self, direction, scenario_id, depart_pos="base"):
        """Spawn m·ªôt xe ∆∞u ti√™n t·ª´ h∆∞·ªõng ch·ªâ ƒë·ªãnh - ·ªü C·∫¢ 2 ng√£ t∆∞ (J1 v√† J4)
        
        Args:
            direction: H∆∞·ªõng spawn ("north", "south", "west")
            scenario_id: ID k·ªãch b·∫£n (SC1, SC2, SC5...)
            depart_pos: V·ªã tr√≠ spawn - "base" (ƒë·∫ßu route) ho·∫∑c s·ªë m√©t t·ª´ ƒë·∫ßu route
        
        Returns:
            List c√°c vehicle ID ƒë√£ spawn th√†nh c√¥ng (ƒë·ªÉ x√≥a trong tr∆∞·ªùng h·ª£p false alarm)
        """
        spawned_vehicle_ids = []
        
        try:
            import traci
            current_time = traci.simulation.getTime()
            
            # ƒê·∫øm s·ªë xe ∆∞u ti√™n hi·ªán t·∫°i
            all_vehicles = traci.vehicle.getIDList()
            priority_count = sum(1 for v in all_vehicles if 'priority' in v)
            
            # ƒê·ªãnh nghƒ©a routes cho C·∫¢ 2 ng√£ t∆∞
            # Ng√£ t∆∞ J1 (giao l·ªô ch√≠nh v·ªõi E0, E1, E2, E3)
            j1_routes = {
                "north": ["r5", "r6", "r7", "r8", "r9"],     # T·ª´ B·∫Øc (-E1) J1 - h∆∞·ªõng ch√≠nh
                "south": ["r10", "r11", "r12", "r13", "r14"],  # T·ª´ Nam (-E2) J1 - h∆∞·ªõng ch√≠nh
                "west": ["r0", "r1", "r2"],      # T·ª´ T√¢y (E0) J1 - h∆∞·ªõng nh√°nh
            }
            
            # Ng√£ t∆∞ J4 (giao l·ªô ph·ª• v·ªõi E4, E5, E6, E3)
            j4_routes = {
                "north": ["r15", "r16", "r17", "r18", "r19"],         # T·ª´ B·∫Øc (-E4) J4 - h∆∞·ªõng ch√≠nh
                "south": ["r20", "r21", "r22", "r23", "r24"],  # T·ª´ Nam (-E5) J4 - h∆∞·ªõng ch√≠nh
                "west": ["r25", "r26", "r27"]    # T·ª´ T√¢y (-E6) J4 - h∆∞·ªõng nh√°nh
            }
            
            direction_names = {
                "north": "B·∫Øc",
                "south": "Nam", 
                "east": "ƒê√¥ng",
                "west": "T√¢y"
            }
            
            dir_name = direction_names.get(direction, "Kh√¥ng x√°c ƒë·ªãnh")
            
            # Spawn xe ·ªü C·∫¢NG 2 ng√£ t∆∞
            import random
            spawned_count = 0
            
            # 1. Spawn ·ªü ng√£ t∆∞ J1
            if direction in j1_routes:
                route_j1 = random.choice(j1_routes[direction])
                veh_id_j1 = f"priority_{scenario_id}_{direction}_J1_{int(current_time)}"
                
                try:
                    # Convert depart_pos to proper format for SUMO
                    if isinstance(depart_pos, (int, float)):
                        pos_param = str(float(depart_pos))
                    else:
                        pos_param = depart_pos
                    
                    traci.vehicle.add(
                        veh_id_j1, 
                        route_j1, 
                        typeID="priority",
                        departPos=pos_param,
                        departSpeed="random",
                        departLane="best"
                    )
                    
                    # Ki·ªÉm tra spawn th√†nh c√¥ng
                    import time
                    time.sleep(0.3)
                    if veh_id_j1 in traci.vehicle.getIDList():
                        edge = traci.vehicle.getRoadID(veh_id_j1)
                        
                        # ƒê·ªîI M√ÄU XE ∆ØU TI√äN ƒê·ªÇ D·ªÑ NH√åN - M√†u ƒë·ªè n·ªïi b·∫≠t
                        traci.vehicle.setColor(veh_id_j1, (255, 0, 0, 255))  # ƒê·ªè r·ª±c
                        
                        spawned_count += 1
                        spawned_vehicle_ids.append(veh_id_j1)
                        pos_info = f"@ {depart_pos}m" if isinstance(depart_pos, (int, float)) else "ƒë·∫ßu route"
                        self.log(f"üö® Spawn xe ∆∞u ti√™n t·ª´ {dir_name} t·∫°i J1 [{veh_id_j1}] - Edge: {edge} ({pos_info})")
                except Exception as e:
                    # Log l·ªói n·∫øu spawn th·∫•t b·∫°i
                    if "depart" in str(e).lower():
                        self.log(f"‚ö† J1: departPos {depart_pos}m qu√° xa, th·ª≠ l·∫°i v·ªõi 'base'")
                    pass
            
            # 2. Spawn ·ªü ng√£ t∆∞ J4
            if direction in j4_routes:
                route_j4 = random.choice(j4_routes[direction])
                veh_id_j4 = f"priority_{scenario_id}_{direction}_J4_{int(current_time)}"
                
                try:
                    # Convert depart_pos to proper format for SUMO
                    if isinstance(depart_pos, (int, float)):
                        pos_param = str(float(depart_pos))
                    else:
                        pos_param = depart_pos
                    
                    traci.vehicle.add(
                        veh_id_j4, 
                        route_j4, 
                        typeID="priority",
                        departPos=pos_param,
                        departSpeed="random",
                        departLane="best"
                    )
                    
                    # Ki·ªÉm tra spawn th√†nh c√¥ng
                    import time
                    time.sleep(0.3)
                    if veh_id_j4 in traci.vehicle.getIDList():
                        edge = traci.vehicle.getRoadID(veh_id_j4)
                        
                        # ƒê·ªîI M√ÄU XE ∆ØU TI√äN ƒê·ªÇ D·ªÑ NH√åN - M√†u ƒë·ªè n·ªïi b·∫≠t
                        traci.vehicle.setColor(veh_id_j4, (255, 0, 0, 255))  # ƒê·ªè r·ª±c
                        
                        spawned_count += 1
                        spawned_vehicle_ids.append(veh_id_j4)
                        pos_info = f"@ {depart_pos}m" if isinstance(depart_pos, (int, float)) else "ƒë·∫ßu route"
                        self.log(f"üö® Spawn xe ∆∞u ti√™n t·ª´ {dir_name} t·∫°i J4 [{veh_id_j4}] - Edge: {edge} ({pos_info})")
                except Exception as e:
                    # Log l·ªói n·∫øu spawn th·∫•t b·∫°i
                    if "depart" in str(e).lower():
                        self.log(f"‚ö† J4: departPos {depart_pos}m qu√° xa, th·ª≠ l·∫°i v·ªõi 'base'")
                    pass
            
            if spawned_count > 0:
                self.log(f"üìä ƒê√£ spawn {spawned_count} xe ∆∞u ti√™n t·ª´ h∆∞·ªõng {dir_name} (T·ªïng: {priority_count + spawned_count} xe)")
                
        except Exception as e:
            # B·ªè qua l·ªói t·ªïng qu√°t
            pass
        
        return spawned_vehicle_ids

    # ============ Update data from SUMO & UI ============
    def update_data_from_sumo(self):
        """
        L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ SUMO qua VehicleCounter module:
        - Tr·∫°ng th√°i ƒë√®n (Red/Yellow/Green)
        - S·ªë xe theo h∆∞·ªõng (s·ª≠ d·ª•ng VehicleCounter.count_vehicles_on_edges())
        - H√†ng ch·ªù (t·ªïng) v√† th·ªùi gian ch·ªù trung b√¨nh
        - T√≠nh KPI: Fairness, Coordination, Delay, Throughput, Cycle
        
        L∆ØU √ù: S·ª¨ D·ª§NG VehicleCounter MODULE thay v√¨ t·ª± ƒë·∫øm b·∫±ng TraCI
        """
        try:
            import traci
        except Exception:
            self.log("‚ö† Traci ch∆∞a s·∫µn s√†ng khi update d·ªØ li·ªáu.")
            return

        try:
            tls_ids = traci.trafficlight.getIDList()
            if not tls_ids:
                return

            # === B∆Ø·ªöC 1: ƒê·∫øm xe qua VehicleCounter ===
            vehicle_counts = None
            if self.vehicle_counter is not None:
                try:
                    # G·ªçi method ƒë·∫øm xe c·ªßa VehicleCounter
                    self.vehicle_counter.count_vehicles_on_edges()
                    # L·∫•y k·∫øt qu·∫£ ƒë·∫øm
                    vehicle_counts = self.vehicle_counter.get_current_counts()
                except Exception as vc_err:
                    self.log(f"‚ö† L·ªói khi ƒë·∫øm xe qua VehicleCounter: {vc_err}")
                    vehicle_counts = None
            
            # === ƒê·∫øm xe ∆∞u ti√™n hi·ªán t·∫°i ===
            all_vehicles = traci.vehicle.getIDList()
            priority_vehicles = [v for v in all_vehicles if 'priority' in v.lower()]
            # Kh√¥ng log s·ªë xe ∆∞u ti√™n n·ªØa ƒë·ªÉ tr√°nh spam

            # === B∆Ø·ªöC 2: C·∫≠p nh·∫≠t d·ªØ li·ªáu cho t·ª´ng ng√£ t∆∞ ===
            for i, tls_id in enumerate(tls_ids[:2]):
                int_name = f"Ng√£ t∆∞ {i+1}"
                junction_id = "J1" if i == 0 else "J4"
                
                if int_name not in self.intersection_data:
                    continue

                # --- L·∫•y tr·∫°ng th√°i ƒë√®n ---
                try:
                    state = traci.trafficlight.getRedYellowGreenState(tls_id)
                except Exception:
                    state = ""

                if "G" in state:
                    self.intersection_data[int_name]["light_state"] = "Xanh"
                elif "y" in state.lower():
                    self.intersection_data[int_name]["light_state"] = "V√†ng"
                elif all(ch == "r" for ch in state.lower()):
                    self.intersection_data[int_name]["light_state"] = "ƒê·ªè To√†n Ph·∫ßn"
                else:
                    self.intersection_data[int_name]["light_state"] = "ƒê·ªè"

                # --- S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ VehicleCounter ---
                if vehicle_counts and junction_id in vehicle_counts:
                    # L·∫•y s·ªë xe t·ª´ VehicleCounter
                    junction_vehicles = vehicle_counts[junction_id]
                    self.intersection_data[int_name]["vehicles"] = junction_vehicles.copy()
                    
                    # T√≠nh t·ªïng xe (queue)
                    total_vehicle = sum(junction_vehicles.values())
                    self.intersection_data[int_name]["queue"] = total_vehicle
                    
                    # T√≠nh th·ªùi gian ch·ªù trung b√¨nh (v·∫´n c·∫ßn d√πng TraCI)
                    total_wait = 0.0
                    try:
                        # L·∫•y t·∫•t c·∫£ xe trong simulation
                        all_vehicle_ids = traci.vehicle.getIDList()
                        for vid in all_vehicle_ids:
                            try:
                                total_wait += traci.vehicle.getWaitingTime(vid)
                            except Exception:
                                continue
                        
                        self.intersection_data[int_name]["wait_time"] = round(
                            total_wait / total_vehicle, 1
                        ) if total_vehicle > 0 else 0
                    except Exception as wait_err:
                        self.intersection_data[int_name]["wait_time"] = 0
                else:
                    # Fallback: n·∫øu VehicleCounter kh√¥ng ho·∫°t ƒë·ªông, ƒë·∫∑t v·ªÅ 0
                    self.intersection_data[int_name]["vehicles"] = {
                        "B·∫Øc": 0, "Nam": 0, "ƒê√¥ng": 0, "T√¢y": 0
                    }
                    self.intersection_data[int_name]["queue"] = 0
                    self.intersection_data[int_name]["wait_time"] = 0


            # --- C√¥ng b·∫±ng (Fairness) ---
            queues = [data["queue"] for data in self.intersection_data.values()]
            if len(queues) > 0 and sum(queues) > 0:
                mean_q = sum(queues) / len(queues)
                std_q = (sum((x - mean_q) ** 2 for x in queues) / len(queues)) ** 0.5
                fairness = round(1 - (std_q / (mean_q + 0.001)), 2)
            else:
                fairness = 1.0

            # --- Ph·ªëi h·ª£p (Coordination) ---
            try:
                if len(tls_ids) >= 2:
                    rem1 = traci.trafficlight.getNextSwitch(tls_ids[0]) - traci.simulation.getTime()
                    rem2 = traci.trafficlight.getNextSwitch(tls_ids[1]) - traci.simulation.getTime()
                    diff = abs(rem1 - rem2)
                    cycle = self.green_time + self.yellow_time + self.red_time
                    coordination = max(0, 100 * (1 - diff / cycle))
                else:
                    coordination = 100.0
            except Exception:
                coordination = 100.0

            # --- C√°c KPI to√†n c·ª•c ---
            total_vehicles = sum(sum(d["vehicles"].values()) for d in self.intersection_data.values())
            if len(self.intersection_data) > 0:
                avg_delay = sum(data["wait_time"] for data in self.intersection_data.values()) / len(self.intersection_data)
            else:
                avg_delay = 0.0
            throughput = total_vehicles * 10 
            avg_cycle = int(self.green_time + self.yellow_time + self.red_time)

            self.global_kpi_data = {
                "T·ªïng xe": total_vehicles,
                "ƒê·ªô tr·ªÖ TB": round(avg_delay, 1),
                "L∆∞u l∆∞·ª£ng": throughput,
                "Chu k·ª≥ TB": avg_cycle,
                "C√¥ng b·∫±ng": fairness,
                "Ph·ªëi h·ª£p": round(coordination, 1)
            }
            
            # --- C·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn ---
            if self.sensor_manager:
                try:
                    # L·∫•y t·ªïng s·ªë detectors
                    summary = self.sensor_manager.get_summary()
                    
                    # T√≠nh m·∫≠t ƒë·ªô v√† queue trung b√¨nh t·ª´ E2 detectors
                    total_occupancy = 0
                    total_queue = 0
                    e2_count = 0
                    
                    for junction_id in ["J1", "J4"]:
                        densities = self.sensor_manager.get_all_junction_densities(junction_id)
                        for direction, data in densities.items():
                            if "error" not in data:
                                # T√≠nh occupancy t·ª´ s·ªë xe (simplified)
                                occupancy = min(100, data["total_vehicles"] * 10)  # Rough estimate
                                total_occupancy += occupancy
                                total_queue += data["queue_length"]
                                e2_count += 1
                    
                    avg_occupancy = round(total_occupancy / e2_count, 1) if e2_count > 0 else 0
                    avg_queue = round(total_queue / e2_count, 1) if e2_count > 0 else 0
                    
                    # C·∫≠p nh·∫≠t sensor data
                    self.sensor_data = {
                        "E1 Detectors": summary.get("e1_count", 0),
                        "E2 Detectors": summary.get("e2_count", 0),
                        "M·∫≠t ƒë·ªô TB": avg_occupancy,
                        "Queue TB": avg_queue
                    }
                except Exception as sensor_err:
                    # N·∫øu l·ªói, gi·ªØ nguy√™n d·ªØ li·ªáu c≈©
                    pass
            
            # --- C·∫≠p nh·∫≠t d·ªØ li·ªáu xe ∆∞u ti√™n ---
            self.update_priority_vehicle_data()

        except Exception as e:
            import traceback
            self.log(f"‚ö† C·∫≠p nh·∫≠t d·ªØ li·ªáu SUMO th·∫•t b·∫°i: {e}")
            self.log(f"üìã Chi ti·∫øt l·ªói: {traceback.format_exc()}")

    def update_ui(self):
        try:
            for key, value in self.global_kpi_data.items():
                if key in self.global_kpi_cards:
                    self.global_kpi_cards[key].configure(text=str(value))
            for int_name, data in self.intersection_data.items():
                if int_name in self.intersection_widgets:
                    widgets = self.intersection_widgets[int_name]
                    widgets["queue"].configure(text=str(data["queue"]))
                    widgets["wait"].configure(text=str(data["wait_time"]))
                    for direction, count in data["vehicles"].items():
                        if direction in widgets["directions"]:
                            widgets["directions"][direction].configure(text=str(count))
            
            # C·∫≠p nh·∫≠t sensor cards
            if hasattr(self, 'sensor_data') and hasattr(self, 'sensor_cards'):
                for key, value in self.sensor_data.items():
                    if key in self.sensor_cards:
                        self.sensor_cards[key].configure(text=str(value))
            
            # C·∫≠p nh·∫≠t priority panel
            self.update_priority_ui()
            
            # occasional logs
            events = ["C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n giao th√¥ng", "Ph√°t hi·ªán thay ƒë·ªïi l∆∞u l∆∞·ª£ng", "ƒêi·ªÅu ch·ªânh chu k·ª≥ ƒë√®n",
                      "H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh"]
            if random.random() < 0.05:
                self.log(random.choice(events))
        except Exception as e:
            self.log(f"‚ö† C·∫≠p nh·∫≠t UI th·∫•t b·∫°i: {e}")

    def update_priority_vehicle_data(self):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu xe ∆∞u ti√™n theo h∆∞·ªõng"""
        try:
            import traci
            
            # Reset data
            for junction_id in self.priority_vehicle_data:
                for direction in self.priority_vehicle_data[junction_id]:
                    self.priority_vehicle_data[junction_id][direction] = 0
            
            # L·∫•y t·∫•t c·∫£ xe ∆∞u ti√™n
            all_vehicles = traci.vehicle.getIDList()
            priority_vehicles = [v for v in all_vehicles if 'priority' in v.lower()]
            
            total_priority = 0
            
            for veh_id in priority_vehicles:
                try:
                    edge_id = traci.vehicle.getRoadID(veh_id)
                    
                    # X√°c ƒë·ªãnh junction v√† direction
                    junction_id = None
                    direction = None
                    
                    # Improved direction detection
                    if "-E1" in edge_id:
                        junction_id, direction = "J1", "B·∫Øc"
                    elif "-E2" in edge_id:
                        junction_id, direction = "J1", "Nam"
                    elif "E0" in edge_id and "-E0" not in edge_id:
                        junction_id, direction = "J1", "T√¢y"
                    elif "-E3" in edge_id:
                        junction_id, direction = "J1", "ƒê√¥ng"
                    elif "-E4" in edge_id:
                        junction_id, direction = "J4", "B·∫Øc"
                    elif "-E5" in edge_id:
                        junction_id, direction = "J4", "Nam"
                    elif "-E6" in edge_id:
                        junction_id, direction = "J4", "T√¢y"
                    elif "E3" in edge_id and "-E3" not in edge_id:
                        junction_id, direction = "J4", "ƒê√¥ng"
                    
                    if junction_id and direction:
                        self.priority_vehicle_data[junction_id][direction] += 1
                        total_priority += 1
                        
                except Exception:
                    continue
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã
            if total_priority > 0 and not self.has_priority_vehicles:
                self.show_priority_panel()
            elif total_priority == 0 and self.has_priority_vehicles:
                self.hide_priority_panel()
                
        except Exception as e:
            pass

    def show_priority_panel(self):
        """Hi·ªÉn th·ªã panel xe ∆∞u ti√™n v·ªõi animation"""
        if not self.has_priority_vehicles:
            self.has_priority_vehicles = True
            # Insert priority panel after sensor panel
            self.priority_container.grid(row=2, column=0, sticky="ew", pady=(0, 6))
            
            # Animation effect
            self.animate_priority_title()
            self.log("üö® PH√ÅT HI·ªÜN XE ∆ØU TI√äN - Hi·ªÉn th·ªã panel theo d√µi")

    def hide_priority_panel(self):
        """·∫®n panel xe ∆∞u ti√™n"""
        if self.has_priority_vehicles:
            self.has_priority_vehicles = False
            self.priority_container.grid_forget()
            self.log("‚úÖ Kh√¥ng c√≤n xe ∆∞u ti√™n - ·∫®n panel theo d√µi")

    def animate_priority_title(self):
        """Animation cho title xe ∆∞u ti√™n"""
        def blink():
            if self.has_priority_vehicles:
                current_color = self.priority_title.cget("text_color")
                new_color = "#ffffff" if current_color == "#ffcccb" else "#ffcccb"
                self.priority_title.configure(text_color=new_color)
                self.after(500, blink)  # Blink every 500ms
        
        blink()

    def update_priority_ui(self):
        """C·∫≠p nh·∫≠t UI panel xe ∆∞u ti√™n"""
        if self.has_priority_vehicles:
            for junction_id, directions in self.priority_vehicle_data.items():
                if junction_id in self.priority_widgets:
                    for direction, count in directions.items():
                        if direction in self.priority_widgets[junction_id]:
                            widget = self.priority_widgets[junction_id][direction]
                            widget.configure(text=str(count))
                            
                            # Highlight n·∫øu c√≥ xe
                            if count > 0:
                                widget.configure(text_color="#dc2626")  # ƒê·ªè ƒë·∫≠m
                            else:
                                # M√†u m·∫∑c ƒë·ªãnh theo h∆∞·ªõng
                                colors = {
                                    "B·∫Øc": "#991b1b", "Nam": "#9a3412", 
                                    "ƒê√¥ng": "#14532d", "T√¢y": "#831843"
                                }
                                widget.configure(text_color=colors.get(direction, "#64748b"))


if __name__ == "__main__":
    app = SmartTrafficApp()
    app.mainloop()